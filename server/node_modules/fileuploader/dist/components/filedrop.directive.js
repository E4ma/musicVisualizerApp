"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var FileDropDirective = (function () {
    /**
     * Constructor
     */
    function FileDropDirective(element) {
        this.fileOver = new core_1.EventEmitter();
        this.onFileDrop = new core_1.EventEmitter();
        this.dropEvent = new core_1.EventEmitter();
        this.myElement = element;
    }
    FileDropDirective.prototype.onDrop = function (event) {
        var files = this._getFiles(event);
        this._preventAndStop(event);
        this.drag = false;
        this.fileOver.emit(false);
        this.onFileDrop.emit(files);
        this.dropEvent.emit(event);
    };
    FileDropDirective.prototype.onDragLeave = function (event) {
        this._preventAndStop(event);
        this.drag = false;
        this.fileOver.emit(false);
    };
    FileDropDirective.prototype.onDragOver = function (event) {
        this._preventAndStop(event);
        this.drag = true;
        this.fileOver.emit(true);
    };
    FileDropDirective.prototype._getFiles = function (event) {
        return event.dataTransfer ? event.dataTransfer.files : event.target.files;
    };
    FileDropDirective.prototype._preventAndStop = function (event) {
        event.preventDefault();
        event.stopPropagation();
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], FileDropDirective.prototype, "drag", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], FileDropDirective.prototype, "fileOver", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], FileDropDirective.prototype, "onFileDrop", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], FileDropDirective.prototype, "dropEvent", void 0);
    __decorate([
        core_1.HostListener('drop', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], FileDropDirective.prototype, "onDrop", null);
    __decorate([
        core_1.HostListener('dragleave', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Object)
    ], FileDropDirective.prototype, "onDragLeave", null);
    __decorate([
        core_1.HostListener('dragover', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Object)
    ], FileDropDirective.prototype, "onDragOver", null);
    FileDropDirective = __decorate([
        core_1.Directive({ selector: '[fileDropDirective]' }),
        __metadata("design:paramtypes", [core_1.ElementRef])
    ], FileDropDirective);
    return FileDropDirective;
}());
exports.FileDropDirective = FileDropDirective;
//# sourceMappingURL=filedrop.directive.js.map