[{"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\index.js":"1","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\App.js":"2","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\TemplatesPage.js":"3","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\About.js":"4","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Home.js":"5","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Signin\\Login.js":"6","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Navbars\\Navigation.js":"7","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Displayer.js":"8","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Audio.js":"9"},{"size":324,"mtime":1610687967149,"results":"10","hashOfConfig":"11"},{"size":1439,"mtime":1611177090634,"results":"12","hashOfConfig":"11"},{"size":207,"mtime":1611177150255,"results":"13","hashOfConfig":"11"},{"size":429,"mtime":1611174001887,"results":"14","hashOfConfig":"11"},{"size":4150,"mtime":1611187489299,"results":"15","hashOfConfig":"11"},{"size":749,"mtime":1611174001896,"results":"16","hashOfConfig":"11"},{"size":2420,"mtime":1611177539968,"results":"17","hashOfConfig":"11"},{"size":4887,"mtime":1611174001888,"results":"18","hashOfConfig":"11"},{"size":185,"mtime":1611178390000,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"mpxc4k",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\index.js",[],["43","44"],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\App.js",["45"],"import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Navigation from './Components/Navbars/Navigation';\r\nimport About from './Components/About';\r\nimport TemplatesPage from './Components/TemplatesPage';\r\nimport Home from './Components/Home';\r\nimport Login from './Components/Signin/Login';\r\n\r\nconst App = () => {\r\n  const [route, setRoute] = useState('signout');\r\n  const [isSignedIn, setIsSignedIn] = useState(false);\r\n  const [displayPage, setDisplayPage] = useState(Home);\r\n\r\n  if (isSignedIn === 'signout') {\r\n    setIsSignedIn(false)\r\n  } else if (isSignedIn === 'signin') {\r\n    setIsSignedIn(true)\r\n  }\r\n\r\n  const onRouteChange = (route) => {\r\n\r\n    if (route === 'signout') {\r\n      setRoute({ isSignedIn: false })\r\n\r\n    } else if (route === 'signin') {\r\n      setRoute({ isSignedIn: true })\r\n    } else if (route === 'Home') {\r\n      setDisplayPage(<Home onRouteChange={onRouteChange} />)\r\n    } else if (route === 'About') {\r\n      setDisplayPage(<About onRouteChange={onRouteChange} />)\r\n    } else if (route === \"TemplatesPage\") {\r\n      setDisplayPage(<TemplatesPage />)\r\n    } else if (route === 'Login') {\r\n      setDisplayPage(<Login onRouteChange={onRouteChange} />)\r\n    }\r\n    setRoute({ route: route })\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <Navigation isSignedIn={setIsSignedIn} onRouteChange={onRouteChange} />\r\n     {displayPage}\r\n      {/* <Footer /> */}\r\n    </>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\TemplatesPage.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\About.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Home.js",["46","47","48","49","50","51","52","53","54"],"import React from 'react';\r\nimport { Container, Row, Col, Nav, Navbar, Button, ButtonGroup, Tab, Tabs } from 'react-bootstrap';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport About from './About';\r\nimport Audio from './Audio';\r\nimport Displayer from './Displayer';\r\nimport Login from './Signin/Login';\r\n\r\nconst Home = () => {\r\n    return (\r\n\r\n\r\n        <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\r\n            <Row>\r\n                <Col sm={3}>\r\n                    <Nav variant=\"pills\" className=\"flex-column\">\r\n                        <Nav.Item>\r\n                            <Nav.Link eventKey=\"first\">AUDIO</Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link eventKey=\"second\">BACKGROUND</Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link eventKey=\"third\">ICON</Nav.Link>\r\n                        </Nav.Item>\r\n\r\n\r\n                    </Nav>\r\n                </Col>\r\n                <Col sm={9}>\r\n                    <Tab.Content>\r\n                        <Tab.Pane eventKey=\"first\">\r\n                            <Audio />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"second\">\r\n                            <About />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"third\">\r\n                            <Login />\r\n                        </Tab.Pane>\r\n\r\n                    </Tab.Content>\r\n                </Col>\r\n            </Row>\r\n        </Tab.Container>\r\n\r\n\r\n        // <Container fluid>\r\n        //     <Row >\r\n        //         <Col >\r\n\r\n        //             <Router>\r\n        //                 <Navbar variant=\"light\" bg=\"transparent\">\r\n        //                     <Nav fill className=\"flex-column\">\r\n        //                         <h1 style={{ textAlign: 'center' }}>Edit</h1>\r\n        //                         <Nav.Item>\r\n        //                             <Nav.Link href=\"/Audio\">Audio</Nav.Link>\r\n        //                         </Nav.Item>\r\n        //                         <Nav.Item>\r\n        //                             <Nav.Link eventKey=\"link-1\">Background</Nav.Link>\r\n        //                         </Nav.Item>\r\n        //                         <Nav.Item>\r\n        //                             <Nav.Link eventKey=\"Icon\">Icon</Nav.Link>\r\n        //                         </Nav.Item>\r\n        //                         <Nav.Item>\r\n        //                             <Nav.Link eventKey=\"text\">Text</Nav.Link>\r\n        //                         </Nav.Item>\r\n        //                         <Nav.Item>\r\n        //                             <Nav.Link>\r\n        //                                 <ButtonGroup aria-label=\"Basic example\">\r\n        //                                     <Button variant=\"secondary\">Export</Button>\r\n        //                                     <Button variant=\"secondary\">Save</Button>\r\n        //                                 </ButtonGroup>\r\n        //                             </Nav.Link>\r\n        //                         </Nav.Item>\r\n        //                     </Nav>\r\n        //                 </Navbar>\r\n\r\n\r\n        //                 <Switch>\r\n        //                     <Route path=\"/Audio\" exact component={Audio} />\r\n\r\n        //                     {/* <Route path=\"/Background\">\r\n        //                     <Background />\r\n        //                 </Route>\r\n\r\n        //                 <Route path=\"/Icon\" exact component={Icon} />\r\n        //                 <Route path=\"/Text\" exact component={Text} />\r\n        //                 <Route path=\"/Export\" exact component={Export} />\r\n        //                 <Route path=\"/Save\" exact component={Save} /> */}\r\n\r\n\r\n        //                 </Switch>\r\n        //             </Router>\r\n\r\n        //         </Col>\r\n\r\n        //         <Col>\r\n\r\n        //             <Displayer />\r\n        //         </Col>\r\n\r\n        //     </Row>\r\n        // </Container>\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Home\r\n","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Signin\\Login.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Navbars\\Navigation.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Displayer.js",["55","56","57","58"],"import React, { createRef, useState, useEffect } from 'react'\r\nimport songFile from './audio/ImperialMarch60.wav'\r\nimport songFile2 from './audio/Rodriguez - Inner City Blues.mp3'\r\nimport songFile3 from './audio/Lucky Dube-Too-Many-People.wav.mp3'\r\n\r\n\r\nlet songs = [\r\n  {\r\n    name: 'ImperialMarch60',\r\n    songFile: songFile,\r\n    color: 'black',\r\n    fontColor: 'black',\r\n  },\r\n  {\r\n    name: 'Rodriguez - Inner City Blue',\r\n    songFile: songFile2,\r\n    color: 'red',\r\n    fontColor: 'black',\r\n  },\r\n  {\r\n    name: 'Lucky Dube-Too-Many-People',\r\n    songFile: songFile3,\r\n    color: 'pink',\r\n    fontColor: 'darkpurple',\r\n  },\r\n]\r\n\r\nlet rafId\r\nlet analyser\r\n// Changing Variables\r\nlet ctx, x_end, y_end, bar_height\r\n\r\n// constants\r\nconst width = window.innerWidth * (3 / 4) //\r\nconst height = window.innerHeight\r\nconst bars = 999 //  max 1030 - leave it in 555\r\nconst bar_width = 2 //  good in 1\r\nconst radius = 0 // innercircle\r\nconst center_x = width / 2 - window.innerWidth / 16\r\nconst center_y = height / 2\r\nlet audioSource = new Audio(songs[0].songFile)\r\n\r\nconst Displayer = () => {\r\n  const [audio, setAudio] = useState(audioSource)\r\n  const [songList, setSongList] = useState(songs)\r\n  const [canvas, setCanvas] = useState(createRef())\r\n  //\r\n  const [audioContext, setAudioContext] = useState()\r\n  const [isPaused, setIsPaused] = useState(true)\r\n  //\r\n  const [currentSong, setCurrentSong] = useState(0)\r\n  const [frequency_array, setFrequencyArray] = useState()\r\n  const [songName, setSongName] = useState(songs[0].name)\r\n  const [textColor, setTextColor] = useState(songs[0].textColor)\r\n\r\n  function animationLooper(canvas) {\r\n    canvas.width = width\r\n    canvas.height = height\r\n\r\n    ctx = canvas.getContext('2d')\r\n\r\n    for (var i = 0; i < bars; i++) {\r\n      //divide a circle into equal part\r\n      const rads = (Math.PI * 2) / bars\r\n\r\n      // Math is magical - you can make lots of visualizer\r\n      bar_height = frequency_array[i] * 1.5\r\n\r\n      const x = center_x + Math.cos(rads * i) * radius\r\n      const y = center_y + Math.sin(rads * i) * radius\r\n      x_end = center_x + Math.cos(rads * i) * (radius + bar_height)\r\n      y_end = center_y + Math.sin(rads * i) * (radius + bar_height)\r\n\r\n      //draw a bar\r\n      drawBar(x, y, x_end, y_end, frequency_array[i], ctx, canvas)\r\n    }\r\n  }\r\n\r\n  function drawBar(x1 = 0, y1 = 0, x2 = 0, y2 = 0, frequency, ctx, canvas) {\r\n    const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height)\r\n    // gradient.addColorStop(0, \"rgba(35, 7, 77, 1)\");\r\n    // gradient.addColorStop(1, \"rgba(204, 83, 51, 1)\");\r\n    gradient.addColorStop(0, 'rgba(30, 17, 18, 11)')\r\n    gradient.addColorStop(1, 'rgba(254, 283, 151, 121)')\r\n    ctx.fillStyle = gradient\r\n\r\n    const lineColor = 'rgb(' + frequency + ', ' + frequency + ', ' + 205 + ')'\r\n    ctx.strokeStyle = lineColor\r\n    ctx.lineWidth = bar_width\r\n    ctx.beginPath()\r\n    ctx.moveTo(x1, y1)\r\n    ctx.lineTo(x2, y2)\r\n    ctx.stroke()\r\n  }\r\n\r\n  useEffect(() => {\r\n    let context = new (window.AudioContext || window.webkitAudioContext)()\r\n    let source = context.createMediaElementSource(audio)\r\n\r\n    analyser = context.createAnalyser()\r\n    source.connect(analyser)\r\n    analyser.connect(context.destination)\r\n    let frequencyArray = new Uint8Array(analyser.frequencyBinCount)\r\n    setFrequencyArray(frequencyArray)\r\n    //\r\n    setAudioContext(context)\r\n    //\r\n  }, [audio])\r\n\r\n  const togglePlay = () => {\r\n    // const { audio } = this;\r\n    if (audio.paused) {\r\n      audioContext.resume()\r\n      audio.play()\r\n      setIsPaused(false)\r\n      rafId = requestAnimationFrame(tick)\r\n    } else {\r\n      audio.pause()\r\n      setIsPaused(true)\r\n      cancelAnimationFrame(rafId)\r\n    }\r\n  }\r\n\r\n  const changeSong = (songNumber) => {\r\n    console.log('No8', songNumber)\r\n    let { name, songFile, color, fontColor } = songList[songNumber]\r\n    audio.src = songFile\r\n    if (!isPaused) {\r\n      audio.play()\r\n    }\r\n    setCurrentSong(songNumber)\r\n    setSongName(name)\r\n    // setBackgroundColor(color)\r\n    setTextColor(fontColor)\r\n  }\r\n\r\n  const tick = () => {\r\n    animationLooper(canvas.current)\r\n    analyser.getByteTimeDomainData(frequency_array)\r\n    rafId = requestAnimationFrame(tick)\r\n  }\r\n\r\n  return (\r\n    <div className=\"audioControl\">\r\n      <button\r\n        onClick={togglePlay}\r\n        style={\r\n          isPaused\r\n            ? { backgroundColor: 'yellow' }\r\n            : { backgroundColor: 'green' }\r\n        }\r\n      >\r\n        {isPaused ? 'Paused' : 'PLAYING !!!'}\r\n      </button>\r\n\r\n      <button\r\n        onClick={() => {\r\n          changeSong((currentSong + 1) % 3)\r\n        }}\r\n      >\r\n        Change Song my Friend\r\n      </button>\r\n      <canvas ref={canvas} />\r\n      {/* <div className=\"songName\"> */}\r\n        <h3 style={{ color: textColor }}>{songName}</h3>\r\n      {/* </div> */}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Displayer\r\n",["59","60"],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Audio.js",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":10,"column":10,"nodeType":"67","messageId":"68","endLine":10,"endColumn":15},{"ruleId":"65","severity":1,"message":"69","line":2,"column":10,"nodeType":"67","messageId":"68","endLine":2,"endColumn":19},{"ruleId":"65","severity":1,"message":"70","line":2,"column":36,"nodeType":"67","messageId":"68","endLine":2,"endColumn":42},{"ruleId":"65","severity":1,"message":"71","line":2,"column":44,"nodeType":"67","messageId":"68","endLine":2,"endColumn":50},{"ruleId":"65","severity":1,"message":"72","line":2,"column":52,"nodeType":"67","messageId":"68","endLine":2,"endColumn":63},{"ruleId":"65","severity":1,"message":"73","line":2,"column":70,"nodeType":"67","messageId":"68","endLine":2,"endColumn":74},{"ruleId":"65","severity":1,"message":"74","line":3,"column":27,"nodeType":"67","messageId":"68","endLine":3,"endColumn":33},{"ruleId":"65","severity":1,"message":"75","line":3,"column":35,"nodeType":"67","messageId":"68","endLine":3,"endColumn":40},{"ruleId":"65","severity":1,"message":"76","line":3,"column":42,"nodeType":"67","messageId":"68","endLine":3,"endColumn":48},{"ruleId":"65","severity":1,"message":"77","line":6,"column":8,"nodeType":"67","messageId":"68","endLine":6,"endColumn":17},{"ruleId":"65","severity":1,"message":"78","line":44,"column":17,"nodeType":"67","messageId":"68","endLine":44,"endColumn":25},{"ruleId":"65","severity":1,"message":"79","line":45,"column":20,"nodeType":"67","messageId":"68","endLine":45,"endColumn":31},{"ruleId":"65","severity":1,"message":"80","line":46,"column":18,"nodeType":"67","messageId":"68","endLine":46,"endColumn":27},{"ruleId":"65","severity":1,"message":"81","line":126,"column":27,"nodeType":"67","messageId":"68","endLine":126,"endColumn":32},{"ruleId":"61","replacedBy":"82"},{"ruleId":"63","replacedBy":"83"},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-unused-vars","'route' is assigned a value but never used.","Identifier","unusedVar","'Container' is defined but never used.","'Navbar' is defined but never used.","'Button' is defined but never used.","'ButtonGroup' is defined but never used.","'Tabs' is defined but never used.","'Router' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'Displayer' is defined but never used.","'setAudio' is assigned a value but never used.","'setSongList' is assigned a value but never used.","'setCanvas' is assigned a value but never used.","'color' is assigned a value but never used.",["84"],["85"],"no-global-assign","no-unsafe-negation"]