[{"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\index.js":"1","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\App.js":"2","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\Home.js":"3","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\TemplatesPage.js":"4","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\About.js":"5","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\Signin\\Login.js":"6","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\Navbars\\Navigation.js":"7","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\Displayer.js":"8"},{"size":324,"mtime":1611710560978,"results":"9","hashOfConfig":"10"},{"size":1439,"mtime":1611710560973,"results":"11","hashOfConfig":"10"},{"size":1821,"mtime":1611710560974,"results":"12","hashOfConfig":"10"},{"size":207,"mtime":1611710436492,"results":"13","hashOfConfig":"10"},{"size":429,"mtime":1611710436414,"results":"14","hashOfConfig":"10"},{"size":749,"mtime":1611710560976,"results":"15","hashOfConfig":"10"},{"size":2425,"mtime":1611710560975,"results":"16","hashOfConfig":"10"},{"size":4887,"mtime":1611710560974,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"368z0z",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\index.js",[],["37","38"],"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\App.js",["39"],"import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Navigation from './Components/Navbars/Navigation';\r\nimport About from './Components/About';\r\nimport TemplatesPage from './Components/TemplatesPage';\r\nimport Home from './Components/Home';\r\nimport Login from './Components/Signin/Login';\r\n\r\nconst App = () => {\r\n  const [route, setRoute] = useState('signout');\r\n  const [isSignedIn, setIsSignedIn] = useState(false);\r\n  const [displayPage, setDisplayPage] = useState(Home);\r\n\r\n  if (isSignedIn === 'signout') {\r\n    setIsSignedIn(false)\r\n  } else if (isSignedIn === 'signin') {\r\n    setIsSignedIn(true)\r\n  }\r\n\r\n  const onRouteChange = (route) => {\r\n\r\n    if (route === 'signout') {\r\n      setRoute({ isSignedIn: false })\r\n\r\n    } else if (route === 'signin') {\r\n      setRoute({ isSignedIn: true })\r\n    } else if (route === 'Home') {\r\n      setDisplayPage(<Home onRouteChange={onRouteChange} />)\r\n    } else if (route === 'About') {\r\n      setDisplayPage(<About onRouteChange={onRouteChange} />)\r\n    } else if (route === \"TemplatesPage\") {\r\n      setDisplayPage(<TemplatesPage />)\r\n    } else if (route === 'Login') {\r\n      setDisplayPage(<Login onRouteChange={onRouteChange} />)\r\n    }\r\n    setRoute({ route: route })\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <Navigation isSignedIn={setIsSignedIn} onRouteChange={onRouteChange} />\r\n     {displayPage}\r\n      {/* <Footer /> */}\r\n    </>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\Home.js",[],"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\TemplatesPage.js",[],"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\About.js",[],"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\Signin\\Login.js",[],"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\Navbars\\Navigation.js",[],"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\Displayer.js",["40","41","42","43"],"import React, { createRef, useState, useEffect } from 'react'\r\nimport songFile from './audio/ImperialMarch60.wav'\r\nimport songFile2 from './audio/Rodriguez - Inner City Blues.mp3'\r\nimport songFile3 from './audio/Lucky Dube-Too-Many-People.wav.mp3'\r\n\r\n\r\nlet songs = [\r\n  {\r\n    name: 'ImperialMarch60',\r\n    songFile: songFile,\r\n    color: 'black',\r\n    fontColor: 'black',\r\n  },\r\n  {\r\n    name: 'Rodriguez - Inner City Blue',\r\n    songFile: songFile2,\r\n    color: 'red',\r\n    fontColor: 'black',\r\n  },\r\n  {\r\n    name: 'Lucky Dube-Too-Many-People',\r\n    songFile: songFile3,\r\n    color: 'pink',\r\n    fontColor: 'darkpurple',\r\n  },\r\n]\r\n\r\nlet rafId\r\nlet analyser\r\n// Changing Variables\r\nlet ctx, x_end, y_end, bar_height\r\n\r\n// constants\r\nconst width = window.innerWidth * (3 / 4) //\r\nconst height = window.innerHeight\r\nconst bars = 999 //  max 1030 - leave it in 555\r\nconst bar_width = 2 //  good in 1\r\nconst radius = 0 // innercircle\r\nconst center_x = width / 2 - window.innerWidth / 16\r\nconst center_y = height / 2\r\nlet audioSource = new Audio(songs[0].songFile)\r\n\r\nconst Displayer = () => {\r\n  const [audio, setAudio] = useState(audioSource)\r\n  const [songList, setSongList] = useState(songs)\r\n  const [canvas, setCanvas] = useState(createRef())\r\n  //\r\n  const [audioContext, setAudioContext] = useState()\r\n  const [isPaused, setIsPaused] = useState(true)\r\n  //\r\n  const [currentSong, setCurrentSong] = useState(0)\r\n  const [frequency_array, setFrequencyArray] = useState()\r\n  const [songName, setSongName] = useState(songs[0].name)\r\n  const [textColor, setTextColor] = useState(songs[0].textColor)\r\n\r\n  function animationLooper(canvas) {\r\n    canvas.width = width\r\n    canvas.height = height\r\n\r\n    ctx = canvas.getContext('2d')\r\n\r\n    for (var i = 0; i < bars; i++) {\r\n      //divide a circle into equal part\r\n      const rads = (Math.PI * 2) / bars\r\n\r\n      // Math is magical - you can make lots of visualizer\r\n      bar_height = frequency_array[i] * 1.5\r\n\r\n      const x = center_x + Math.cos(rads * i) * radius\r\n      const y = center_y + Math.sin(rads * i) * radius\r\n      x_end = center_x + Math.cos(rads * i) * (radius + bar_height)\r\n      y_end = center_y + Math.sin(rads * i) * (radius + bar_height)\r\n\r\n      //draw a bar\r\n      drawBar(x, y, x_end, y_end, frequency_array[i], ctx, canvas)\r\n    }\r\n  }\r\n\r\n  function drawBar(x1 = 0, y1 = 0, x2 = 0, y2 = 0, frequency, ctx, canvas) {\r\n    const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height)\r\n    // gradient.addColorStop(0, \"rgba(35, 7, 77, 1)\");\r\n    // gradient.addColorStop(1, \"rgba(204, 83, 51, 1)\");\r\n    gradient.addColorStop(0, 'rgba(30, 17, 18, 11)')\r\n    gradient.addColorStop(1, 'rgba(254, 283, 151, 121)')\r\n    ctx.fillStyle = gradient\r\n\r\n    const lineColor = 'rgb(' + frequency + ', ' + frequency + ', ' + 205 + ')'\r\n    ctx.strokeStyle = lineColor\r\n    ctx.lineWidth = bar_width\r\n    ctx.beginPath()\r\n    ctx.moveTo(x1, y1)\r\n    ctx.lineTo(x2, y2)\r\n    ctx.stroke()\r\n  }\r\n\r\n  useEffect(() => {\r\n    let context = new (window.AudioContext || window.webkitAudioContext)()\r\n    let source = context.createMediaElementSource(audio)\r\n\r\n    analyser = context.createAnalyser()\r\n    source.connect(analyser)\r\n    analyser.connect(context.destination)\r\n    let frequencyArray = new Uint8Array(analyser.frequencyBinCount)\r\n    setFrequencyArray(frequencyArray)\r\n    //\r\n    setAudioContext(context)\r\n    //\r\n  }, [audio])\r\n\r\n  const togglePlay = () => {\r\n    // const { audio } = this;\r\n    if (audio.paused) {\r\n      audioContext.resume()\r\n      audio.play()\r\n      setIsPaused(false)\r\n      rafId = requestAnimationFrame(tick)\r\n    } else {\r\n      audio.pause()\r\n      setIsPaused(true)\r\n      cancelAnimationFrame(rafId)\r\n    }\r\n  }\r\n\r\n  const changeSong = (songNumber) => {\r\n    console.log('No8', songNumber)\r\n    let { name, songFile, color, fontColor } = songList[songNumber]\r\n    audio.src = songFile\r\n    if (!isPaused) {\r\n      audio.play()\r\n    }\r\n    setCurrentSong(songNumber)\r\n    setSongName(name)\r\n    // setBackgroundColor(color)\r\n    setTextColor(fontColor)\r\n  }\r\n\r\n  const tick = () => {\r\n    animationLooper(canvas.current)\r\n    analyser.getByteTimeDomainData(frequency_array)\r\n    rafId = requestAnimationFrame(tick)\r\n  }\r\n\r\n  return (\r\n    <div className=\"audioControl\">\r\n      <button\r\n        onClick={togglePlay}\r\n        style={\r\n          isPaused\r\n            ? { backgroundColor: 'yellow' }\r\n            : { backgroundColor: 'green' }\r\n        }\r\n      >\r\n        {isPaused ? 'Paused' : 'PLAYING !!!'}\r\n      </button>\r\n\r\n      <button\r\n        onClick={() => {\r\n          changeSong((currentSong + 1) % 3)\r\n        }}\r\n      >\r\n        Change Song my Friend\r\n      </button>\r\n      <canvas ref={canvas} />\r\n      {/* <div className=\"songName\"> */}\r\n        <h3 style={{ color: textColor }}>{songName}</h3>\r\n      {/* </div> */}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Displayer\r\n",{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":10,"column":10,"nodeType":"50","messageId":"51","endLine":10,"endColumn":15},{"ruleId":"48","severity":1,"message":"52","line":44,"column":17,"nodeType":"50","messageId":"51","endLine":44,"endColumn":25},{"ruleId":"48","severity":1,"message":"53","line":45,"column":20,"nodeType":"50","messageId":"51","endLine":45,"endColumn":31},{"ruleId":"48","severity":1,"message":"54","line":46,"column":18,"nodeType":"50","messageId":"51","endLine":46,"endColumn":27},{"ruleId":"48","severity":1,"message":"55","line":126,"column":27,"nodeType":"50","messageId":"51","endLine":126,"endColumn":32},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"no-unused-vars","'route' is assigned a value but never used.","Identifier","unusedVar","'setAudio' is assigned a value but never used.","'setSongList' is assigned a value but never used.","'setCanvas' is assigned a value but never used.","'color' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]