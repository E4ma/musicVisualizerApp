[{"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\index.js":"1","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\App.js":"2","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\About.js":"3","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Signup.js":"4","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Login.js":"5","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\MyAccount.js":"6","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\ForgotPassword.js":"7","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\PrivateRoute.js":"8","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\UpdateProfile.js":"9","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\contexts\\AuthContext.js":"10","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Home.js":"11","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\LandingNav.js":"12","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Navigation.js":"13","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\SigninNav.js":"14","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\firebase.js":"15","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\contexts\\PlaylistContext.js":"16","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\InsertIcon.js":"17","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\IconUpload.js":"18","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Displayer.js":"19","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\FileUpload.js":"20","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\Playlist.js":"21","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Buttons\\AudioControls.js":"22"},{"size":415,"mtime":1613850116539,"results":"23","hashOfConfig":"24"},{"size":2968,"mtime":1614114858271,"results":"25","hashOfConfig":"24"},{"size":1129,"mtime":1614114858269,"results":"26","hashOfConfig":"24"},{"size":2399,"mtime":1614114858281,"results":"27","hashOfConfig":"24"},{"size":2030,"mtime":1614114858275,"results":"28","hashOfConfig":"24"},{"size":2094,"mtime":1614114858278,"results":"29","hashOfConfig":"24"},{"size":1708,"mtime":1613850116324,"results":"30","hashOfConfig":"24"},{"size":611,"mtime":1614114858280,"results":"31","hashOfConfig":"24"},{"size":2873,"mtime":1614114858282,"results":"32","hashOfConfig":"24"},{"size":1535,"mtime":1613850116536,"results":"33","hashOfConfig":"24"},{"size":6939,"mtime":1614129767800,"results":"34","hashOfConfig":"24"},{"size":1017,"mtime":1614114858274,"results":"35","hashOfConfig":"24"},{"size":1617,"mtime":1614114858279,"results":"36","hashOfConfig":"24"},{"size":1014,"mtime":1614114858280,"results":"37","hashOfConfig":"24"},{"size":592,"mtime":1613850116538,"results":"38","hashOfConfig":"24"},{"size":3288,"mtime":1614027851123,"results":"39","hashOfConfig":"24"},{"size":333,"mtime":1614114858277,"results":"40","hashOfConfig":"24"},{"size":5634,"mtime":1614121011509,"results":"41","hashOfConfig":"24"},{"size":9096,"mtime":1614122825329,"results":"42","hashOfConfig":"24"},{"size":8618,"mtime":1614129978878,"results":"43","hashOfConfig":"24"},{"size":1207,"mtime":1614114858278,"results":"44","hashOfConfig":"24"},{"size":1086,"mtime":1614122825323,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"mpxc4k",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\index.js",[],["95","96"],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\App.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\About.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Signup.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Login.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\MyAccount.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\ForgotPassword.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\PrivateRoute.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\UpdateProfile.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\contexts\\AuthContext.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Home.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\LandingNav.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Navigation.js",["97"],"import React, { useState } from 'react'\r\nimport { useAuth } from \"../contexts/AuthContext\"\r\nimport { Link, useHistory } from \"react-router-dom\"\r\nimport { Navbar, Nav, Container } from 'react-bootstrap'\r\n\r\nimport pic from './Images/logogrey-bird.png'\r\n// import pic from './Logo1sn.png'\r\n\r\n\r\nconst Navigation = () => {\r\n\r\n  const [error, setError] = useState(\"\")\r\n  const { logout } = useAuth()\r\n  const history = useHistory()\r\n\r\n  async function handleLogout() {\r\n    setError(\"\")\r\n\r\n    try {\r\n      await logout()\r\n      history.push(\"/login\")\r\n    } catch {\r\n      setError(\"Failed to log out\")\r\n    }\r\n  }\r\n\r\n  //Navbar\r\n\r\n  return (\r\n\r\n\r\n    <Navbar className=\"landingNav\" variant=\"dark\" expand=\"sm\">\r\n      <Container className=\"navContainer\">\r\n      <Navbar.Brand href=\"/About\">\r\n          {/* <img src={pic} alt={''} width={80} height={80} /> */}\r\n          <img \r\n          src={pic} \r\n          alt={''} \r\n          height={'40'} \r\n          width={'45'} \r\n          className=\"d-inline-block\"/>{' '}HUMMINGBIRD\r\n        </Navbar.Brand>\r\n\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse className=\"justify-content-end\" id=\"basic-navbar-nav\">\r\n          <Nav fill >\r\n\r\n            <Nav.Item ><Link className=\"mainNav\" to=\"/Home\" >Editor</Link></Nav.Item>\r\n            <Nav.Item ><Link className=\"mainNav\" to=\"/MyAccount\" >Profile</Link></Nav.Item>\r\n            <Nav.Item onClick={handleLogout}><Link className=\"navBtn\" >Sign Out</Link></Nav.Item>\r\n\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Container>\r\n    </Navbar>\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default Navigation","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\SigninNav.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\firebase.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\contexts\\PlaylistContext.js",["98","99"],"import React, { createContext, useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\n\r\nexport const PlaylistContext = createContext()\r\n\r\nconst PlaylistContextProvider = (props) => {\r\n  const [songList, setSongList] = useState([])\r\n  const [currentSongIndex, setCurrentSongIndex] = useState(-1)\r\n  const [audio, setAudio] = useState()\r\n  const [audioContext, setAudioContext] = useState()\r\n  const [source, setSource] = useState()\r\n  const [analyser, setAnalyser] = useState()\r\n  const [frequency_array, setFrequency_array] = useState()\r\n\r\n  // createAudioContextSingleton runs the file only once not again and again\r\n  const createAudioContextSingleton = () => {\r\n    if (!audio) {\r\n      let a = new Audio()\r\n      console.log('CreateAudioContextSingleton: a =', a)\r\n      let ac = new (window.AudioContext || window.webkitAudioContext)()\r\n      let s = ac.createMediaElementSource(a)\r\n      let analy = ac.createAnalyser()\r\n      s.connect(analy)\r\n      analy.connect(ac.destination)\r\n      let freqArr = new Uint8Array(analy.frequencyBinCount)\r\n\r\n      setAudio(a)\r\n      setAnalyser(analy)\r\n      setSource(s)\r\n      setAudioContext(ac)\r\n      setFrequency_array(freqArr)\r\n    }\r\n  }\r\n\r\n  const getSong = (song) => {\r\n    if (!audio) {\r\n      createAudioContextSingleton()\r\n      console.log('this is createAudioSingleton', audio)\r\n    }\r\n    console.log('this is song =', song)\r\n\r\n    console.log('PlaylistContext: songList[currentSongIndex]', currentSongIndex)\r\n  }\r\n\r\n  const loadSongIntoAudio = async () => {\r\n    if (!songList[currentSongIndex] || !audio) {\r\n      console.log('nothing here')\r\n      return\r\n    }\r\n\r\n    try {\r\n      const response = await axios.request({\r\n        url: `http://localhost:5000/upload/media/${songList[currentSongIndex]}`,\r\n        responseType: 'blob',\r\n        method: 'GET',\r\n      })\r\n      let MIN_URL_LENGTH = 22\r\n\r\n      if (!response.data || response.data.length <= MIN_URL_LENGTH) {\r\n        throw new Error(\r\n          `Error with respond.data located in /upload/media:`,\r\n          response.data,\r\n        )\r\n      }\r\n      // console.log('PlaylistContext: Audio in getSong= ', audio)\r\n\r\n      audio.src = URL.createObjectURL(response.data)\r\n      console.log('PlaylistContext: audio.src', audio.src)\r\n      audio.load()\r\n    } catch (ex) {\r\n      console.error(`PlaylistContext: exception in getSong(): `, ex.message)\r\n    }\r\n    // audio.play()\r\n  }\r\n\r\n  const getSongList = async () => {\r\n    let res = await axios.get('http://localhost:5000/upload/list')\r\n    const data = res.data\r\n    console.log('This is data', data)\r\n\r\n    setSongList(data)\r\n  }\r\n  // console.log(uploadedFile)\r\n  //Returns a list of files saved\r\n  useEffect(() => {\r\n    getSongList()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    loadSongIntoAudio()\r\n  }, [currentSongIndex, audio])\r\n\r\n  return (\r\n    <PlaylistContext.Provider\r\n      value={{\r\n        createAudioContextSingleton,\r\n        currentSongIndex,\r\n        setCurrentSongIndex,\r\n        songList,\r\n        setSongList,\r\n        getSong,\r\n        getSongList,\r\n        loadSongIntoAudio,\r\n        audio,\r\n        frequency_array,\r\n        audioContext,\r\n        analyser,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </PlaylistContext.Provider>\r\n  )\r\n}\r\n\r\nexport default PlaylistContextProvider\r\n","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\InsertIcon.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\IconUpload.js",["100"],"import React, { useState, useEffect, useCallback } from 'react'\r\nimport axios from 'axios'\r\nimport { Card, ListGroup } from 'react-bootstrap'\r\n\r\nconst IconUpload = (props) => {\r\n  const [file, setFile] = useState('')\r\n  const [filename, setFilename] = useState('Choose File')\r\n  const [uploadedFile, setUploadedFile] = useState({})\r\n  const [imagelist, setImagelist] = useState([])\r\n\r\n\r\n\r\n  const onChange = (e) => {\r\n    //HTML file uploads come as an array so we want the index of the first file\r\n    setFile(e.target.files[0])\r\n    setFilename(e.target.files[0].name)\r\n  }\r\n\r\n  const onSubmit = async (e) => {\r\n    // e.preventDefault() used to prevent submitting by accident by preventing normal submitting\r\n    e.preventDefault()\r\n\r\n    const formData = new FormData()\r\n    formData.append('file', file)\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        'http://localhost:5000/iconUpload/icon',\r\n        formData,\r\n        {\r\n          headers: { 'Content-Type': 'multipart/form-data' },\r\n        },\r\n      )\r\n      const { fileName, filePath } = res.data\r\n      // console.log('These are the headers', res.headers)\r\n      if (res.status === 200) {\r\n        console.log('File was uploaded successfully ' + res.status)\r\n      }\r\n      setUploadedFile({ fileName, filePath })\r\n    } catch (err) {\r\n      if (err.response.status === 500) {\r\n        console.error('There is a problem with the server ' + err.message)\r\n      } else {\r\n        //This message is from the server if no file is uploaded\r\n        // console.error('we had an error??? ' + err.response.data.msg)\r\n        console.error(err.response.data.msg)\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  const getImagelist = useCallback(() => {\r\n    axios\r\n      .get('http://localhost:5000/iconUpload/iconList')\r\n      .then((res) => {\r\n        console.log('this is the res', res.data)\r\n        return res.data\r\n      })\r\n      .then((imagelist) => {\r\n        setImagelist(imagelist)\r\n      })\r\n  }, [setImagelist])\r\n  useEffect(() => {\r\n    getImagelist()\r\n  }, [uploadedFile, getImagelist])\r\n\r\n  // If the Icon button is selected\r\n\r\n  if (props.mediatype === 'Icon') {\r\n    return (\r\n      <Card style={{ height: '25rem' }}>\r\n        <Card.Body className=\"modalUpload\">\r\n          <Card.Title className=\"mb-2 text-muted\">\r\n            {props.mediatype} Upload\r\n          </Card.Title>\r\n          <Card.Subtitle className=\"mb-2 text-muted\">\r\n            Select {props.mediatype} (jpeg/jpg/bmp/png) to Upload\r\n          </Card.Subtitle>\r\n          <Card.Text>\r\n            <>\r\n              {/* <div className=\"mb-2\"> */}\r\n              <div>\r\n                <form onSubmit={onSubmit}>\r\n                  {/* <div className=\"input-group mb-3\"> */}\r\n                  <div>\r\n                    <input\r\n                      type=\"file\"\r\n                      // className=\"form-control mb-5\"\r\n                      className=\"modalUpload\"\r\n                      // id=\"inputGroupFile02\"\r\n                      accept={`${props.filetype}/jpg, ${props.filetype}/jpeg, ${props.filetype}/png, ${props.filetype}/bmp`}\r\n                      onChange={onChange}\r\n                    />\r\n                    <input\r\n                      type=\"submit\"\r\n                      value={`Submit`}\r\n                      // className=\"btn btn-primary btn-block\"\r\n                      className=\"btn2\"\r\n                      onClick={() => getImagelist()}\r\n                    />\r\n\r\n                    {/* <label\r\n                      className=\"id=inputGroupFile02\"\r\n                      htmlFor=\"inputGroupFile02\"\r\n                    ></label> */}\r\n                    <ListGroup\r\n                      action\r\n                      onClick={(event) => {\r\n                        props.getIcon(event.target.firstChild.data)\r\n                      }}\r\n                    >\r\n                      {imagelist?.map((picture, index) => {\r\n                        return (\r\n                          <ListGroup.Item action key={index} value={picture}>\r\n                            {picture}\r\n                          </ListGroup.Item>\r\n                        )\r\n                      })}\r\n                    </ListGroup>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </>\r\n          </Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n    )\r\n  }\r\n  return (\r\n    <Card style={{ width: '16rem', margin: '16px' }}>\r\n      <Card.Body>\r\n        <Card.Title>{props.mediatype} Upload</Card.Title>\r\n        <Card.Subtitle className=\"mb-2 text-muted\">\r\n          Select {props.mediatype} to Upload\r\n        </Card.Subtitle>\r\n        <Card.Text>\r\n          <>\r\n            <div className=\"mb-2\">\r\n              <form onSubmit={onSubmit}>\r\n                <div className=\"input-group mb-3\">\r\n                  <input\r\n                    type=\"file\"\r\n                    className=\"form-control mb-5\"\r\n                    id=\"inputGroupFile02\"\r\n                    accept={`${props.filetype}/gif, ${props.filetype}/png, ${props.filetype}/jpg`}\r\n                    onChange={onChange}\r\n                  />\r\n                  <input\r\n                    type=\"submit\"\r\n                    value={`Submit`}\r\n                    // className=\"btn btn-primary btn-block\"\r\n                    className=\"btn1\"\r\n                  />\r\n\r\n                  <label\r\n                    className=\"id=inputGroupFile02\"\r\n                    htmlFor=\"inputGroupFile02\"\r\n                  ></label>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </>\r\n        </Card.Text>\r\n      </Card.Body>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default IconUpload\r\n","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Displayer.js",["101","102"],"import React, {\r\n  createRef,\r\n  useState,\r\n  useEffect,\r\n  useLayoutEffect,\r\n  useContext,\r\n} from 'react'\r\nimport { PlaylistContext } from '../contexts/PlaylistContext'\r\nimport AudioControls from './Buttons/AudioControls'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport { Container } from 'react-bootstrap'\r\n\r\nconst UpdateWindowSize = () => {\r\n  const [size, setSize] = useState([1000, 1000])\r\n  useLayoutEffect(() => {\r\n    const updateSize = () => {\r\n      setSize([window.innerWidth, window.innerHeight])\r\n    }\r\n    window.addEventListener('resize', updateSize)\r\n    return () => window.removeEventListener('resize', updateSize)\r\n  }, [])\r\n  return size\r\n}\r\n\r\nlet rafId\r\n\r\nlet ctx, x_end, y_end, bar_height\r\n\r\nconst bars = 900 //  max 1030 - leave it in 555\r\nconst bar_width = 2 //  good in 1\r\nconst radius = 0 // innercircle\r\n\r\nconst Displayer = (props) => {\r\n  const {\r\n    currentSongIndex,\r\n    setCurrentSongIndex,\r\n    songList,\r\n    getSong,\r\n    audio,\r\n    frequency_array,\r\n    audioContext,\r\n    analyser,\r\n  } = useContext(PlaylistContext)\r\n  //This is the state that lets us know what the current song loaded is\r\n\r\n  const [width, height] = UpdateWindowSize()\r\n  const [canvas, setCanvas] = useState(createRef())\r\n  //State for whether the song is playing or not\r\n  const [isPaused, setIsPaused] = useState(true)\r\n\r\n  // const [currentSongIndex, setCurrentSongIndex] = useState(-1)\r\n  //Slider for changing peak lengths\r\n  const [sliderM, setSliderM] = useState(1)\r\n  const [sliderN, setSliderN] = useState(1)\r\n  const center_x = width / 2\r\n  const center_y = height / 2\r\n\r\n  function animationLooper(canvas) {\r\n    canvas.width = width\r\n    canvas.height = height\r\n    ctx = canvas.getContext('2d')\r\n    for (let i = 0; i < bars; i++) {\r\n      //divide a circle into equal part\r\n      const rads = (Math.PI * 2) / bars\r\n      // Math is magical - you can make lots of visualizer\r\n      // this 4.5 decides the canves size\r\n      bar_height = frequency_array[i] * 2.5\r\n      const x = center_x + Math.cos(rads * i) * radius\r\n      const y = center_y + Math.sin(rads * i) * radius\r\n      x_end =\r\n        center_x +\r\n        Math.cos(rads * sliderN * i + (Math.PI / 640) * new Date()) *\r\n          (radius + bar_height)\r\n      y_end =\r\n        center_y +\r\n        Math.sin(rads * sliderM * i + (Math.PI / 640) * new Date()) *\r\n          (radius + bar_height)\r\n      //draw a bar\r\n      // const x = bar_width / 2 + (i * window.innerWidth) / bars;\r\n      // const y = 900;\r\n      // const y_end = 800 - bar_height;\r\n      // const x_end = x;\r\n      drawBar(x, y, x_end, y_end, i, ctx, canvas)\r\n    }\r\n  }\r\n\r\n  function drawBar(x1 = 0, y1 = 0, x2 = 0, y2 = 0, i, ctx) {\r\n    i = (i + new Date().getTime() * 2) % 600 //  2 is an OK number,  600/6 =100 integer is good\r\n    const gradient = ctx.createLinearGradient(x1, y1, x2, y2)\r\n    gradient.addColorStop(0, 'rgba(0, 255, 0, 255)')\r\n    gradient.addColorStop(1, 'rgba(254, 0, 0, 255)')\r\n    ctx.fillStyle = 'pink'\r\n    let lineColor\r\n    if (i < 150) {\r\n      // lineColor = \"red\"\r\n      lineColor =\r\n        'rgb(' +\r\n        Math.abs(275 - i) +\r\n        ', ' +\r\n        Math.abs(175 - i / 2) +\r\n        ', ' +\r\n        1000 +\r\n        ')'\r\n    } else if (i < 300) {\r\n      // lineColor=\"blue\"\r\n      lineColor =\r\n        'rgb(' +\r\n        1000 +\r\n        ', ' +\r\n        Math.abs(275 - i) +\r\n        ', ' +\r\n        Math.abs(175 - i / 2) +\r\n        ')'\r\n    } else if (i < 450) {\r\n      // lineColor=\"green\"\r\n      lineColor =\r\n        'rgb(' +\r\n        Math.abs(175 - i / 2) +\r\n        ', ' +\r\n        1000 +\r\n        ', ' +\r\n        Math.abs(275 - i) +\r\n        ')'\r\n    } else if (i < 600) {\r\n      // lineColor = \"red\"\r\n      lineColor =\r\n        'rgb(' +\r\n        Math.abs(175 - i / 2) +\r\n        ', ' +\r\n        1000 +\r\n        ', ' +\r\n        Math.abs(275 - i) +\r\n        ')'\r\n    } else if (i < 750) {\r\n      // lineColor=\"blue\"\r\n      lineColor =\r\n        'rgb(' +\r\n        1000 +\r\n        ', ' +\r\n        Math.abs(275 - i) +\r\n        ', ' +\r\n        Math.abs(175 - i / 2) +\r\n        ')'\r\n    } else if (i < 900) {\r\n      // lineColor=\"green\"\r\n      lineColor =\r\n        'rgb(' +\r\n        Math.abs(275 - i) +\r\n        ', ' +\r\n        Math.abs(175 - i / 2) +\r\n        ', ' +\r\n        1000 +\r\n        ')'\r\n    }\r\n\r\n    ctx.strokeStyle = lineColor\r\n    ctx.lineWidth = bar_width\r\n    ctx.beginPath()\r\n    ctx.moveTo(x1, y1)\r\n    ctx.lineTo(x2, y2)\r\n    ctx.stroke()\r\n  }\r\n\r\n  //Sets the function to toggle if a song is playing or not\r\n  const togglePlay = () => {\r\n    // Plays audio when called\r\n    // console.log('Audio clicked in Displayer', audio)\r\n    if (audio.paused) {\r\n      audioContext.resume()\r\n      audio.play()\r\n      setIsPaused(false)\r\n      rafId = requestAnimationFrame(tick)\r\n    } else {\r\n      //pauses audio\r\n      audio.pause()\r\n      setIsPaused(true)\r\n      cancelAnimationFrame(rafId)\r\n    }\r\n  }\r\n  const playTrack = () => {\r\n    if (audio) {\r\n      togglePlay()\r\n    }\r\n  }\r\n  const prevTrack = () => {\r\n    if (audio && !isPaused) {\r\n      togglePlay()\r\n    }\r\n    setCurrentSongIndex((curr) => {\r\n      let newSongNum\r\n      if (currentSongIndex === 0) {\r\n        newSongNum = songList.length - 1\r\n      } else {\r\n        newSongNum = (curr - 1) % songList.length\r\n      }\r\n      getSong(songList[newSongNum])\r\n      return newSongNum\r\n    })\r\n    console.log('This is the currentsongindex click prev', currentSongIndex)\r\n  }\r\n\r\n  console.log('This is the current song index', currentSongIndex)\r\n  const nextTrack = () => {\r\n    if (audio && !isPaused) {\r\n      togglePlay()\r\n    }\r\n    setCurrentSongIndex((curr) => {\r\n      console.log('This is curr', curr)\r\n      let newSongNum\r\n      if (curr === 0) {\r\n        newSongNum = curr + 1\r\n      } else {\r\n        newSongNum = (curr + 1) % songList.length\r\n      }\r\n      getSong(songList[newSongNum])\r\n      return newSongNum\r\n    })\r\n    // getSong(songList[(currentSongIndex + 1) % songList.length])\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (rafId) {\r\n      cancelAnimationFrame(rafId)\r\n      rafId = requestAnimationFrame(tick)\r\n    }\r\n  }, [sliderM, sliderN])\r\n\r\n  function tick() {\r\n    animationLooper(canvas.current)\r\n    analyser.getByteTimeDomainData(frequency_array)\r\n    rafId = requestAnimationFrame(tick)\r\n  }\r\n\r\n  //console.log('This is the songList that is being imported', songList)\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <div\r\n          className=\"audioControlBackground\"\r\n          style={{ backgroundImage: `url(${props.backgroundUrl})` }}\r\n        >\r\n          <div className=\"songInfoWrapper\">\r\n            {/* <div style={{ color: 'red' }}>{songList[currentSongIndex]}</div> */}\r\n            {songList && (\r\n              <select\r\n                value={songList[currentSongIndex]}\r\n                onChange={(e) => {\r\n                  console.log('e', e.target.value)\r\n                  getSong(e.target.value)\r\n                  let foo = (e.target.selectedIndex - 1) % songList.length\r\n                  setCurrentSongIndex(foo)\r\n                }}\r\n              >\r\n                {' '}\r\n                <option>Choose A Song</option>\r\n                {songList &&\r\n                  songList.map((song) => {\r\n                    return <option value={song}>{song}</option>\r\n                  })}\r\n              </select>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"canvasWrapper\">\r\n            {audio && audio.paused ? <canvas /> : <canvas ref={canvas} />}\r\n          </div>\r\n        </div>\r\n        <div className=\"sliderContainer\">\r\n          <Row className=\"sliderRow\">\r\n            <Col xs={4}>\r\n              <div className=\"sliders\">\r\n                <div>X</div>\r\n                <div>{sliderM}</div>\r\n                <input\r\n                  className=\"slider\"\r\n                  type=\"range\"\r\n                  min=\"0\"\r\n                  max=\"8\"\r\n                  step=\".1\"\r\n                  onChange={(e) => {\r\n                    setSliderM(e.target.value)\r\n                  }}\r\n                  value={sliderM}\r\n                />\r\n              </div>\r\n            </Col>\r\n            <Col xs={'auto'}>\r\n              <div className=\"buttonWrapper\">\r\n                <AudioControls\r\n                  playTrack={playTrack}\r\n                  onClickPrev={prevTrack}\r\n                  onClickNext={nextTrack}\r\n                  isPaused={isPaused}\r\n                />\r\n              </div>\r\n            </Col>\r\n            <Col xs={4}>\r\n              <div className=\"sliders\">\r\n                <input\r\n                  className=\"slider1\"\r\n                  type=\"range\"\r\n                  min=\"0\"\r\n                  max=\"8\"\r\n                  step=\".1\"\r\n                  onChange={(e) => {\r\n                    setSliderN(e.target.value)\r\n                  }}\r\n                  value={sliderN}\r\n                />\r\n                <div>{sliderN}</div>\r\n                <div>Y</div>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Displayer\r\n","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\FileUpload.js",["103"],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\Playlist.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Buttons\\AudioControls.js",[],{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":12,"column":10,"nodeType":"110","messageId":"111","endLine":12,"endColumn":15},{"ruleId":"108","severity":1,"message":"112","line":11,"column":10,"nodeType":"110","messageId":"111","endLine":11,"endColumn":16},{"ruleId":"113","severity":1,"message":"114","line":91,"column":6,"nodeType":"115","endLine":91,"endColumn":31,"suggestions":"116"},{"ruleId":"108","severity":1,"message":"117","line":7,"column":10,"nodeType":"110","messageId":"111","endLine":7,"endColumn":18},{"ruleId":"108","severity":1,"message":"118","line":48,"column":18,"nodeType":"110","messageId":"111","endLine":48,"endColumn":27},{"ruleId":"113","severity":1,"message":"119","line":227,"column":6,"nodeType":"115","endLine":227,"endColumn":24,"suggestions":"120"},{"ruleId":"108","severity":1,"message":"117","line":11,"column":10,"nodeType":"110","messageId":"111","endLine":11,"endColumn":18},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'source' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadSongIntoAudio'. Either include it or remove the dependency array.","ArrayExpression",["123"],"'filename' is assigned a value but never used.","'setCanvas' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'tick'. Either include it or remove the dependency array.",["124"],"no-global-assign","no-unsafe-negation",{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},"Update the dependencies array to be: [currentSongIndex, audio, loadSongIntoAudio]",{"range":"129","text":"130"},"Update the dependencies array to be: [sliderM, sliderN, tick]",{"range":"131","text":"132"},[2787,2812],"[currentSongIndex, audio, loadSongIntoAudio]",[6135,6153],"[sliderM, sliderN, tick]"]