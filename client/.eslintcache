[{"/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/index.js":"1","/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/Components/Home.js":"2","/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/Components/About.js":"3","/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/Components/Displayer.js":"4","/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/Components/MediaInteractions/InsertIcon.js":"5","/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/Components/MediaInteractions/FileUpload.js":"6","/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/Components/MediaInteractions/Playlist.js":"7","/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/Components/MyAccount.js":"8","/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/Components/App.js":"9","/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/Components/Signup.js":"10","/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/Components/Login.js":"11","/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/Components/PrivateRoute.js":"12","/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/Components/ForgotPassword.js":"13","/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/Components/UpdateProfile.js":"14","/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/contexts/AuthContext.js":"15","/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/Components/Navigation.js":"16","/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/firebase.js":"17","/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/contexts/PlaylistContext.js":"18"},{"size":400,"mtime":1613515554045,"results":"19","hashOfConfig":"20"},{"size":3678,"mtime":1613671972759,"results":"21","hashOfConfig":"20"},{"size":1381,"mtime":1613515553818,"results":"22","hashOfConfig":"20"},{"size":8104,"mtime":1613671972758,"results":"23","hashOfConfig":"20"},{"size":379,"mtime":1613012297186,"results":"24","hashOfConfig":"20"},{"size":6557,"mtime":1613671972760,"results":"25","hashOfConfig":"20"},{"size":1219,"mtime":1613671972760,"results":"26","hashOfConfig":"20"},{"size":1754,"mtime":1613515553822,"results":"27","hashOfConfig":"20"},{"size":2152,"mtime":1613671972758,"results":"28","hashOfConfig":"20"},{"size":2137,"mtime":1613515553823,"results":"29","hashOfConfig":"20"},{"size":1753,"mtime":1613515553821,"results":"30","hashOfConfig":"20"},{"size":586,"mtime":1613515553822,"results":"31","hashOfConfig":"20"},{"size":1654,"mtime":1613515553820,"results":"32","hashOfConfig":"20"},{"size":2639,"mtime":1613515553823,"results":"33","hashOfConfig":"20"},{"size":1469,"mtime":1613515554044,"results":"34","hashOfConfig":"20"},{"size":1712,"mtime":1613515553822,"results":"35","hashOfConfig":"20"},{"size":577,"mtime":1613515554045,"results":"36","hashOfConfig":"20"},{"size":2562,"mtime":1613671972761,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1qwo52n",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"40"},"/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/index.js",[],["82","83"],"/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/Components/Home.js",[],"/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/Components/About.js",["84"],"import React from 'react'\n\n// styling for About is in App.css\n\n\nconst About = () => {\n    return (\n        <div className=\"ui container Abountscr\">\n            <br></br>\n            <h2>Turn your music into a killer video.</h2>\n            <br></br>\n            <h4>\n                We make it fast and easy to create custom music visualizers. You're one step closer to entertaining your audience with self made videos.\n            </h4>\n            <br></br>\n            <h4>\n                No download needed. Jump into the web based editor and start customizing right away. The live video preview updates in real time and moves with your music.\n\n                It only takes a few minutes to make a video. Use simple pre-set controls to enjoy your tracks\n            </h4>\n            {/* SN: sorry this is illegal (below) */}\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n        </div>\n    )\n}\n\nexport default About\n","/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/Components/Displayer.js",["85","86","87","88","89","90","91","92","93"],"import React, {\n  createRef,\n  useState,\n  useEffect,\n  useLayoutEffect,\n  useContext,\n} from 'react'\nimport background from './Images/background1.jpg'\nimport { PlaylistContext } from '../contexts/PlaylistContext'\n\nconst UpdateWindowSize = () => {\n  const [size, setSize] = useState([1000, 1000])\n  useLayoutEffect(() => {\n    const updateSize = () => {\n      setSize([window.innerWidth, window.innerHeight])\n    }\n    window.addEventListener('resize', updateSize)\n    return () => window.removeEventListener('resize', updateSize)\n  }, [])\n  return size\n}\n\nlet rafId\n\nlet ctx, x_end, y_end, bar_height\n\nconst bars = 900 //  max 1030 - leave it in 555\nconst bar_width = 2 //  good in 1\nconst radius = 0 // innercircle\n\nconst Displayer = (props) => {\n  const {\n    songSelect,\n    getSong,\n    audio,\n    frequency_array,\n    audioContext,\n    analyser,\n  } = useContext(PlaylistContext)\n  //This is the state that lets us know what the current song loaded is\n  const [currentSong, setCurrentSong] = useState(-1)\n\n  const [width, height] = UpdateWindowSize()\n  const [canvas, setCanvas] = useState(createRef())\n  //State for whether the song is playing or not\n  const [isPaused, setIsPaused] = useState(true)\n  //Slider for changing peak lengths\n  const [sliderM, setSliderM] = useState(1)\n  const [sliderN, setSliderN] = useState(1)\n  const center_x = width / 2\n  const center_y = height / 2\n\n  function animationLooper(canvas) {\n    canvas.width = width\n    canvas.height = height\n    ctx = canvas.getContext('2d')\n    for (let i = 0; i < bars; i++) {\n      //divide a circle into equal part\n      const rads = (Math.PI * 2) / bars\n      // Math is magical - you can make lots of visualizer\n      // this 4.5 decides the canves size\n      bar_height = frequency_array[i] * 2.5\n      const x = center_x + Math.cos(rads * i) * radius\n      const y = center_y + Math.sin(rads * i) * radius\n      x_end =\n        center_x +\n        Math.cos(rads * sliderN * i + (Math.PI / 640) * new Date()) *\n          (radius + bar_height)\n      y_end =\n        center_y +\n        Math.sin(rads * sliderM * i + (Math.PI / 640) * new Date()) *\n          (radius + bar_height)\n      //draw a bar\n      // const x = bar_width / 2 + (i * window.innerWidth) / bars;\n      // const y = 900;\n      // const y_end = 800 - bar_height;\n      // const x_end = x;\n      drawBar(x, y, x_end, y_end, i, ctx, canvas)\n    }\n  }\n\n  function drawBar(x1 = 0, y1 = 0, x2 = 0, y2 = 0, i, ctx) {\n    i = (i + new Date().getTime() * 2) % 600 //  2 is an OK number,  600/6 =100 integer is good\n    const gradient = ctx.createLinearGradient(x1, y1, x2, y2)\n    gradient.addColorStop(0, 'rgba(0, 255, 0, 255)')\n    gradient.addColorStop(1, 'rgba(254, 0, 0, 255)')\n    ctx.fillStyle = 'pink'\n    let lineColor\n    if (i < 150) {\n      // lineColor = \"red\"\n      lineColor =\n        'rgb(' +\n        Math.abs(275 - i) +\n        ', ' +\n        Math.abs(175 - i / 2) +\n        ', ' +\n        1000 +\n        ')'\n    } else if (i < 300) {\n      // lineColor=\"blue\"\n      lineColor =\n        'rgb(' +\n        1000 +\n        ', ' +\n        Math.abs(275 - i) +\n        ', ' +\n        Math.abs(175 - i / 2) +\n        ')'\n    } else if (i < 450) {\n      // lineColor=\"green\"\n      lineColor =\n        'rgb(' +\n        Math.abs(175 - i / 2) +\n        ', ' +\n        1000 +\n        ', ' +\n        Math.abs(275 - i) +\n        ')'\n    } else if (i < 600) {\n      // lineColor = \"red\"\n      lineColor =\n        'rgb(' +\n        Math.abs(175 - i / 2) +\n        ', ' +\n        1000 +\n        ', ' +\n        Math.abs(275 - i) +\n        ')'\n    } else if (i < 750) {\n      // lineColor=\"blue\"\n      lineColor =\n        'rgb(' +\n        1000 +\n        ', ' +\n        Math.abs(275 - i) +\n        ', ' +\n        Math.abs(175 - i / 2) +\n        ')'\n    } else if (i < 900) {\n      // lineColor=\"green\"\n      lineColor =\n        'rgb(' +\n        Math.abs(275 - i) +\n        ', ' +\n        Math.abs(175 - i / 2) +\n        ', ' +\n        1000 +\n        ')'\n    }\n\n    ctx.strokeStyle = lineColor\n    ctx.lineWidth = bar_width\n    ctx.beginPath()\n    ctx.moveTo(x1, y1)\n    ctx.lineTo(x2, y2)\n    ctx.stroke()\n  }\n\n  //Sets the function to toggle if a song is playing or not\n  const togglePlay = () => {\n    // Plays audio when called\n    console.log('Audio clicked in Displayer', audio)\n    if (audio.paused) {\n      audioContext.resume()\n      audio.play()\n      setIsPaused(false)\n      rafId = requestAnimationFrame(tick)\n    } else {\n      //pauses audio\n      audio.pause()\n      setIsPaused(true)\n      cancelAnimationFrame(rafId)\n    }\n  }\n\n  useEffect(() => {\n    if (rafId) {\n      cancelAnimationFrame(rafId)\n      rafId = requestAnimationFrame(tick)\n    }\n  }, [sliderM, sliderN])\n\n  function tick() {\n    animationLooper(canvas.current)\n    analyser.getByteTimeDomainData(frequency_array)\n    rafId = requestAnimationFrame(tick)\n  }\n\n  //console.log('This is the songList that is being imported', songList)\n\n  return (\n    <div\n      className=\"audioControlBackground\"\n      style={{ backgroundImage: `url(${background})` }}\n    >\n      <div className=\"buttonWrapper\">\n        {/* This is to play the previous song */}\n        <button\n          onClick={() => {\n            if (audio && !isPaused) {\n              togglePlay()\n            }\n            if (currentSong === 0) {\n              setCurrentSong((curr) => songSelect.length - 1)\n              getSong(songSelect[songSelect.length - 1]).then(() =>\n                togglePlay(),\n              )\n            } else {\n              setCurrentSong((curr) => (curr - 1) % songSelect.length)\n              getSong(\n                songSelect[(currentSong - 1) % songSelect.length],\n              ).then(() => togglePlay())\n            }\n            // togglePlay();\n          }}\n        >\n          Previous\n        </button>\n        {/* The play button */}\n        <button\n          onClick={() => {\n            //console.log('Is audio being called', audio)\n            if (audio) {\n              togglePlay()\n            }\n          }}\n          style={{\n            width: '150px',\n            backgroundColor: isPaused\n              ? // this is the play/pause button colors\n                'yellow'\n              : 'green',\n          }}\n        >\n          {isPaused ? 'Play' : 'Pause'}\n        </button>\n        {/* Plays the next song */}\n        <button\n          onClick={() => {\n            if (audio && !isPaused) {\n              togglePlay()\n            }\n            setCurrentSong((curr) => (curr + 1) % songSelect.length)\n            getSong(\n              songSelect[(currentSong + 1) % songSelect.length],\n            ).then(() => togglePlay())\n          }}\n        >\n          Next\n        </button>\n        {songSelect && (\n          <select\n            value={songSelect[currentSong]}\n            onChange={(e) => {\n              getSong(e.target.value)\n              let foo = (e.target.selectedIndex - 1) % songSelect.length\n              setCurrentSong(foo)\n            }}\n          >\n            {' '}\n            <option>Choose A Song</option>\n            {songSelect &&\n              songSelect.map((song) => {\n                return <option value={song}>{song}</option>\n              })}\n          </select>\n        )}\n      </div>\n      <div className=\"songInfoWrapper\"></div>\n      <div className=\"canvasWrapper\">\n        {audio && audio.paused ? <canvas /> : <canvas ref={canvas} />}\n      </div>\n      <div className=\"sliders\">\n        {' '}\n        <div>{sliderM}</div>\n        <p>X</p>\n        <input\n          className=\"slider\"\n          type=\"range\"\n          min=\"0\"\n          max=\"8\"\n          step=\".1\"\n          onChange={(e) => {\n            setSliderM(e.target.value)\n          }}\n          value={sliderM}\n        />{' '}\n        <div>{sliderN}</div>\n        <p>Y</p>\n        <input\n          className=\"slider1\"\n          type=\"range\"\n          min=\"0\"\n          max=\"8\"\n          step=\".1\"\n          onChange={(e) => {\n            setSliderN(e.target.value)\n          }}\n          value={sliderN}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default Displayer\n","/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/Components/MediaInteractions/InsertIcon.js",["94"],"import React from 'react'\n// import { Container, Row, Col, Image } from 'react-bootstrap'\nimport icon from '../Images/Daco.png'\n\n//Icon input\nconst InsertIcon = () => {\n  return (\n    <div className=\"iconWrapper\">\n      <img\n        style={{\n          width: '15%',\n          height: '15%',\n        }}\n        src={`${icon}`}\n      />\n    </div>\n  )\n}\n\nexport default InsertIcon\n","/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/Components/MediaInteractions/FileUpload.js",["95"],"import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { Card } from 'react-bootstrap'\nimport Playlist from './Playlist'\n\nconst FileUpload = (props) => {\n  //Need to use a hook to set text in the label to the file namespace\n  const [file, setFile] = useState('')\n  const [filename, setFilename] = useState('Choose File')\n  const [uploadedFile, setUploadedFile] = useState({})\n  const [currentUser, setCurrentUser] = useState('USR------1')\n  const [playlist, setPlaylist] = useState([])\n\n  console.log('USER.....:', currentUser)\n\n  const onChange = (e) => {\n    //HTML file uploads come as an array so we want the index of the first file\n    setFile(e.target.files[0])\n    setFilename(e.target.files[0].name)\n  }\n\n  const onSubmit = async (e) => {\n    // e.preventDefault() used to prevent submitting by accident by preventing normal submitting\n    e.preventDefault()\n\n    const formData = new FormData()\n    formData.append('file', file)\n\n    try {\n      const res = await axios.post(\n        'http://localhost:5000/upload/media',\n        formData,\n        {\n          headers: { 'Content-Type': 'multipart/form-data' },\n        },\n      )\n      const { fileName, filePath } = res.data\n      // console.log('These are the headers', res.headers)\n      if (res.status === 200) {\n        console.log('Was uploaded successfully ' + res.status)\n      }\n      setUploadedFile({ fileName, filePath })\n    } catch (err) {\n      if (err.response.status === 500) {\n        console.error('There is a problem with the server ' + err.message)\n      } else {\n        //This message is from the server if no file is uploaded\n        // console.error('we had an error??? ' + err.response.data.msg)\n        console.error(err.response.data.msg)\n      }\n    }\n  }\n  // Gets the playlist and sends to the Playlist Component\n\n  const getPlaylist = () => {\n    axios\n      .get('http://localhost:5000/upload/list')\n      .then((res) => {\n        // console.log('this is the res', res)\n        return res.data\n      })\n      .then((playlist) => {\n        // console.log('This is the playlist', playlist)\n        setPlaylist(playlist)\n      })\n  }\n  useEffect(() => {\n    getPlaylist()\n  }, [uploadedFile])\n\n  // If the audio button is selected\n  if (props.mediatype === 'Audio') {\n    return (\n      <Card style={{ width: '16rem', margin: '16px' }}>\n        <Card.Body>\n          <Card.Title>{props.mediatype} Upload</Card.Title>\n          <Card.Subtitle className=\"mb-2 text-muted\">\n            Select {props.mediatype} to Upload\n          </Card.Subtitle>\n          <Card.Text>\n            <>\n              <div className=\"mb-2\">\n                <form onSubmit={onSubmit}>\n                  <div className=\"input-group mb-3\">\n                    <input\n                      type=\"file\"\n                      className=\"form-control mb-5\"\n                      id=\"inputGroupFile02\"\n                      accept={`${props.mediatype}/wav, ${props.mediatype}/mp3, ${props.mediatype}/mpeg`}\n                      onChange={onChange}\n                    />\n                    <input\n                      type=\"submit\"\n                      value={`Submit`}\n                      // className=\"btn btn-primary btn-block\"\n                      className=\"btn1\"\n                      onClick={() => getPlaylist()}\n                    />\n\n                    <label\n                      className=\"id=inputGroupFile02\"\n                      htmlFor=\"inputGroupFile02\"\n                    ></label>\n                  </div>\n                </form>\n              </div>\n            </>\n          </Card.Text>\n        </Card.Body>\n        <Playlist uploadedFile={uploadedFile} />\n      </Card>\n    )\n  }\n  if (props.mediatype === 'Background') {\n    return (\n      <Card style={{ width: '16rem', margin: '16px' }}>\n        <Card.Body>\n          <Card.Title>{props.mediatype} Upload</Card.Title>\n          <Card.Subtitle className=\"mb-2 text-muted\">\n            Select {props.mediatype} to Upload\n          </Card.Subtitle>\n          <Card.Text>\n            <>\n              <div className=\"mb-2\">\n                <form onSubmit={onSubmit}>\n                  <div className=\"input-group mb-3\">\n                    <input\n                      type=\"file\"\n                      className=\"form-control mb-5\"\n                      id=\"inputGroupFile02\"\n                      accept={`${props.filetype}/jpg, ${props.filetype}/jpeg, ${props.filetype}/bmp`}\n                      onChange={onChange}\n                    />\n                    <input\n                      type=\"submit\"\n                      value={`Submit`}\n                      // className=\"btn btn-primary btn-block\"\n                      className=\"btn1\"\n                    />\n\n                    <label\n                      className=\"id=inputGroupFile02\"\n                      htmlFor=\"inputGroupFile02\"\n                    ></label>\n                  </div>\n                </form>\n              </div>\n            </>\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    )\n  }\n  return (\n    <Card style={{ width: '16rem', margin: '16px' }}>\n      <Card.Body>\n        <Card.Title>{props.mediatype} Upload</Card.Title>\n        <Card.Subtitle className=\"mb-2 text-muted\">\n          Select {props.mediatype} to Upload\n        </Card.Subtitle>\n        <Card.Text>\n          <>\n            <div className=\"mb-2\">\n              <form onSubmit={onSubmit}>\n                <div className=\"input-group mb-3\">\n                  <input\n                    type=\"file\"\n                    className=\"form-control mb-5\"\n                    id=\"inputGroupFile02\"\n                    accept={`${props.filetype}/gif, ${props.filetype}/png, ${props.filetype}/jpg`}\n                    onChange={onChange}\n                  />\n                  <input\n                    type=\"submit\"\n                    value={`Submit`}\n                    // className=\"btn btn-primary btn-block\"\n                    className=\"btn1\"\n                  />\n\n                  <label\n                    className=\"id=inputGroupFile02\"\n                    htmlFor=\"inputGroupFile02\"\n                  ></label>\n                </div>\n              </form>\n            </div>\n          </>\n        </Card.Text>\n      </Card.Body>\n    </Card>\n  )\n}\n\nexport default FileUpload\n","/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/Components/MediaInteractions/Playlist.js",[],"/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/Components/MyAccount.js",["96"],"import React, { useState } from \"react\"\n  import { Card, Button, Alert } from \"react-bootstrap\"\n  import { useAuth } from \"../contexts/AuthContext\"\n  import { Link, useHistory } from \"react-router-dom\"\nimport Navigation from \"./Navigation\"\n  \n  export default function Dashboard() {\n    const styles = {\n        root: {\n            width: \"80%\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            marginBottom: \"105px\",\n            marginTop: \"105px\",\n            background: \"antiquewhite\",\n            padding: \"100px\",\n            fontSize: \"1.5rem\",\n            borderRadius: \"20px\",\n            backgroundColor: \"#357E85\"\n        },\n        labelText: {\n            fontFamily: \"Roboto\",\n            fontSize: \"2rem\",\n            color: \"#CCEBF4\",\n        }\n      }    \n    const [error, setError] = useState(\"\")\n    const { currentUser, logout } = useAuth()\n    const history = useHistory()\n  \n    async function handleLogout() {\n      setError(\"\")\n  \n      try {\n        await logout()\n        history.push(\"/login\")\n      } catch {\n        setError(\"Failed to log out\")\n      }\n    }\n  \n    return (\n<div>\n  <Navigation />\n<Card>\n          <Card.Body>\n            <h2 className=\"text-center mb-4\">Profile</h2>\n            {error && <Alert variant=\"danger\">{error}</Alert>}\n            <strong>Email:</strong> {currentUser.email}\n            <strong>Saved Visualizer:</strong>\n            <Link to=\"/update-profile\" className=\"btn btn-primary w-100 mt-3\">\n              Update Profile\n            </Link>\n          </Card.Body>\n        </Card>\n        <div className=\"w-100 text-center mt-2\">\n          <Button variant=\"link\" onClick={handleLogout}>\n            Log Out\n          </Button>\n        </div>\n</div>\n    )\n  }","/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/Components/App.js",["97"],"/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/Components/Signup.js",[],"/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/Components/Login.js",[],"/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/Components/PrivateRoute.js",[],"/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/Components/ForgotPassword.js",[],"/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/Components/UpdateProfile.js",[],"/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/contexts/AuthContext.js",[],"/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/Components/Navigation.js",["98","99"],"import React, { useState }  from 'react'\nimport { useAuth } from \"../contexts/AuthContext\"\nimport { Link, useHistory } from \"react-router-dom\"\nimport { Navbar, Nav, Container } from 'react-bootstrap'\nimport pic from './Images/logogrey.png'\n// import pic from './Logo1sn.png'\n\n\nconst Navigation = () => {\n\nconst [error, setError] = useState(\"\")\nconst { currentUser, logout } = useAuth()\nconst history = useHistory()\n\nasync function handleLogout() {\n  setError(\"\")\n\n  try {\n    await logout()\n    history.push(\"/login\")\n  } catch {\n    setError(\"Failed to log out\")\n  }\n}\n\n  //Navbar\n\n  return (\n    \n\n<Navbar style={{ backgroundColor: 'black' }} variant=\"dark\" expand=\"sm\" sticky=\"top\" className=\"justify-content-end\">\n        <Container id=\"nav-wrap\">\n        <Navbar.Brand href=\"/Login\">\n          {/* <img src={pic} alt={''} width={80} height={80} /> */}\n          <img \n          src={pic} \n          alt={''} \n          height={'30%'} \n          width={'30%'} \n          className=\"d-inline-block align-top\"/>\n        </Navbar.Brand>\n\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav>\n          <Nav.Item id=\"nav-item\"><Link to=\"/About\" style={{ color: 'white' }}>About</Link></Nav.Item>\n          <Nav.Item id=\"nav-item\"><Link to=\"/Home\" style={{ color: 'white' }}>Editor</Link></Nav.Item>\n          <Nav.Item id=\"nav-item\"><Link to=\"/MyAccount\" style={{ color: 'white' }}>Profile</Link></Nav.Item>\n          <Nav.Item id=\"nav-item\" onClick={handleLogout}><Link style={{ color: 'white' }} >Logout</Link></Nav.Item>\n\n          </Nav>\n        </Navbar.Collapse>\n        </Container>\n      </Navbar>\n\n   \n  )\n}\n\nexport default Navigation","/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/firebase.js",[],"/Users/deanerfree/Downloads/EvolveU/the-mandalorians/musicVisualizerApp/client/src/contexts/PlaylistContext.js",["100"],"import React, { createContext, useState, useEffect } from 'react'\nimport axios from 'axios'\n\nexport const PlaylistContext = createContext()\n\nconst PlaylistContextProvider = (props) => {\n  const [songSelect, setsongSelect] = useState([])\n\n  let audio\n  let audioContext\n  let source\n  let analyser\n  let frequency_array\n  const createAudioContext = () => {\n    audio = new Audio()\n\n    audioContext = new (window.AudioContext || window.webkitAudioContext)()\n    source = audioContext.createMediaElementSource(audio)\n    analyser = audioContext.createAnalyser()\n    source.connect(analyser)\n    analyser.connect(audioContext.destination)\n    frequency_array = new Uint8Array(analyser.frequencyBinCount)\n  }\n\n  const getSong = async (song) => {\n    console.log('This is in getSong', song)\n    createAudioContext()\n    const response = await axios.request({\n      url: `http://localhost:5000/upload/media/${song}`,\n      responseType: 'blob',\n      method: 'GET',\n    })\n    audio.src = URL.createObjectURL(response.data)\n    console.log('audio.src', audio.src)\n    audio.load()\n    // audio.play()\n  }\n\n  const getSongList = async () => {\n    let res = await axios.get('http://localhost:5000/upload/list')\n    const data = res.data\n    console.log('This is data', data)\n\n    setsongSelect(data)\n    console.log('This is the songSelect', songSelect)\n  }\n  // console.log(uploadedFile)\n  //Returns a list of files saved\n  useEffect(() => {\n    getSongList()\n  }, [])\n\n  return (\n    <PlaylistContext.Provider\n      value={{\n        createAudioContext,\n        songSelect,\n        setsongSelect,\n        getSong,\n        getSongList,\n        audio,\n        frequency_array,\n        audioContext,\n        analyser,\n      }}\n    >\n      {props.children}\n    </PlaylistContext.Provider>\n  )\n}\n\nexport default PlaylistContextProvider\n",{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":8,"column":8,"nodeType":"107","messageId":"108","endLine":8,"endColumn":12},{"ruleId":"105","severity":1,"message":"109","line":8,"column":8,"nodeType":"107","messageId":"108","endLine":8,"endColumn":13},{"ruleId":"105","severity":1,"message":"110","line":10,"column":8,"nodeType":"107","messageId":"108","endLine":10,"endColumn":16},{"ruleId":"105","severity":1,"message":"111","line":37,"column":7,"nodeType":"107","messageId":"108","endLine":37,"endColumn":25},{"ruleId":"105","severity":1,"message":"112","line":45,"column":3,"nodeType":"107","messageId":"108","endLine":45,"endColumn":18},{"ruleId":"105","severity":1,"message":"113","line":51,"column":5,"nodeType":"107","messageId":"108","endLine":51,"endColumn":18},{"ruleId":"105","severity":1,"message":"114","line":53,"column":5,"nodeType":"107","messageId":"108","endLine":53,"endColumn":16},{"ruleId":"105","severity":1,"message":"115","line":60,"column":18,"nodeType":"107","messageId":"108","endLine":60,"endColumn":27},{"ruleId":"116","severity":1,"message":"117","line":73,"column":6,"nodeType":"118","endLine":73,"endColumn":24,"suggestions":"119"},{"ruleId":"116","severity":1,"message":"120","line":99,"column":6,"nodeType":"118","endLine":99,"endColumn":8,"suggestions":"121"},{"ruleId":"122","severity":1,"message":"123","line":9,"column":7,"nodeType":"124","endLine":15,"endColumn":9},{"ruleId":"105","severity":1,"message":"125","line":12,"column":23,"nodeType":"107","messageId":"108","endLine":12,"endColumn":37},{"ruleId":"105","severity":1,"message":"126","line":8,"column":11,"nodeType":"107","messageId":"108","endLine":8,"endColumn":17},{"ruleId":"105","severity":1,"message":"127","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":25},{"ruleId":"105","severity":1,"message":"128","line":11,"column":8,"nodeType":"107","messageId":"108","endLine":11,"endColumn":13},{"ruleId":"105","severity":1,"message":"129","line":12,"column":9,"nodeType":"107","messageId":"108","endLine":12,"endColumn":20},{"ruleId":"105","severity":1,"message":"130","line":10,"column":10,"nodeType":"107","messageId":"108","endLine":10,"endColumn":16},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],"no-unused-vars","'vid2' is defined but never used.","Identifier","unusedVar","'axios' is defined but never used.","'songList' is defined but never used.","'createAudioContext' is assigned a value but never used.","'frequency_array' is assigned a value but never used.","'setsongSelect' is assigned a value but never used.","'getSongList' is assigned a value but never used.","'setCanvas' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'tick'. Either include it or remove the dependency array.","ArrayExpression",["133"],"React Hook useEffect has a missing dependency: 'getSong'. Either include it or remove the dependency array.",["134"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setCurrentUser' is assigned a value but never used.","'styles' is assigned a value but never used.","'useState' is defined but never used.","'error' is assigned a value but never used.","'currentUser' is assigned a value but never used.","'source' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},"Update the dependencies array to be: [sliderM, sliderN, tick]",{"range":"139","text":"140"},"Update the dependencies array to be: [getSong]",{"range":"141","text":"142"},[1961,1979],"[sliderM, sliderN, tick]",[2611,2613],"[getSong]"]