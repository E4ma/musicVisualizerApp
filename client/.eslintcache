[{"C:\\Users\\Ifyy\\Documents\\mandalorians\\app\\musicVisualizerApp\\client\\src\\index.js":"1","C:\\Users\\Ifyy\\Documents\\mandalorians\\app\\musicVisualizerApp\\client\\src\\App.js":"2","C:\\Users\\Ifyy\\Documents\\mandalorians\\app\\musicVisualizerApp\\client\\src\\Components\\About.js":"3","C:\\Users\\Ifyy\\Documents\\mandalorians\\app\\musicVisualizerApp\\client\\src\\Components\\Navbars\\Navigation.js":"4","C:\\Users\\Ifyy\\Documents\\mandalorians\\app\\musicVisualizerApp\\client\\src\\Components\\Home.js":"5","C:\\Users\\Ifyy\\Documents\\mandalorians\\app\\musicVisualizerApp\\client\\src\\Components\\TemplatesPage.js":"6","C:\\Users\\Ifyy\\Documents\\mandalorians\\app\\musicVisualizerApp\\client\\src\\Components\\Displayer.js":"7","C:\\Users\\Ifyy\\Documents\\mandalorians\\app\\musicVisualizerApp\\client\\src\\Components\\UploadBackground\\backgroundUpload.js":"8","C:\\Users\\Ifyy\\Documents\\mandalorians\\app\\musicVisualizerApp\\client\\src\\Components\\UploadAudio\\AudioUpload.js":"9","C:\\Users\\Ifyy\\Documents\\mandalorians\\app\\musicVisualizerApp\\client\\src\\Components\\IconInteractions\\IconUpload.js":"10","C:\\Users\\Ifyy\\Documents\\mandalorians\\app\\musicVisualizerApp\\client\\src\\Components\\IconInteractions\\InsertIcon.js":"11","C:\\Users\\Ifyy\\Documents\\mandalorians\\app\\musicVisualizerApp\\client\\src\\Components\\Signin\\TheForm.js":"12","C:\\Users\\Ifyy\\Documents\\mandalorians\\app\\musicVisualizerApp\\client\\src\\Components\\Login.js":"13"},{"size":404,"mtime":1612480469580,"results":"14","hashOfConfig":"15"},{"size":1348,"mtime":1612553708095,"results":"16","hashOfConfig":"15"},{"size":1248,"mtime":1612480469298,"results":"17","hashOfConfig":"15"},{"size":2485,"mtime":1612554086367,"results":"18","hashOfConfig":"15"},{"size":2448,"mtime":1612480469300,"results":"19","hashOfConfig":"15"},{"size":207,"mtime":1612480469387,"results":"20","hashOfConfig":"15"},{"size":5826,"mtime":1612480469299,"results":"21","hashOfConfig":"15"},{"size":2831,"mtime":1612480469389,"results":"22","hashOfConfig":"15"},{"size":2786,"mtime":1612480469388,"results":"23","hashOfConfig":"15"},{"size":2783,"mtime":1612480469302,"results":"24","hashOfConfig":"15"},{"size":396,"mtime":1612480469303,"results":"25","hashOfConfig":"15"},{"size":2031,"mtime":1612545200577,"results":"26","hashOfConfig":"15"},{"size":2381,"mtime":1612553706298,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1q6cxom",{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Ifyy\\Documents\\mandalorians\\app\\musicVisualizerApp\\client\\src\\index.js",[],["60","61"],"C:\\Users\\Ifyy\\Documents\\mandalorians\\app\\musicVisualizerApp\\client\\src\\App.js",["62"],"C:\\Users\\Ifyy\\Documents\\mandalorians\\app\\musicVisualizerApp\\client\\src\\Components\\About.js",[],"C:\\Users\\Ifyy\\Documents\\mandalorians\\app\\musicVisualizerApp\\client\\src\\Components\\Navbars\\Navigation.js",["63"],"C:\\Users\\Ifyy\\Documents\\mandalorians\\app\\musicVisualizerApp\\client\\src\\Components\\Home.js",[],"C:\\Users\\Ifyy\\Documents\\mandalorians\\app\\musicVisualizerApp\\client\\src\\Components\\TemplatesPage.js",[],"C:\\Users\\Ifyy\\Documents\\mandalorians\\app\\musicVisualizerApp\\client\\src\\Components\\Displayer.js",["64","65","66","67","68"],"import React, { createRef, useState, useEffect, useLayoutEffect } from 'react'\r\n\r\nimport songFile from './audio/TrimmedTrack2.mp3'\r\nimport songFile2 from './audio/Rodriguez - Inner City Blues.mp3'\r\nimport songFile3 from './audio/Lucky Dube-Too-Many-People.wav.mp3'\r\n\r\n\r\n\r\nconst UpdateWindowSize = () => {\r\n  const [size, setSize] = useState([1000, 1000])\r\n  useLayoutEffect(() => {\r\n    const updateSize = () => {\r\n      setSize([window.innerWidth, window.innerHeight])\r\n      // console.log(window.innerWidth, window.innerHeight)\r\n    }\r\n    window.addEventListener('resize', updateSize)\r\n    return () => window.removeEventListener('resize', updateSize)\r\n  }, [])\r\n  return size\r\n}\r\n\r\nlet songs = [\r\n  {\r\n    name: \"Keep 'Em Coming\",\r\n    songFile: songFile,\r\n    color: 'black',\r\n    fontColor: 'black',\r\n  },\r\n  {\r\n    name: 'Rodriguez - Inner City Blue',\r\n    songFile: songFile2,\r\n    color: 'red',\r\n    fontColor: 'black',\r\n  },\r\n  {\r\n    name: 'Lucky Dube-Too-Many-People',\r\n    songFile: songFile3,\r\n    color: 'pink',\r\n    fontColor: 'darkpurple',\r\n  },\r\n]\r\n\r\nlet rafId\r\nlet analyser\r\n// Changing Variables\r\nlet ctx, x_end, y_end, bar_height\r\n\r\n// constants\r\n// const width = window.innerWidth * (3 / 4) //\r\n// const width = 1000\r\n// const height = window.innerHeight\r\n// const height = 1000\r\nconst bars = 999 //  max 1030 - leave it in 555\r\nconst bar_width = 2 //  good in 1\r\nconst radius = 0 // innercircle\r\n\r\nlet audioSource = new Audio(songs[0].songFile)\r\n\r\nconst Displayer = () => {\r\n  const [width, height] = UpdateWindowSize()\r\n  const [audio, setAudio] = useState(audioSource)\r\n  const [songList, setSongList] = useState(songs)\r\n  const [canvas, setCanvas] = useState(createRef())\r\n  //\r\n  const [audioContext, setAudioContext] = useState()\r\n  const [isPaused, setIsPaused] = useState(true)\r\n  //\r\n  const [currentSong, setCurrentSong] = useState(0)\r\n  const [frequency_array, setFrequencyArray] = useState()\r\n  const [songName, setSongName] = useState(songs[0].name)\r\n  const [textColor, setTextColor] = useState(songs[0].textColor)\r\n  //changing the 2 lines below moves the canves\r\n  const center_x = width / 2\r\n  const center_y = height / 2\r\n  function animationLooper(canvas) {\r\n    canvas.width = width\r\n    canvas.height = height\r\n\r\n    ctx = canvas.getContext('2d')\r\n\r\n    for (var i = 0; i < bars; i++) {\r\n      //divide a circle into equal part\r\n      const rads = (Math.PI * 2) / bars\r\n\r\n      // Math is magical - you can make lots of visualizer\r\n      // this 4.5 decides the canves size\r\n      bar_height = frequency_array[i] * 2.5\r\n\r\n      const x = center_x + Math.cos(rads * i) * radius\r\n      const y = center_y + Math.sin(rads * i) * radius\r\n      x_end = center_x + Math.cos(rads * i) * (radius + bar_height)\r\n      y_end = center_y + Math.sin(rads * i) * (radius + bar_height)\r\n\r\n      //draw a bar\r\n      drawBar(x, y, x_end, y_end, frequency_array[i], ctx, canvas)\r\n    }\r\n  }\r\n\r\n  function drawBar(x1 = 0, y1 = 0, x2 = 0, y2 = 0, frequency, ctx, canvas) {\r\n    const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height)\r\n    // gradient.addColorStop(0, \"rgba(35, 7, 77, 1)\");\r\n    // gradient.addColorStop(1, \"rgba(204, 83, 51, 1)\");\r\n    gradient.addColorStop(0, 'rgba(30, 17, 18, 11)')\r\n    gradient.addColorStop(1, 'rgba(254, 283, 151, 121)')\r\n    ctx.fillStyle = gradient\r\n\r\n    const lineColor = 'rgb(' + frequency + ', ' + frequency + ', ' + 205 + ')'\r\n    ctx.strokeStyle = lineColor\r\n    ctx.lineWidth = bar_width\r\n    ctx.beginPath()\r\n    ctx.moveTo(x1, y1)\r\n    ctx.lineTo(x2, y2)\r\n    ctx.stroke()\r\n  }\r\n\r\n  useEffect(() => {\r\n    let context = new (window.AudioContext || window.webkitAudioContext)()\r\n    let source = context.createMediaElementSource(audio)\r\n\r\n    analyser = context.createAnalyser()\r\n    source.connect(analyser)\r\n    analyser.connect(context.destination)\r\n    let frequencyArray = new Uint8Array(analyser.frequencyBinCount)\r\n    setFrequencyArray(frequencyArray)\r\n    //\r\n    setAudioContext(context)\r\n    //\r\n  }, [audio])\r\n\r\n  const togglePlay = () => {\r\n    // const { audio } = this;\r\n    if (audio.paused) {\r\n      audioContext.resume()\r\n      audio.play()\r\n      setIsPaused(false)\r\n      rafId = requestAnimationFrame(tick)\r\n    } else {\r\n      audio.pause()\r\n      setIsPaused(true)\r\n      cancelAnimationFrame(rafId)\r\n    }\r\n  }\r\n\r\n  const changeSong = (songNumber) => {\r\n    console.log('No8', songNumber)\r\n    let { name, songFile, color, fontColor } = songList[songNumber]\r\n    audio.src = songFile\r\n    if (!isPaused) {\r\n      audio.play()\r\n    }\r\n    setCurrentSong(songNumber)\r\n    setSongName(name)\r\n    // setBackgroundColor(color)\r\n    setTextColor(fontColor)\r\n  }\r\n\r\n  const tick = () => {\r\n    animationLooper(canvas.current)\r\n    analyser.getByteTimeDomainData(frequency_array)\r\n    rafId = requestAnimationFrame(tick)\r\n  }\r\n\r\n  return (\r\n    <div className=\"audioControlBackground\">\r\n      <div className=\"buttonWrapper\">\r\n        <button\r\n          onClick={togglePlay}\r\n          style={\r\n            isPaused\r\n              ? // this is the play/pause button colors\r\n                { backgroundColor: 'yellow' }\r\n              : { backgroundColor: 'green' }\r\n          }\r\n        >\r\n          {isPaused ? 'Paused' : 'PLAYING !!!'}\r\n        </button>\r\n\r\n        <button\r\n          onClick={() => {\r\n            changeSong((currentSong + 1) % 3)\r\n          }}\r\n        >\r\n          Change Song my Friend\r\n        </button>\r\n      </div>\r\n      <div className=\"songInfoWrapper\">\r\n        {/* Inserted by SN */}\r\n        <div style={{ color: 'whitesmoke' }}>{songName}</div>\r\n\r\n        {/* Removed by SN */}\r\n        {/* < h3 style={{ color: textColor }}>{songName}</h3> */}\r\n      </div>\r\n      <div className=\"canvasWrapper\">\r\n        <canvas ref={canvas} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Displayer\r\n","C:\\Users\\Ifyy\\Documents\\mandalorians\\app\\musicVisualizerApp\\client\\src\\Components\\UploadBackground\\backgroundUpload.js",["69","70"],"import React, { useState } from 'react'\r\nimport axios from 'axios'\r\nimport { Card } from 'react-bootstrap'\r\n\r\nconst BackgroundUpload = () => {\r\n  //Need to use a hook to set text in the label to the file namespace\r\n  const [file, setFile] = useState('')\r\n  const [filename, setFilename] = useState('Choose File')\r\n  const [uploadedFile, setUploadedFile] = useState({})\r\n\r\n  const onChange = (e) => {\r\n    //HTML file uploads come as an array so we want the index of the first file\r\n    setFile(e.target.files[0])\r\n    setFilename(e.target.files[0].name)\r\n  }\r\n\r\n  const onSubmit = async (e) => {\r\n    //used to prevent submitting by accident by preventing normal submitting\r\n    e.preventDefault()\r\n    const formData = new FormData()\r\n    formData.append('file', file)\r\n\r\n    try {\r\n      //Need to connect to the server the endpoint is media\r\n      const res = await axios.post(\r\n        'http://localhost:5000/upload/media',\r\n        formData,\r\n        {\r\n          headers: { 'Content-Type': 'multipart/form-data' },\r\n        },\r\n      )\r\n      const { fileName, filePath } = res.data\r\n      if (res.status === 200) {\r\n        console.log('Was uploaded successfully ' + res.status)\r\n      }\r\n      setUploadedFile({ fileName, filePath })\r\n    } catch (err) {\r\n      if (err.response.status === 500) {\r\n        console.error('There is a problem with the server ' + err.message)\r\n      } else {\r\n        //This message is from the server if no file is uploaded\r\n        console.error(err.response.data.msg)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    //The fragment allows to group children without creating extra nodes\r\n    <Card style={{ width: '18rem', margin: '24px' }}>\r\n      <Card.Body>\r\n        <Card.Title>Upload Background</Card.Title>\r\n        <Card.Subtitle className=\"mb-2 text-muted\">\r\n          Select a background to upload\r\n        </Card.Subtitle>\r\n        <Card.Text>\r\n          <>\r\n            <div className=\"mb-2\">\r\n              <form onSubmit={onSubmit}>\r\n                <div className=\"input-group mb-3\">\r\n                  <input\r\n                    type=\"file\"\r\n                    className=\"form-control\"\r\n                    id=\"inputGroupFile02\"\r\n                    accept=\"image/gif, image/jpeg, image/jpg\"\r\n                    onChange={onChange}\r\n                  />\r\n                  <input\r\n                    type=\"submit\"\r\n                    value=\"Upload Background\"\r\n                    className=\"btn btn-primary btn-block\"\r\n                  />\r\n\r\n                  <label\r\n                    className=\"id=inputGroupFile02\"\r\n                    htmlFor=\"inputGroupFile02\"\r\n                  ></label>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </>\r\n        </Card.Text>\r\n      </Card.Body>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default BackgroundUpload\r\n","C:\\Users\\Ifyy\\Documents\\mandalorians\\app\\musicVisualizerApp\\client\\src\\Components\\UploadAudio\\AudioUpload.js",["71","72"],"import React, { useState } from 'react'\r\nimport axios from 'axios'\r\nimport { Card } from 'react-bootstrap'\r\n\r\nconst AudioUpload = () => {\r\n  //Need to use a hook to set text in the label to the file namespace\r\n  const [file, setFile] = useState('')\r\n  const [filename, setFilename] = useState('Choose File')\r\n  const [uploadedFile, setUploadedFile] = useState({})\r\n\r\n  const onChange = (e) => {\r\n    //HTML file uploads come as an array so we want the index of the first file\r\n    setFile(e.target.files[0])\r\n    setFilename(e.target.files[0].name)\r\n  }\r\n\r\n  const onSubmit = async (e) => {\r\n    // e.preventDefault() used to prevent submitting by accident by preventing normal submitting\r\n    e.preventDefault()\r\n    const formData = new FormData()\r\n    formData.append('file', file)\r\n\r\n    try {\r\n      //Need to connect to the server the endpoint is media\r\n      const res = await axios.post(\r\n        'http://localhost:5000/upload/media',\r\n        formData,\r\n        {\r\n          headers: { 'Content-Type': 'multipart/form-data' },\r\n        },\r\n      )\r\n      const { fileName, filePath } = res.data\r\n      console.log(res.headers)\r\n      if (res.status === 200) {\r\n        console.log('Was uploaded successfully ' + res.status)\r\n      }\r\n      setUploadedFile({ fileName, filePath })\r\n    } catch (err) {\r\n      if (err.response.status === 500) {\r\n        console.error('There is a problem with the server ' + err.message)\r\n      } else {\r\n        //This message is from the server if no file is uploaded\r\n        console.error(err.response.data.msg)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card style={{ width: '18rem', margin: '20px' }}>\r\n      <Card.Body>\r\n        <Card.Title>Audio Upload</Card.Title>\r\n        <Card.Subtitle className=\"mb-2 text-muted\">\r\n          Select audio to upload\r\n        </Card.Subtitle>\r\n        <Card.Text>\r\n          <>\r\n            <div className=\"mb-2\">\r\n              <form onSubmit={onSubmit}>\r\n                <div className=\"input-group mb-3\">\r\n                  <input\r\n                    type=\"file\"\r\n                    className=\"form-control mb-5\"\r\n                    id=\"inputGroupFile02\"\r\n                    accept=\"audio/wav, audio/mp3, audio/mpeg\"\r\n                    onChange={onChange}\r\n                  />\r\n                  <input\r\n                    type=\"submit\"\r\n                    value=\"UploadAudio\"\r\n                    className=\"btn btn-primary btn-block\"\r\n                  />\r\n\r\n                  <label\r\n                    className=\"id=inputGroupFile02\"\r\n                    htmlFor=\"inputGroupFile02\"\r\n                  ></label>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </>\r\n        </Card.Text>\r\n      </Card.Body>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default AudioUpload\r\n","C:\\Users\\Ifyy\\Documents\\mandalorians\\app\\musicVisualizerApp\\client\\src\\Components\\IconInteractions\\IconUpload.js",["73","74"],"import React, { useState, Fragment } from 'react'\r\nimport axios from 'axios'\r\nimport { Card } from 'react-bootstrap'\r\n\r\nconst IconUpload = () => {\r\n  //Need to use a hook to set text in the label to the file namespace\r\n  const [file, setFile] = useState('')\r\n  const [filename, setFilename] = useState('Choose File')\r\n  const [uploadedFile, setUploadedFile] = useState({})\r\n\r\n  const onChange = (e) => {\r\n    //HTML file uploads come as an array so we want the index of the first file\r\n    setFile(e.target.files[0])\r\n    setFilename(e.target.files[0].name)\r\n  }\r\n\r\n  const onSubmit = async (e) => {\r\n    //used to prevent submitting by accident by preventing normal submitting\r\n    e.preventDefault()\r\n    const formData = new FormData()\r\n    formData.append('file', file)\r\n    console.log(formData)\r\n    try {\r\n      //Need to connect to the server this is the endpoint\r\n      const res = await axios.post(\r\n        'http://localhost:5000/upload/icon',\r\n        formData,\r\n        {\r\n          headers: { 'Content-Type': 'multipart/form-data' },\r\n        },\r\n      )\r\n      const { fileName, filePath } = res.data\r\n      if (res.status === 200) {\r\n        console.log('Icon was uploaded successfully ' + res.status)\r\n      }\r\n      setUploadedFile({ fileName, filePath })\r\n    } catch (err) {\r\n      if (err.response.status === 500) {\r\n        console.error('There is a problem with the server ' + err.message)\r\n      } else {\r\n        //This message is from the server if no file is uploaded\r\n        console.error(err.response.data.msg)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card style={{ width: '18rem', margin: '24px' }}>\r\n      <Card.Body>\r\n        <Card.Title>Upload Icon</Card.Title>\r\n        <Card.Subtitle className=\"mb-2 text-muted\">\r\n          Select an Icon to upload\r\n        </Card.Subtitle>\r\n        <Card.Text>\r\n          <>\r\n            <div className=\"mb-2\">\r\n              <form onSubmit={onSubmit}>\r\n                <div className=\"input-group mb-3\">\r\n                  <input\r\n                    type=\"file\"\r\n                    className=\"form-control\"\r\n                    id=\"inputGroupFile02\"\r\n                    accept=\"image/gif, image/png, image/jpeg, image/jpg\"\r\n                    onChange={onChange}\r\n                  />\r\n                  <input\r\n                    type=\"submit\"\r\n                    value=\"Upload Background\"\r\n                    className=\"btn btn-primary btn-block\"\r\n                  />\r\n\r\n                  <label\r\n                    className=\"id=inputGroupFile02\"\r\n                    htmlFor=\"inputGroupFile02\"\r\n                  ></label>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </>\r\n        </Card.Text>\r\n      </Card.Body>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default IconUpload\r\n","C:\\Users\\Ifyy\\Documents\\mandalorians\\app\\musicVisualizerApp\\client\\src\\Components\\IconInteractions\\InsertIcon.js",["75","76","77","78","79"],"import React from 'react'\r\nimport { Container, Row, Col, Image } from 'react-bootstrap'\r\nimport icon from '../Images/Daco.png'\r\n\r\n//Icon input\r\nconst InsertIcon = () => {\r\n  return (\r\n    <div className=\"iconWrapper\">\r\n      <img\r\n        style={{\r\n          width: '20%',\r\n          height: '20%',\r\n        }}\r\n        src={`${icon}`}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InsertIcon\r\n","C:\\Users\\Ifyy\\Documents\\mandalorians\\app\\musicVisualizerApp\\client\\src\\Components\\Signin\\TheForm.js",[],"C:\\Users\\Ifyy\\Documents\\mandalorians\\app\\musicVisualizerApp\\client\\src\\Components\\Login.js",["80","81"],{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":10,"column":10,"nodeType":"88","messageId":"89","endLine":10,"endColumn":15},{"ruleId":"90","severity":1,"message":"91","line":11,"column":7,"nodeType":"92","messageId":"93","endLine":13,"endColumn":10},{"ruleId":"86","severity":1,"message":"94","line":61,"column":17,"nodeType":"88","messageId":"89","endLine":61,"endColumn":25},{"ruleId":"86","severity":1,"message":"95","line":62,"column":20,"nodeType":"88","messageId":"89","endLine":62,"endColumn":31},{"ruleId":"86","severity":1,"message":"96","line":63,"column":18,"nodeType":"88","messageId":"89","endLine":63,"endColumn":27},{"ruleId":"86","severity":1,"message":"97","line":71,"column":10,"nodeType":"88","messageId":"89","endLine":71,"endColumn":19},{"ruleId":"86","severity":1,"message":"98","line":146,"column":27,"nodeType":"88","messageId":"89","endLine":146,"endColumn":32},{"ruleId":"86","severity":1,"message":"99","line":8,"column":10,"nodeType":"88","messageId":"89","endLine":8,"endColumn":18},{"ruleId":"86","severity":1,"message":"100","line":9,"column":10,"nodeType":"88","messageId":"89","endLine":9,"endColumn":22},{"ruleId":"86","severity":1,"message":"99","line":8,"column":10,"nodeType":"88","messageId":"89","endLine":8,"endColumn":18},{"ruleId":"86","severity":1,"message":"100","line":9,"column":10,"nodeType":"88","messageId":"89","endLine":9,"endColumn":22},{"ruleId":"86","severity":1,"message":"99","line":8,"column":10,"nodeType":"88","messageId":"89","endLine":8,"endColumn":18},{"ruleId":"86","severity":1,"message":"100","line":9,"column":10,"nodeType":"88","messageId":"89","endLine":9,"endColumn":22},{"ruleId":"86","severity":1,"message":"101","line":2,"column":10,"nodeType":"88","messageId":"89","endLine":2,"endColumn":19},{"ruleId":"86","severity":1,"message":"102","line":2,"column":21,"nodeType":"88","messageId":"89","endLine":2,"endColumn":24},{"ruleId":"86","severity":1,"message":"103","line":2,"column":26,"nodeType":"88","messageId":"89","endLine":2,"endColumn":29},{"ruleId":"86","severity":1,"message":"104","line":2,"column":31,"nodeType":"88","messageId":"89","endLine":2,"endColumn":36},{"ruleId":"105","severity":1,"message":"106","line":9,"column":7,"nodeType":"107","endLine":15,"endColumn":9},{"ruleId":"86","severity":1,"message":"108","line":2,"column":8,"nodeType":"88","messageId":"89","endLine":2,"endColumn":13},{"ruleId":"86","severity":1,"message":"87","line":9,"column":10,"nodeType":"88","messageId":"89","endLine":9,"endColumn":15},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"no-unused-vars","'route' is assigned a value but never used.","Identifier","unusedVar","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","'setAudio' is assigned a value but never used.","'setSongList' is assigned a value but never used.","'setCanvas' is assigned a value but never used.","'textColor' is assigned a value but never used.","'color' is assigned a value but never used.","'filename' is assigned a value but never used.","'uploadedFile' is assigned a value but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Image' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Modal' is defined but never used.","no-global-assign","no-unsafe-negation"]