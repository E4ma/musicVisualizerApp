[{"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\index.js":"1","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\App.js":"2","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\TemplatesPage.js":"3","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Navbars\\Navigation.js":"4","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Home.js":"5","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\About.js":"6","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Displayer.js":"7","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\FileUpload.js":"8","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\Playlist.js":"9","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\InsertIcon.js":"10"},{"size":404,"mtime":1611804724730,"results":"11","hashOfConfig":"12"},{"size":1238,"mtime":1612845120388,"results":"13","hashOfConfig":"12"},{"size":207,"mtime":1611177150255,"results":"14","hashOfConfig":"12"},{"size":6172,"mtime":1613063571352,"results":"15","hashOfConfig":"12"},{"size":3921,"mtime":1612998643455,"results":"16","hashOfConfig":"12"},{"size":1248,"mtime":1611804724707,"results":"17","hashOfConfig":"12"},{"size":6269,"mtime":1612845120389,"results":"18","hashOfConfig":"12"},{"size":6183,"mtime":1612982233655,"results":"19","hashOfConfig":"12"},{"size":895,"mtime":1612982232083,"results":"20","hashOfConfig":"12"},{"size":399,"mtime":1612982232082,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"mpxc4k",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"24"},"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\index.js",[],["48","49"],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\App.js",["50"],"import React, { useState } from 'react'\r\nimport './App.css'\r\nimport Navigation from './Components/Navbars/Navigation'\r\nimport About from './Components/About'\r\nimport TemplatesPage from './Components/TemplatesPage'\r\nimport Home from './Components/Home'\r\n\r\nconst App = () => {\r\n  const [route, setRoute] = useState('signout')\r\n  const [isSignedIn, setIsSignedIn] = useState(false)\r\n  const [displayPage, setDisplayPage] = useState(Home)\r\n\r\n  if (isSignedIn === 'signout') {\r\n    setIsSignedIn(false)\r\n  } else if (isSignedIn === 'signin') {\r\n    setIsSignedIn(true)\r\n  }\r\n\r\n  const onRouteChange = (route) => {\r\n    if (route === 'signout') {\r\n      setRoute({ isSignedIn: false })\r\n    } else if (route === 'signin') {\r\n      setRoute({ isSignedIn: true })\r\n    } else if (route === 'Home') {\r\n      setDisplayPage(<Home />)\r\n    } else if (route === 'About') {\r\n      setDisplayPage(<About />)\r\n    } else if (route === 'TemplatesPage') {\r\n      setDisplayPage(<TemplatesPage />)\r\n    }\r\n    setRoute({ route: route })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"Frontscr\">\r\n        <Navigation isSignedIn={setIsSignedIn} onRouteChange={onRouteChange} />\r\n        {displayPage}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\TemplatesPage.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Navbars\\Navigation.js",["51","52"],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Home.js",["53","54","55"],"import React from 'react'\r\n\r\nimport { Card, Row, Col, Nav, Button, ButtonGroup } from 'react-bootstrap'\r\nimport Tab from 'react-bootstrap/Tab'\r\nimport Displayer from './Displayer'\r\nimport FileUpload from './MediaInteractions/FileUpload'\r\nimport InsertIcon from './MediaInteractions/InsertIcon'\r\nimport Playlist from './MediaInteractions/Playlist'\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div>\r\n      <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\r\n        <Row>\r\n          <Col md={2}>\r\n            <Nav\r\n              variant=\"pills\"\r\n              className=\"flex-column textbold\"\r\n              bg=\"transparent\"\r\n              style={{ fontWeight: 'bold' }} >\r\n              <br />\r\n              <br />\r\n\r\n              {/*------ Audio -----*/}\r\n              <Nav.Item >\r\n                <Nav.Link eventKey=\"uploadAudio\" style={{ borderRadius: '22px', backgroundColor: 'transparent' }} >\r\n                  <button className='btn1'>Audio</button>\r\n                </Nav.Link>\r\n              </Nav.Item>\r\n              <br />\r\n              <br />\r\n\r\n              {/*------ Background -----*/}\r\n              <Nav.Item>\r\n                <Nav.Link eventKey=\"uploadBackground\" style={{ borderRadius: '22px', backgroundColor: 'transparent' }} >\r\n                  <button className='btn1'>Background</button>\r\n                </Nav.Link>\r\n              </Nav.Item>\r\n              <br />\r\n              <br />\r\n\r\n\r\n              {/*------ Icon -----*/}\r\n              <Nav.Item>\r\n                <Nav.Link eventKey=\"uploadIcon\" style={{ borderRadius: '22px', backgroundColor: 'transparent' }} >\r\n                  <button className='btn1'>Icon</button>\r\n                </Nav.Link>\r\n              </Nav.Item>\r\n              <br />\r\n              <br />\r\n\r\n              {/*------ Text -----*/}\r\n              <Nav.Item>\r\n                <Nav.Link eventKey=\"home\" style={{ borderRadius: '22px', backgroundColor: 'transparent' }} >\r\n                  <button className='btn1'>Visualizer</button>\r\n                </Nav.Link>\r\n              </Nav.Item>\r\n\r\n              {/* <br />\r\n              <Nav.Item>\r\n                <Nav.Link eventKey=\"uploadBackground\">Background</Nav.Link>\r\n              </Nav.Item>\r\n              <br /> */}\r\n\r\n              {/* <Nav.Item>\r\n                <Nav.Link eventKey=\"uploadIcon\">Icon</Nav.Link>\r\n              </Nav.Item>\r\n              <br /> */}\r\n\r\n              {/* SN disabled the Text Upload for now.............. */}\r\n\r\n              {/* <Nav.Item>\r\n                <Nav.Link eventKey=\"text\">Visualizer Mode</Nav.Link>\r\n              </Nav.Item>\r\n              <br /> */}\r\n\r\n              {/* SN disabled the Export/Save for now............... */}\r\n              {/* <ButtonGroup aria-label=\"Basic example\">\r\n                <Button variant=\"secondary\">Export</Button>\r\n                <Button variant=\"secondary\">Save</Button>\r\n              </ButtonGroup> */}\r\n\r\n\r\n            </Nav>\r\n          </Col>\r\n\r\n          <Col md={'auto'}>\r\n            <Tab.Content>\r\n              <Tab.Pane eventKey=\"uploadAudio\" mediatype=\"audio\">\r\n                <FileUpload mediatype=\"Audio\" />\r\n              </Tab.Pane>\r\n              <Tab.Pane eventKey=\"uploadBackground\">\r\n                <FileUpload mediatype=\"Background\" filetype=\"image\" />\r\n              </Tab.Pane>\r\n              <Tab.Pane eventKey=\"uploadIcon\">\r\n                <FileUpload mediatype=\"Icon\" filetype=\"image\" />\r\n              </Tab.Pane>\r\n            </Tab.Content>\r\n          </Col>\r\n\r\n          {/* card for displaying the visualizer on the right panel*/}\r\n\r\n          <Col md xl={'auto'}>\r\n            <br />\r\n            <Card className=\"visualizer\">\r\n              <Card.Body>\r\n                <Displayer />\r\n                <InsertIcon />\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Tab.Container >\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Home\r\n","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\About.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Displayer.js",["56","57","58"],"import React, { createRef, useState, useEffect, useLayoutEffect } from 'react'\r\nimport axios from 'axios'\r\nimport background from './Images/background1.jpg'\r\n\r\nconst UpdateWindowSize = () => {\r\n  const [size, setSize] = useState([1000, 1000])\r\n  useLayoutEffect(() => {\r\n    const updateSize = () => {\r\n      setSize([window.innerWidth, window.innerHeight])\r\n    }\r\n    window.addEventListener('resize', updateSize)\r\n    return () => window.removeEventListener('resize', updateSize)\r\n  }, [])\r\n  return size\r\n}\r\n\r\nlet rafId\r\n\r\nlet ctx, x_end, y_end, bar_height\r\n\r\nconst bars = 600 //  max 1030 - leave it in 555\r\nconst bar_width = 2 //  good in 1\r\nconst radius = 0 // innercircle\r\nlet audio\r\nlet audioContext\r\nlet source\r\nlet analyser\r\nlet frequency_array\r\nconst createAudioContext = () => {\r\n  audio = new Audio()\r\n\r\n  audioContext = new (window.AudioContext || window.webkitAudioContext)()\r\n  source = audioContext.createMediaElementSource(audio)\r\n  analyser = audioContext.createAnalyser()\r\n  source.connect(analyser)\r\n  analyser.connect(audioContext.destination)\r\n  frequency_array = new Uint8Array(analyser.frequencyBinCount)\r\n}\r\n\r\nconst Displayer = () => {\r\n  const [width, height] = UpdateWindowSize()\r\n  const [canvas, setCanvas] = useState(createRef())\r\n  const [isPaused, setIsPaused] = useState(true)\r\n  const [songSelect, setsongSelect] = useState()\r\n  const [currentSong, setCurrentSong] = useState(0)\r\n  const center_x = width / 2\r\n  const center_y = height / 2\r\n\r\n  const getSong = async (song) => {\r\n    createAudioContext()\r\n    const response = await axios.get(\r\n      `http://localhost:5000/upload/media/${song}`,\r\n      { responseType: 'blob' },\r\n    )\r\n    audio.src = URL.createObjectURL(response.data)\r\n    audio.load()\r\n    // audio.play()\r\n  }\r\n  function animationLooper(canvas) {\r\n    canvas.width = width\r\n    canvas.height = height\r\n    ctx = canvas.getContext('2d')\r\n    for (let i = 0; i < bars; i++) {\r\n      //divide a circle into equal part\r\n      const rads = (Math.PI * 2) / bars\r\n      // Math is magical - you can make lots of visualizer\r\n      // this 4.5 decides the canves size\r\n      bar_height = frequency_array[i] * 2.5\r\n      const x = center_x + Math.cos(rads * i) * radius\r\n      const y = center_y + Math.sin(rads * i) * radius\r\n      x_end = center_x + Math.cos(rads * i) * (radius + bar_height)\r\n      y_end = center_y + Math.sin(rads * i) * (radius + bar_height)\r\n      //draw a bar\r\n      drawBar(x, y, x_end, y_end, i, ctx, canvas)\r\n    }\r\n  }\r\n  function drawBar(x1 = 0, y1 = 0, x2 = 0, y2 = 0, i, ctx) {\r\n    i = (i + new Date().getTime() * 2) % 600 //  2 is an OK number,  600/6 =100 integer is good\r\n    const gradient = ctx.createLinearGradient(x1, y1, x2, y2)\r\n    gradient.addColorStop(0, 'rgba(0, 255, 0, 255)')\r\n    gradient.addColorStop(1, 'rgba(254, 0, 0, 255)')\r\n    ctx.fillStyle = 'pink'\r\n    let lineColor\r\n    if (i < 100) {\r\n      // lineColor = \"red\"\r\n      lineColor =\r\n        'rgb(' +\r\n        Math.abs(275 - i) +\r\n        ', ' +\r\n        Math.abs(175 - i / 2) +\r\n        ', ' +\r\n        1000 +\r\n        ')'\r\n    } else if (i < 200) {\r\n      // lineColor=\"blue\"\r\n      lineColor =\r\n        'rgb(' +\r\n        1000 +\r\n        ', ' +\r\n        Math.abs(275 - i) +\r\n        ', ' +\r\n        Math.abs(175 - i / 2) +\r\n        ')'\r\n    } else if (i < 300) {\r\n      // lineColor=\"green\"\r\n      lineColor =\r\n        'rgb(' +\r\n        Math.abs(175 - i / 2) +\r\n        ', ' +\r\n        1000 +\r\n        ', ' +\r\n        Math.abs(275 - i) +\r\n        ')'\r\n    } else if (i < 400) {\r\n      // lineColor = \"red\"\r\n      lineColor =\r\n        'rgb(' +\r\n        Math.abs(175 - i / 2) +\r\n        ', ' +\r\n        1000 +\r\n        ', ' +\r\n        Math.abs(275 - i) +\r\n        ')'\r\n    } else if (i < 500) {\r\n      // lineColor=\"blue\"\r\n      lineColor =\r\n        'rgb(' +\r\n        1000 +\r\n        ', ' +\r\n        Math.abs(275 - i) +\r\n        ', ' +\r\n        Math.abs(175 - i / 2) +\r\n        ')'\r\n    } else if (i < 600) {\r\n      // lineColor=\"green\"\r\n      lineColor =\r\n        'rgb(' +\r\n        Math.abs(275 - i) +\r\n        ', ' +\r\n        Math.abs(175 - i / 2) +\r\n        ', ' +\r\n        1000 +\r\n        ')'\r\n    }\r\n\r\n    ctx.strokeStyle = lineColor\r\n    ctx.lineWidth = bar_width\r\n    ctx.beginPath()\r\n    ctx.moveTo(x1, y1)\r\n    ctx.lineTo(x2, y2)\r\n    ctx.stroke()\r\n  }\r\n\r\n  const togglePlay = () => {\r\n    // createAudioContext()\r\n    if (audio.paused) {\r\n      audioContext.resume()\r\n      audio.play()\r\n      setIsPaused(false)\r\n      rafId = requestAnimationFrame(tick)\r\n    } else {\r\n      audio.pause()\r\n      setIsPaused(true)\r\n      cancelAnimationFrame(rafId)\r\n    }\r\n  }\r\n\r\n  function tick() {\r\n    animationLooper(canvas.current)\r\n    analyser.getByteTimeDomainData(frequency_array)\r\n    rafId = requestAnimationFrame(tick)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const getSongList = async () => {\r\n      let res = await axios.get('http://localhost:5000/upload/list')\r\n      setsongSelect(res.data)\r\n      console.log(setsongSelect)\r\n    }\r\n    getSongList()\r\n  }, [])\r\n\r\n  return (\r\n    <div\r\n      className=\"audioControlBackground\"\r\n      style={{ backgroundImage: `url(${background})` }}\r\n    >\r\n      <div className=\"buttonWrapper\">\r\n        <button\r\n          onClick={() => {\r\n            if (audio) {\r\n              togglePlay()\r\n            }\r\n          }}\r\n          style={{\r\n            width: '200px',\r\n            backgroundColor: isPaused\r\n              ? // this is the play/pause button colors\r\n                'yellow'\r\n              : 'green',\r\n          }}\r\n        >\r\n          {isPaused ? 'Play' : 'Pause'}\r\n        </button>\r\n\r\n        <select\r\n          onChange={(e) => {\r\n            getSong(e.target.value)\r\n          }}\r\n        >\r\n          {' '}\r\n          <option>Choose A Song</option>\r\n          {songSelect &&\r\n            songSelect.map((song) => {\r\n              return <option value={song}>{song}</option>\r\n            })}\r\n        </select>\r\n      </div>\r\n      <div className=\"songInfoWrapper\">\r\n        {/* Inserted by SN */}\r\n\r\n        {/* Removed by SN */}\r\n        {/* < h3 style={{ color: textColor }}>{songName}</h3> */}\r\n      </div>\r\n      <div className=\"canvasWrapper\">\r\n        <canvas ref={canvas} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Displayer\r\n","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\FileUpload.js",["59","60","61","62","63"],"import React, { useState } from 'react'\r\nimport axios from 'axios'\r\nimport { Card } from 'react-bootstrap'\r\nimport Playlist from './Playlist'\r\n\r\nconst FileUpload = (props) => {\r\n  //Need to use a hook to set text in the label to the file namespace\r\n  const [file, setFile] = useState('')\r\n  const [filename, setFilename] = useState('Choose File')\r\n  const [uploadedFile, setUploadedFile] = useState({})\r\n  const [currentUser, setCurrentUser] = useState('USR------1')\r\n\r\n  console.log('USER.....:', currentUser);\r\n\r\n  const onChange = (e) => {\r\n    //HTML file uploads come as an array so we want the index of the first file\r\n    setFile(e.target.files[0])\r\n    setFilename(e.target.files[0].name)\r\n  }\r\n\r\n  const onSubmit = async (e) => {\r\n    // e.preventDefault() used to prevent submitting by accident by preventing normal submitting\r\n    e.preventDefault()\r\n    const formData = new FormData()\r\n    formData.append('file', file)\r\n\r\n    try {\r\n      //Need to connect to the server the endpoint is media\r\n      // const res = await axios({\r\n      //   method: 'post',\r\n      //   url: 'http://localhost:5000/upload/media',\r\n      //   body: {\r\n      //     formData,\r\n      //     headers: { 'Content-Type': 'multipart/form-data' },\r\n      //     // body: currentUser\r\n      //   }\r\n      // }\r\n      // )\r\n      const res = await axios.post(\r\n        'http://localhost:5000/upload/media',\r\n        formData,\r\n        {\r\n          headers: { 'Content-Type': 'multipart/form-data' },\r\n        },\r\n      )\r\n      const { fileName, filePath } = res.data\r\n      console.log(res.headers)\r\n      if (res.status === 200) {\r\n        console.log('Was uploaded successfully ' + res.status)\r\n      }\r\n      setUploadedFile({ fileName, filePath })\r\n    } catch (err) {\r\n      if (err.response.status === 500) {\r\n        console.error('There is a problem with the server ' + err.message)\r\n      } else {\r\n        //This message is from the server if no file is uploaded\r\n        // console.error('we had an error??? ' + err.response.data.msg)\r\n        console.error(err.response.data.msg)\r\n      }\r\n    }\r\n\r\n  }\r\n  // If the audio button is selected\r\n  if (props.mediatype == 'Audio') {\r\n    return (\r\n      <Card style={{ width: '16rem', margin: '16px' }}>\r\n        <Card.Body>\r\n          <Card.Title>{props.mediatype} Upload</Card.Title>\r\n          <Card.Subtitle className=\"mb-2 text-muted\">\r\n            Select {props.mediatype} to Upload\r\n          </Card.Subtitle>\r\n          <Card.Text>\r\n            <>\r\n              <div className=\"mb-2\">\r\n                <form onSubmit={onSubmit}>\r\n                  <div className=\"input-group mb-3\">\r\n                    <input\r\n                      type=\"file\"\r\n                      className=\"form-control mb-5\"\r\n                      id=\"inputGroupFile02\"\r\n                      accept={`${props.mediatype}/wav, ${props.mediatype}/mp3, ${props.mediatype}/mpeg`}\r\n                      onChange={onChange}\r\n                    />\r\n                    <input\r\n                      type=\"submit\"\r\n                      value={`Upload ${props.mediatype}`}\r\n                      className=\"btn btn-primary btn-block\"\r\n                    />\r\n\r\n                    <label\r\n                      className=\"id=inputGroupFile02\"\r\n                      htmlFor=\"inputGroupFile02\"\r\n                    ></label>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </>\r\n          </Card.Text>\r\n        </Card.Body>\r\n        <Playlist />\r\n      </Card>\r\n    )\r\n  }\r\n  if (props.mediatype == 'Background') {\r\n    return (\r\n      <Card style={{ width: '16rem', margin: '16px' }}>\r\n        <Card.Body>\r\n          <Card.Title>{props.mediatype} Upload</Card.Title>\r\n          <Card.Subtitle className=\"mb-2 text-muted\">\r\n            Select {props.mediatype} to Upload\r\n          </Card.Subtitle>\r\n          <Card.Text>\r\n            <>\r\n              <div className=\"mb-2\">\r\n                <form onSubmit={onSubmit}>\r\n                  <div className=\"input-group mb-3\">\r\n                    <input\r\n                      type=\"file\"\r\n                      className=\"form-control mb-5\"\r\n                      id=\"inputGroupFile02\"\r\n                      accept={`${props.filetype}/jpg, ${props.filetype}/jpeg, ${props.filetype}/bmp`}\r\n                      onChange={onChange}\r\n                    />\r\n                    <input\r\n                      type=\"submit\"\r\n                      value={`Upload ${props.mediatype}`}\r\n                      className=\"btn btn-primary btn-block\"\r\n                    />\r\n\r\n                    <label\r\n                      className=\"id=inputGroupFile02\"\r\n                      htmlFor=\"inputGroupFile02\"\r\n                    ></label>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </>\r\n          </Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n    )\r\n  }\r\n  return (\r\n    <Card style={{ width: '16rem', margin: '16px' }}>\r\n      <Card.Body>\r\n        <Card.Title>{props.mediatype} Upload</Card.Title>\r\n        <Card.Subtitle className=\"mb-2 text-muted\">\r\n          Select {props.mediatype} to Upload\r\n        </Card.Subtitle>\r\n        <Card.Text>\r\n          <>\r\n            <div className=\"mb-2\">\r\n              <form onSubmit={onSubmit}>\r\n                <div className=\"input-group mb-3\">\r\n                  <input\r\n                    type=\"file\"\r\n                    className=\"form-control mb-5\"\r\n                    id=\"inputGroupFile02\"\r\n                    accept={`${props.filetype}/gif, ${props.filetype}/png, ${props.filetype}/jpg`}\r\n                    onChange={onChange}\r\n                  />\r\n                  <input\r\n                    type=\"submit\"\r\n                    value={`Upload ${props.mediatype}`}\r\n                    className=\"btn btn-primary btn-block\"\r\n                  />\r\n\r\n                  <label\r\n                    className=\"id=inputGroupFile02\"\r\n                    htmlFor=\"inputGroupFile02\"\r\n                  ></label>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </>\r\n        </Card.Text>\r\n      </Card.Body>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default FileUpload\r\n","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\Playlist.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\InsertIcon.js",["64"],"import React from 'react'\r\n// import { Container, Row, Col, Image } from 'react-bootstrap'\r\nimport icon from '../Images/Daco.png'\r\n\r\n//Icon input\r\nconst InsertIcon = () => {\r\n  return (\r\n    <div className=\"iconWrapper\">\r\n      <img\r\n        style={{\r\n          width: '20%',\r\n          height: '20%',\r\n        }}\r\n        src={`${icon}`}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InsertIcon\r\n",{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":9,"column":10,"nodeType":"71","messageId":"72","endLine":9,"endColumn":15},{"ruleId":"69","severity":1,"message":"73","line":2,"column":44,"nodeType":"71","messageId":"72","endLine":2,"endColumn":47},{"ruleId":"69","severity":1,"message":"74","line":2,"column":49,"nodeType":"71","messageId":"72","endLine":2,"endColumn":52},{"ruleId":"69","severity":1,"message":"75","line":3,"column":31,"nodeType":"71","messageId":"72","endLine":3,"endColumn":37},{"ruleId":"69","severity":1,"message":"76","line":3,"column":39,"nodeType":"71","messageId":"72","endLine":3,"endColumn":50},{"ruleId":"69","severity":1,"message":"77","line":8,"column":8,"nodeType":"71","messageId":"72","endLine":8,"endColumn":16},{"ruleId":"69","severity":1,"message":"78","line":42,"column":18,"nodeType":"71","messageId":"72","endLine":42,"endColumn":27},{"ruleId":"69","severity":1,"message":"79","line":45,"column":10,"nodeType":"71","messageId":"72","endLine":45,"endColumn":21},{"ruleId":"69","severity":1,"message":"80","line":45,"column":23,"nodeType":"71","messageId":"72","endLine":45,"endColumn":37},{"ruleId":"69","severity":1,"message":"81","line":9,"column":10,"nodeType":"71","messageId":"72","endLine":9,"endColumn":18},{"ruleId":"69","severity":1,"message":"82","line":10,"column":10,"nodeType":"71","messageId":"72","endLine":10,"endColumn":22},{"ruleId":"69","severity":1,"message":"83","line":11,"column":23,"nodeType":"71","messageId":"72","endLine":11,"endColumn":37},{"ruleId":"84","severity":1,"message":"85","line":64,"column":23,"nodeType":"86","messageId":"87","endLine":64,"endColumn":25},{"ruleId":"84","severity":1,"message":"85","line":104,"column":23,"nodeType":"86","messageId":"87","endLine":104,"endColumn":25},{"ruleId":"88","severity":1,"message":"89","line":9,"column":7,"nodeType":"90","endLine":15,"endColumn":9},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'route' is assigned a value but never used.","Identifier","unusedVar","'Row' is defined but never used.","'Col' is defined but never used.","'Button' is defined but never used.","'ButtonGroup' is defined but never used.","'Playlist' is defined but never used.","'setCanvas' is assigned a value but never used.","'currentSong' is assigned a value but never used.","'setCurrentSong' is assigned a value but never used.","'filename' is assigned a value but never used.","'uploadedFile' is assigned a value but never used.","'setCurrentUser' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]