[{"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\index.js":"1","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\App.js":"2","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\MyAccount.js":"3","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\Signup.js":"4","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\Login.js":"5","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\PrivateRoute.js":"6","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\ForgotPassword.js":"7","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\UpdateProfile.js":"8","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\contexts\\AuthContext.js":"9","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\About.js":"10","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\Home.js":"11","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\Navigation.js":"12","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\firebase.js":"13","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\FileUpload.js":"14","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\InsertIcon.js":"15","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\Displayer.js":"16","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\ImageList.js":"17","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\Playlist.js":"18","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\LandingNav.js":"19"},{"size":415,"mtime":1613162764780,"results":"20","hashOfConfig":"21"},{"size":2262,"mtime":1613674153796,"results":"22","hashOfConfig":"21"},{"size":1817,"mtime":1613674153803,"results":"23","hashOfConfig":"21"},{"size":2204,"mtime":1613674153806,"results":"24","hashOfConfig":"21"},{"size":1869,"mtime":1613674822968,"results":"25","hashOfConfig":"21"},{"size":606,"mtime":1613162764773,"results":"26","hashOfConfig":"21"},{"size":1708,"mtime":1613162764763,"results":"27","hashOfConfig":"21"},{"size":2726,"mtime":1613162764775,"results":"28","hashOfConfig":"21"},{"size":1535,"mtime":1613162764778,"results":"29","hashOfConfig":"21"},{"size":1428,"mtime":1613679438752,"results":"30","hashOfConfig":"21"},{"size":4216,"mtime":1613603479840,"results":"31","hashOfConfig":"21"},{"size":1669,"mtime":1613674153804,"results":"32","hashOfConfig":"21"},{"size":592,"mtime":1613162764779,"results":"33","hashOfConfig":"21"},{"size":8270,"mtime":1613674153801,"results":"34","hashOfConfig":"21"},{"size":399,"mtime":1613145530171,"results":"35","hashOfConfig":"21"},{"size":10738,"mtime":1613674153798,"results":"36","hashOfConfig":"21"},{"size":1667,"mtime":1613602341856,"results":"37","hashOfConfig":"21"},{"size":2189,"mtime":1613603479843,"results":"38","hashOfConfig":"21"},{"size":1048,"mtime":1613674153800,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"368z0z",{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"42"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"42"},"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\index.js",[],["89","90"],"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\App.js",["91","92"],"import React, { useState } from 'react'\r\nimport './App.css'\r\nimport Signup from './Signup'\r\nimport { Container } from 'react-bootstrap'\r\nimport { AuthProvider } from '../contexts/AuthContext'\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\n// import Navigation from './Navigation'\r\nimport About from './About'\r\n// import TemplatesPage from './TemplatesPage'\r\nimport Editor from './Home'\r\nimport Profile from './MyAccount'\r\nimport Login from './Login'\r\nimport PrivateRoute from './PrivateRoute'\r\nimport ForgotPassword from './ForgotPassword'\r\nimport UpdateProfile from './UpdateProfile'\r\n\r\n\r\n\r\n\r\nfunction App(){\r\n\r\n  return(\r\n \r\n    <div>\r\n    <Router>\r\n      <AuthProvider>\r\n        <Switch>\r\n          <Route path=\"/Login\" component={Login} />\r\n          <PrivateRoute exact path=\"/MyAccount\" component={Profile} />\r\n          <PrivateRoute exact path=\"/Home\" component={Editor} />\r\n          <PrivateRoute path=\"/update-profile\" component={UpdateProfile} />\r\n          <Route path=\"/signup\" component={Signup} />\r\n          <Route path=\"/\" component={About} />\r\n          <Route path=\"/forgot-password\" component={ForgotPassword} />\r\n        </Switch>\r\n      </AuthProvider>\r\n    </Router>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\n// const App = () => {\r\n//   \r\n//   // const [isSignedIn, setIsSignedIn] = useState(false)\r\n//   \r\n\r\n//   // if (isSignedIn === 'signout') {\r\n//   //   setIsSignedIn(false)\r\n//   // } else if (isSignedIn === 'signin') {\r\n//   //   setIsSignedIn(true)\r\n//   // }\r\n\r\n//   const onRouteChange = (route) => {\r\n//  if (route === 'Home') {\r\n//       setDisplayPage(<Home />)\r\n//     } else if (route === 'About') {\r\n//       setDisplayPage(<About />)\r\n//     } else if (route === 'TemplatesPage') {\r\n//       setDisplayPage(<TemplatesPage />)\r\n//     }\r\n//     setRoute({ route: route })\r\n//   }\r\n\r\n//   // if (route === 'signout') {\r\n//   //   setRoute({ isSignedIn: false })\r\n//   // } else if (route === 'signin') {\r\n//   //   setRoute({ isSignedIn: true })\r\n//   // } else\r\n\r\n//   return (\r\n//     <>\r\n//       <div className=\"Frontscr\">\r\n//         <Navigation  onRouteChange={onRouteChange} />\r\n//         {displayPage}\r\n//       </div>\r\n//     </>\r\n//   )\r\n// }\r\n\r\nexport default App\r\n\r\n// isSignedIn={setIsSignedIn}","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\MyAccount.js",["93"],"import React, { useState } from \"react\"\r\n  import { Card, Button, Alert } from \"react-bootstrap\"\r\n  import { useAuth } from \"../contexts/AuthContext\"\r\n  import { Link, useHistory } from \"react-router-dom\"\r\nimport Navigation from \"./Navigation\"\r\n  \r\n  export default function Dashboard() {\r\n    const styles = {\r\n        root: {\r\n            width: \"80%\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginBottom: \"105px\",\r\n            marginTop: \"105px\",\r\n            background: \"antiquewhite\",\r\n            padding: \"100px\",\r\n            fontSize: \"1.5rem\",\r\n            borderRadius: \"20px\",\r\n            backgroundColor: \"#357E85\"\r\n        },\r\n        labelText: {\r\n            fontFamily: \"Roboto\",\r\n            fontSize: \"2rem\",\r\n            color: \"#CCEBF4\",\r\n        }\r\n      }    \r\n    const [error, setError] = useState(\"\")\r\n    const { currentUser, logout } = useAuth()\r\n    const history = useHistory()\r\n  \r\n    async function handleLogout() {\r\n      setError(\"\")\r\n  \r\n      try {\r\n        await logout()\r\n        history.push(\"/login\")\r\n      } catch {\r\n        setError(\"Failed to log out\")\r\n      }\r\n    }\r\n  \r\n    return (\r\n<div>\r\n  <Navigation />\r\n<Card>\r\n          <Card.Body>\r\n            <h2 className=\"text-center mb-4\">Profile</h2>\r\n            {error && <Alert variant=\"danger\">{error}</Alert>}\r\n            <strong>Email:</strong> {currentUser.email}\r\n            <strong>Saved Visualizer:</strong>\r\n            <Link to=\"/update-profile\" className=\"btn btn-primary w-100 mt-3\">\r\n              Update Profile\r\n            </Link>\r\n          </Card.Body>\r\n        </Card>\r\n        <div className=\"w-100 text-center mt-2\">\r\n          <Button variant=\"link\" onClick={handleLogout}>\r\n            Sign Out\r\n          </Button>\r\n        </div>\r\n</div>\r\n    )\r\n  }","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\Signup.js",[],"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\Login.js",[],"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\PrivateRoute.js",[],"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\ForgotPassword.js",[],"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\UpdateProfile.js",[],"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\contexts\\AuthContext.js",[],"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\About.js",["94"],"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\Home.js",["95"],"import React, { useState } from 'react'\r\nimport { Card, Row, Col, Nav } from 'react-bootstrap'\r\nimport Tab from 'react-bootstrap/Tab'\r\nimport Displayer from './Displayer'\r\nimport FileUpload from './MediaInteractions/FileUpload'\r\nimport InsertIcon from './MediaInteractions/InsertIcon'\r\nimport Navigation from './Navigation'\r\n// import Playlist from './MediaInteractions/Playlist'\r\n\r\nconst Home = () => {\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Navigation />\r\n      <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\r\n        <Row>\r\n          <Col md={2}>\r\n            <Nav\r\n              variant=\"pills\"\r\n              className=\"flex-column textbold\"\r\n              bg=\"transparent\"\r\n              style={{ fontWeight: 'bold' }}\r\n            >\r\n              <br />\r\n              <br />\r\n\r\n                     {/*------ Audio -----*/}\r\n                     <Nav.Item>\r\n                        <Nav.Link\r\n                           eventKey=\"uploadAudio\"\r\n                           style={{\r\n                              borderRadius: '22px',\r\n                              backgroundColor: 'transparent',\r\n                           }}\r\n                        >\r\n                           <button className=\"btn1\">Audio</button>\r\n                        </Nav.Link>\r\n                     </Nav.Item>\r\n                     <br />\r\n                     <br />\r\n\r\n                     {/*------ Background -----*/}\r\n                     <Nav.Item>\r\n                        <Nav.Link\r\n                           eventKey=\"uploadBackground\"\r\n                           style={{\r\n                              borderRadius: '22px',\r\n                              backgroundColor: 'transparent',\r\n                           }}\r\n                        >\r\n                           <button className=\"btn1\">Background</button>\r\n                        </Nav.Link>\r\n                     </Nav.Item>\r\n                     <br />\r\n                     <br />\r\n\r\n                     {/*------ Icon -----*/}\r\n                     <Nav.Item>\r\n                        <Nav.Link\r\n                           eventKey=\"uploadIcon\"\r\n                           style={{\r\n                              borderRadius: '22px',\r\n                              backgroundColor: 'transparent',\r\n                           }}\r\n                        >\r\n                           <button className=\"btn1\">Icon</button>\r\n                        </Nav.Link>\r\n                     </Nav.Item>\r\n                     <br />\r\n                     <br />\r\n\r\n                     {/*------ Text -----*/}\r\n                     <Nav.Item>\r\n                        <Nav.Link\r\n                           eventKey=\"home\"\r\n                           style={{\r\n                              borderRadius: '22px',\r\n                              backgroundColor: 'transparent',\r\n                           }}\r\n                        >\r\n                           <button className=\"btn1\">Visualizer</button>\r\n                        </Nav.Link>\r\n                     </Nav.Item>\r\n                  </Nav>\r\n               </Col>\r\n\r\n               <Col md={'auto'}>\r\n                  <Tab.Content>\r\n                     <Tab.Pane eventKey=\"uploadAudio\" mediatype=\"audio\">\r\n                        <FileUpload mediatype=\"Audio\" />\r\n                     </Tab.Pane>\r\n                     <Tab.Pane eventKey=\"uploadBackground\">\r\n                        <FileUpload mediatype=\"Background\" filetype=\"image\" />\r\n                     </Tab.Pane>\r\n                     <Tab.Pane eventKey=\"uploadIcon\">\r\n                        <FileUpload mediatype=\"Icon\" filetype=\"image\" />\r\n                     </Tab.Pane>\r\n                  </Tab.Content>\r\n               </Col>\r\n\r\n               {/* card for displaying the visualizer on the right panel*/}\r\n\r\n               <Col md xl={'auto'}>\r\n                  <br />\r\n                  <Card className=\"visualizer\">\r\n                     <Card.Body>\r\n                        <Displayer />\r\n                        <InsertIcon />\r\n                     </Card.Body>\r\n                  </Card>\r\n               </Col>\r\n            </Row>\r\n         </Tab.Container>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Home","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\Navigation.js",["96","97"],"import React, { useState }  from 'react'\r\nimport { useAuth } from \"../contexts/AuthContext\"\r\nimport { Link, useHistory } from \"react-router-dom\"\r\nimport { Navbar, Nav, Container } from 'react-bootstrap'\r\nimport pic from './Images/logogrey.png'\r\n// import pic from './Logo1sn.png'\r\n\r\n\r\nconst Navigation = () => {\r\n\r\nconst [error, setError] = useState(\"\")\r\nconst { currentUser, logout } = useAuth()\r\nconst history = useHistory()\r\n\r\nasync function handleLogout() {\r\n  setError(\"\")\r\n\r\n  try {\r\n    await logout()\r\n    history.push(\"/login\")\r\n  } catch {\r\n    setError(\"Failed to log out\")\r\n  }\r\n}\r\n\r\n  //Navbar\r\n\r\n  return (\r\n    \r\n\r\n<Navbar style={{ backgroundColor: 'black' }} variant=\"dark\" expand=\"sm\" sticky=\"top\" className=\"justify-content-end\">\r\n        <Container id=\"nav-wrap\">\r\n        <Navbar.Brand href=\"/Login\">\r\n          {/* <img src={pic} alt={''} width={80} height={80} /> */}\r\n          <img \r\n          src={pic} \r\n          alt={''} \r\n          height={'30%'} \r\n          width={'30%'} \r\n          className=\"d-inline-block align-top\"/>\r\n        </Navbar.Brand>\r\n\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav>\r\n          <Nav.Item id=\"nav-item\"><Link to=\"/Home\" style={{ color: 'white' }}>Editor</Link></Nav.Item>\r\n          <Nav.Item id=\"nav-item\"><Link to=\"/MyAccount\" style={{ color: 'white' }}>Profile</Link></Nav.Item>\r\n          <Nav.Item id=\"nav-item\" onClick={handleLogout}><Link style={{ color: 'white' }} >Sign Out</Link></Nav.Item>\r\n\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n\r\n   \r\n  )\r\n}\r\n\r\nexport default Navigation","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\firebase.js",[],"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\FileUpload.js",["98","99","100","101","102"],"import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { Card } from 'react-bootstrap'\r\nimport Playlist from './Playlist'\r\nimport ImageList from './ImageList'\r\n\r\nconst FileUpload = (props) => {\r\n  //Need to use a hook to set text in the label to the file namespace\r\n  const [file, setFile] = useState('')\r\n  const [filename, setFilename] = useState('Choose File')\r\n  const [uploadedFile, setUploadedFile] = useState({})\r\n  const [currentUser, setCurrentUser] = useState('USR------1')\r\n  const [playlist, setPlaylist] = useState()\r\n  const [imagelist, setImagelist ] = useState([])\r\n  const [uploadedImage, setUploadedImage] = useState({})\r\n\r\n\tconst onChange = (e) => {\r\n\t\t//HTML file uploads come as an array so we want the index of the first file\r\n\t\tsetFile(e.target.files[0])\r\n\t\tsetFilename(e.target.files[0].name)\r\n\t}\r\n\r\n\tconst onSubmit = async (e) => {\r\n\t\t// e.preventDefault() used to prevent submitting by accident by preventing normal submitting\r\n\t\te.preventDefault()\r\n\r\n\t\tconst formData = new FormData()\r\n\t\tformData.append('file', file)\r\n\r\n\t\ttry {\r\n\t\t\tconst res = await axios.post(\r\n\t\t\t\t'http://localhost:5000/upload/media',\r\n\t\t\t\tformData,\r\n\t\t\t\t{\r\n\t\t\t\t\theaders: { 'Content-Type': 'multipart/form-data' },\r\n\t\t\t\t},\r\n\t\t\t)\r\n\t\t\tconst { fileName, filePath } = res.data\r\n\t\t\t// console.log('These are the headers', res.headers)\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tconsole.log('File was uploaded successfully ' + res.status)\r\n\t\t\t}\r\n\t\t\tsetUploadedFile({ fileName, filePath })\r\n\t\t} catch (err) {\r\n\t\t\tif (err.response.status === 500) {\r\n\t\t\t\tconsole.error('There is a problem with the server ' + err.message)\r\n\t\t\t} else {\r\n\t\t\t\t//This message is from the server if no file is uploaded\r\n\t\t\t\t// console.error('we had an error??? ' + err.response.data.msg)\r\n\t\t\t\tconsole.error(err.response.data.msg)\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\r\n    if (props.mediatype === 'Audio'){\r\n      try {\r\n        const res = await axios.post(\r\n          'http://localhost:5000/upload/media',\r\n          formData,\r\n          {\r\n            headers: { 'Content-Type': 'multipart/form-data' },\r\n          },\r\n        )\r\n        const { fileName, filePath } = res.data\r\n        console.log('These are the headers', res.headers)\r\n        if (res.status === 200) {\r\n          console.log('Was uploaded successfully ' + res.status)\r\n        }\r\n        setUploadedFile({ fileName, filePath })\r\n      } catch (err) {\r\n        if (err.response.status === 500) {\r\n          console.error('There is a problem with the server ' + err.message)\r\n        } else {\r\n          //This message is from the server if no file is uploaded\r\n          // console.error('we had an error??? ' + err.response.data.msg)\r\n          console.error(err.response.data.msg)\r\n        }\r\n      }\r\n    } \r\n     if (props.mediatype === 'Background'){\r\n        try {\r\n          const res = await axios.post(\r\n            'http://localhost:5000/upload/media',\r\n            formData,\r\n            {\r\n              headers: { 'Content-Type': 'multipart/form-data' },\r\n            },\r\n          )\r\n          const { fileName, filePath } = res.data\r\n          console.log('These are the headers', res.headers)\r\n          if (res.status === 200) {\r\n            console.log('image uploaded successfully ' + res.status)\r\n          }\r\n          setUploadedImage({ fileName, filePath })\r\n        } catch (err) {\r\n          if (err.response.status === 500) {\r\n            console.error('There is a problem with the server ' + err.message)\r\n          } else {\r\n            console.error(err.response.data.msg)\r\n          }\r\n        }\r\n      }\r\n  }\r\n  //get imagelist + send to imagelist component\r\n  const getImagelist = () => {\r\n    axios\r\n      .get('http://localhost:5000/upload/backgroundList')\r\n      .then((res) => {\r\n        console.log('this is the res', res.data)\r\n        return res.data\r\n      })\r\n      .then((imagelist) => {\r\n        setImagelist(imagelist)\r\n      })\r\n    }\r\n      useEffect(() => {\r\n        getImagelist()\r\n      }, [props.uploadedImage])\r\n\r\n \r\n\r\n  // Gets the playlist and sends to the Playlist Component\r\n\r\n\t// Gets the playlist and sends to the Playlist Component\r\n\tconst getPlaylist = () => {\r\n\t\taxios\r\n\t\t\t.get('http://localhost:5000/upload/list')\r\n\t\t\t.then((res) => {\r\n\t\t\t\t// console.log('this is the res', res)\r\n\t\t\t\treturn res.data\r\n\t\t\t})\r\n\t\t\t.then((playlist) => {\r\n\t\t\t\t// console.log('This is the playlist', playlist)\r\n\t\t\t\tsetPlaylist(playlist)\r\n\t\t\t})\r\n\t}\r\n\tuseEffect(() => {\r\n\t\tgetPlaylist()\r\n\t}, [uploadedFile])\r\n\r\n\t// If the audio button is selected\r\n\tif (props.mediatype === 'Audio') {\r\n\t\treturn (\r\n\t\t\t<Card style={{ width: '16rem', margin: '16px' }}>\r\n\t\t\t\t<Card.Body>\r\n\t\t\t\t\t<Card.Title>{props.mediatype} Upload</Card.Title>\r\n\t\t\t\t\t<Card.Subtitle className=\"mb-2 text-muted\">\r\n\t\t\t\t\t\tSelect {props.mediatype} to Upload\r\n          </Card.Subtitle>\r\n\t\t\t\t\t<Card.Text>\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<div className=\"mb-2\">\r\n\t\t\t\t\t\t\t\t<form onSubmit={onSubmit}>\r\n\t\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\r\n\t\t\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t\t\ttype=\"file\"\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control mb-5\"\r\n\t\t\t\t\t\t\t\t\t\t\tid=\"inputGroupFile02\"\r\n\t\t\t\t\t\t\t\t\t\t\taccept={`${props.mediatype}/wav, ${props.mediatype}/mp3, ${props.mediatype}/mpeg`}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\t\t\t\t\t\tvalue={`Submit`}\r\n\t\t\t\t\t\t\t\t\t\t\t// className=\"btn btn-primary btn-block\"\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"btn1\"\r\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => getPlaylist()}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t\t\t\t<label\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"id=inputGroupFile02\"\r\n\t\t\t\t\t\t\t\t\t\t\thtmlFor=\"inputGroupFile02\"\r\n\t\t\t\t\t\t\t\t\t\t></label>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t</Card.Text>\r\n\t\t\t\t</Card.Body>\r\n\t\t\t\t<Playlist uploadedFile={uploadedFile} />\r\n\t\t\t</Card>\r\n\t\t)\r\n\t}\r\n\tif (props.mediatype === 'Background') {\r\n\t\treturn (\r\n\t\t\t<Card style={{ width: '16rem', margin: '16px' }}>\r\n\t\t\t\t<Card.Body>\r\n\t\t\t\t\t<Card.Title>{props.mediatype} Upload</Card.Title>\r\n\t\t\t\t\t<Card.Subtitle className=\"mb-2 text-muted\">\r\n\t\t\t\t\t\tSelect {props.mediatype} to Upload\r\n          </Card.Subtitle>\r\n          <Card.Text>\r\n            <>\r\n              <div className=\"mb-2\">\r\n                <form onSubmit={onSubmit}>\r\n                  <div className=\"input-group mb-3\">\r\n                    <input\r\n                      type=\"file\"\r\n                      className=\"form-control mb-5\"\r\n                      id=\"inputGroupFile02\"\r\n                      accept={`${props.filetype}/jpg, ${props.filetype}/jpeg, ${props.filetype}/bmp`}\r\n                      onChange={onChange}\r\n                    />\r\n                    <input\r\n                      type=\"submit\"\r\n                      value={`Submit`}\r\n                      // className=\"btn btn-primary btn-block\"\r\n                      className=\"btn1\"\r\n                      onClick={() => getImagelist()}\r\n                    />\r\n\r\n                    <label\r\n                      className=\"id=inputGroupFile02\"\r\n                      htmlFor=\"inputGroupFile02\"\r\n                    ></label>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </>\r\n          </Card.Text>\r\n        </Card.Body>\r\n        <ImageList uploadedImage={uploadedImage} />\r\n      </Card>\r\n    )\r\n  }\r\n  return (\r\n    <Card style={{ width: '16rem', margin: '16px' }}>\r\n      <Card.Body>\r\n        <Card.Title>{props.mediatype} Upload</Card.Title>\r\n        <Card.Subtitle className=\"mb-2 text-muted\">\r\n          Select {props.mediatype} to Upload\r\n        </Card.Subtitle>\r\n\t\t\t\t<Card.Text>\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<div className=\"mb-2\">\r\n\t\t\t\t\t\t\t<form onSubmit={onSubmit}>\r\n\t\t\t\t\t\t\t\t<div className=\"input-group mb-3\">\r\n\t\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t\ttype=\"file\"\r\n\t\t\t\t\t\t\t\t\t\tclassName=\"form-control mb-5\"\r\n\t\t\t\t\t\t\t\t\t\tid=\"inputGroupFile02\"\r\n\t\t\t\t\t\t\t\t\t\taccept={`${props.filetype}/gif, ${props.filetype}/png, ${props.filetype}/jpg`}\r\n\t\t\t\t\t\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\t\t\t\t\tvalue={`Submit`}\r\n\t\t\t\t\t\t\t\t\t\t// className=\"btn btn-primary btn-block\"\r\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn1\"\r\n\t\t\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t\t\t<label\r\n\t\t\t\t\t\t\t\t\t\tclassName=\"id=inputGroupFile02\"\r\n\t\t\t\t\t\t\t\t\t\thtmlFor=\"inputGroupFile02\"\r\n\t\t\t\t\t\t\t\t\t></label>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</>\r\n\t\t\t\t</Card.Text>\r\n\t\t\t</Card.Body>\r\n\t\t</Card>\r\n\t)\r\n  }\r\n\r\nexport default FileUpload\r\n","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\InsertIcon.js",["103"],"import React from 'react'\r\n// import { Container, Row, Col, Image } from 'react-bootstrap'\r\nimport icon from '../Images/Daco.png'\r\n\r\n//Icon input\r\nconst InsertIcon = () => {\r\n  return (\r\n    <div className=\"iconWrapper\">\r\n      <img\r\n        style={{\r\n          width: '15%',\r\n          height: '15%',\r\n        }}\r\n        src={`${icon}`}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InsertIcon\r\n","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\Displayer.js",["104","105","106","107","108","109"],"import React, { createRef, useState, useEffect, useLayoutEffect } from 'react'\r\nimport axios from 'axios'\r\nimport background from './Images/background1.jpg'\r\nimport songList from './MediaInteractions/Playlist'\r\nimport pictureList from './MediaInteractions/ImageList'\r\n\r\nconst UpdateWindowSize = () => {\r\n  const [size, setSize] = useState([1000, 1000])\r\n  useLayoutEffect(() => {\r\n    const updateSize = () => {\r\n      setSize([window.innerWidth, window.innerHeight])\r\n    }\r\n    window.addEventListener('resize', updateSize)\r\n    return () => window.removeEventListener('resize', updateSize)\r\n  }, [])\r\n  return size\r\n}\r\n\r\nlet rafId\r\n\r\nlet ctx, x_end, y_end, bar_height\r\n\r\nconst bars = 900 //  max 1030 - leave it in 555\r\nconst bar_width = 2 //  good in 1\r\nconst radius = 0 // innercircle\r\nlet audio\r\nlet audioContext\r\nlet source\r\nlet analyser\r\nlet frequency_array\r\nconst createAudioContext = () => {\r\n  audio = new Audio()\r\n\r\n  audioContext = new (window.AudioContext || window.webkitAudioContext)()\r\n  source = audioContext.createMediaElementSource(audio)\r\n  analyser = audioContext.createAnalyser()\r\n  source.connect(analyser)\r\n  analyser.connect(audioContext.destination)\r\n  frequency_array = new Uint8Array(analyser.frequencyBinCount)\r\n}\r\n\r\nconst Displayer = (props) => {\r\n  const [width, height] = UpdateWindowSize()\r\n  const [canvas, setCanvas] = useState(createRef())\r\n  const [isPaused, setIsPaused] = useState(true)\r\n  const [songSelect, setsongSelect] = useState()\r\n  const [pictureSelect, setpictureSelect] = useState()\r\n  const [currentPicture, setCurrentPicture] = useState(-1)\r\n  const [backgroundUrl, setBackgroundUrl] = useState()\r\n  const [currentSong, setCurrentSong] = useState(-1)\r\n  const [sliderM, setSliderM] = useState(1)\r\n  const [sliderN, setSliderN] = useState(1)\r\n  const center_x = width / 2\r\n  const center_y = height / 2\r\n  useEffect(() => {\r\n    if (rafId) {\r\n      cancelAnimationFrame(rafId)\r\n      rafId = requestAnimationFrame(tick)\r\n    }\r\n  }, [sliderM, sliderN])\r\n\r\n  const getSong = async (song) => {\r\n    createAudioContext()\r\n    const response = await axios.get(\r\n      `http://localhost:5000/upload/media/${song}`,\r\n      { responseType: 'blob' },\r\n    )\r\n    //produces url for url\r\n    audio.src = URL.createObjectURL(response.data)\r\n    audio.load()\r\n    if (audio) {\r\n              togglePlay()\r\n            }\r\n    \r\n  }\r\n\r\n  let picture\r\n  const getPicture = async (picture) => {\r\n    \r\n    const response = await axios.get(\r\n      `http://localhost:5000/upload/image/${picture}`,\r\n      { responseType: 'blob' },\r\n    )\r\n    console.log(response.data)\r\n  setBackgroundUrl(URL.createObjectURL(response.data))\r\n    \r\n    // picture.load()\r\n    // let pictureURL = picture.src\r\n    \r\n  }\r\n\r\n  function animationLooper(canvas) {\r\n    canvas.width = width\r\n    canvas.height = height\r\n    ctx = canvas.getContext('2d')\r\n    for (let i = 0; i < bars; i++) {\r\n      //divide a circle into equal part\r\n      const rads = (Math.PI * 2) / bars\r\n      // Math is magical - you can make lots of visualizer\r\n      // this 4.5 decides the canves size\r\n      bar_height = frequency_array[i] * 2.5\r\n      const x = center_x + Math.cos(rads * i) * radius\r\n      const y = center_y + Math.sin(rads * i) * radius\r\n      x_end = center_x + Math.cos(rads * sliderN * i + (Math.PI / 640) * new Date()) * (radius + bar_height)\r\n      y_end =\r\n        center_y +\r\n        Math.sin(rads * sliderM * i + (Math.PI / 640) * new Date()) *\r\n          (radius + bar_height)\r\n      //draw a bar\r\n      // const x = bar_width / 2 + (i * window.innerWidth) / bars;\r\n      // const y = 900;\r\n      // const y_end = 800 - bar_height;\r\n      // const x_end = x;\r\n      drawBar(x, y, x_end, y_end, i, ctx, canvas)\r\n    }\r\n  }\r\n  function drawBar(x1 = 0, y1 = 0, x2 = 0, y2 = 0, i, ctx) {\r\n    i = (i + new Date().getTime() * 2) % 600 //  2 is an OK number,  600/6 =100 integer is good\r\n    const gradient = ctx.createLinearGradient(x1, y1, x2, y2)\r\n    gradient.addColorStop(0, 'rgba(0, 255, 0, 255)')\r\n    gradient.addColorStop(1, 'rgba(254, 0, 0, 255)')\r\n    ctx.fillStyle = 'pink'\r\n    let lineColor\r\n    if (i < 150) {\r\n      // lineColor = \"red\"\r\n      lineColor =\r\n        'rgb(' +\r\n        Math.abs(275 - i) +\r\n        ', ' +\r\n        Math.abs(175 - i / 2) +\r\n        ', ' +\r\n        1000 +\r\n        ')'\r\n    } else if (i < 300) {\r\n      // lineColor=\"blue\"\r\n      lineColor =\r\n        'rgb(' +\r\n        1000 +\r\n        ', ' +\r\n        Math.abs(275 - i) +\r\n        ', ' +\r\n        Math.abs(175 - i / 2) +\r\n        ')'\r\n    } else if (i < 450) {\r\n      // lineColor=\"green\"\r\n      lineColor =\r\n        'rgb(' +\r\n        Math.abs(175 - i / 2) +\r\n        ', ' +\r\n        1000 +\r\n        ', ' +\r\n        Math.abs(275 - i) +\r\n        ')'\r\n    } else if (i < 600) {\r\n      // lineColor = \"red\"\r\n      lineColor =\r\n        'rgb(' +\r\n        Math.abs(175 - i / 2) +\r\n        ', ' +\r\n        1000 +\r\n        ', ' +\r\n        Math.abs(275 - i) +\r\n        ')'\r\n    } else if (i < 750) {\r\n      // lineColor=\"blue\"\r\n      lineColor =\r\n        'rgb(' +\r\n        1000 +\r\n        ', ' +\r\n        Math.abs(275 - i) +\r\n        ', ' +\r\n        Math.abs(175 - i / 2) +\r\n        ')'\r\n    } else if (i < 900) {\r\n      // lineColor=\"green\"\r\n      lineColor =\r\n        'rgb(' +\r\n        Math.abs(275 - i) +\r\n        ', ' +\r\n        Math.abs(175 - i / 2) +\r\n        ', ' +\r\n        1000 +\r\n        ')'\r\n    }\r\n\r\n    ctx.strokeStyle = lineColor\r\n    ctx.lineWidth = bar_width\r\n    ctx.beginPath()\r\n    ctx.moveTo(x1, y1)\r\n    ctx.lineTo(x2, y2)\r\n    ctx.stroke()\r\n  }\r\n\r\n  //Plays Music\r\n  const togglePlay = () => {\r\n    // createAudioContext()\r\n    if (audio.paused) {\r\n      audioContext.resume()\r\n      audio.play()\r\n      setIsPaused(false)\r\n      rafId = requestAnimationFrame(tick)\r\n    } else {\r\n      audio.pause()\r\n      setIsPaused(true)\r\n      cancelAnimationFrame(rafId)\r\n    }\r\n  }\r\n\r\n  function tick() {\r\n    animationLooper(canvas.current)\r\n    analyser.getByteTimeDomainData(frequency_array)\r\n    rafId = requestAnimationFrame(tick)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const getSongList = async () => {\r\n      let res = await axios.get('http://localhost:5000/upload/list')\r\n      setsongSelect(res.data)\r\n      //console.log(setsongSelect)\r\n    }\r\n    getSongList()\r\n  },[])\r\n\r\n  //console.log('This is the songList that is being imported', songList)\r\n\r\n  useEffect(() => {\r\n    const getPictureList = async () => {\r\n      let res = await axios.get('http://localhost:5000/upload/backgroundList')\r\n      setpictureSelect(res.data)\r\n      //console.log(setsongSelect)\r\n    }\r\n    getPictureList()\r\n  },[])\r\n\r\n  return (\r\n    <div\r\n      className=\"audioControlBackground\"\r\n      style={{ backgroundImage: `url(${backgroundUrl})` }}\r\n    >\r\n      <div className=\"buttonWrapper\">\r\n      <button\r\n          onClick={() => {\r\n            if (audio && !isPaused) {\r\n              togglePlay()\r\n            }\r\n            if(currentSong === 0) {\r\n              setCurrentSong(curr => (songSelect.length - 1))\r\n              getSong(songSelect[(songSelect.length - 1)])\r\n            } else{\r\n            setCurrentSong(curr => (curr - 1)%(songSelect.length))\r\n           getSong(songSelect[(currentSong - 1)%(songSelect.length)])}\r\n          //  togglePlay()\r\n          }}\r\n        >\r\n          Previous\r\n        </button>\r\n\r\n\r\n\r\n        <button\r\n          onClick={() => {\r\n            if (audio) {\r\n              togglePlay()\r\n            }\r\n          }}\r\n          style={{\r\n            width: '150px',\r\n            backgroundColor: isPaused\r\n              ? // this is the play/pause button colors\r\n                'yellow'\r\n              : 'green',\r\n          }}\r\n        >\r\n          {isPaused ? 'Play' : 'Pause'}\r\n        </button>\r\n\r\n        {/* <button\r\n          onClick={() => {\r\n            if (audio && !isPaused) {\r\n              togglePlay()\r\n            }\r\n            if(currentSong === 0) {\r\n              setCurrentSong(curr => (songSelect.length - 1))\r\n              getSong(songSelect[(songSelect.length - 1)])\r\n            } else{\r\n            setCurrentSong(curr => (curr - 1)%(songSelect.length))\r\n           getSong(songSelect[(currentSong - 1)%(songSelect.length)])}\r\n          //  togglePlay()\r\n          }}\r\n        >\r\n          Previous\r\n        </button> */}\r\n\r\n        <button\r\n          onClick={() => {\r\n            if (audio && !isPaused) {\r\n              togglePlay()\r\n            }\r\n            setCurrentSong(curr => (curr + 1)%(songSelect.length))\r\n           getSong(songSelect[(currentSong + 1)%(songSelect.length)])\r\n          //  togglePlay()\r\n          }}\r\n        >\r\n          Next\r\n        </button>\r\n\r\n        {songSelect && \r\n        <select\r\n        value ={songSelect[currentSong]}\r\n          onChange={(e) => {\r\n            getSong(e.target.value)\r\n            setCurrentSong((e.target.selectedIndex - 1)%(songSelect.length))\r\n          }}\r\n        >\r\n          {' '}\r\n          <option>Choose A Song</option>\r\n          {songSelect &&\r\n            songSelect.map((song) => {\r\n              return <option value={song}>{song}</option>\r\n            })}\r\n        </select>}\r\n        {pictureSelect && \r\n        <select\r\n        value ={pictureSelect[currentPicture]}\r\n          onChange={(e) => {\r\n            getPicture(e.target.value)\r\n            setCurrentPicture((e.target.selectedIndex - 1)%(pictureSelect.length))\r\n          }}\r\n        >\r\n          {' '}\r\n          <option>Pick an Image</option>\r\n          {pictureSelect &&\r\n            pictureSelect.map((picture) => {\r\n              return <option value={picture}>{picture}</option>\r\n            })}\r\n        </select>}\r\n      </div>\r\n      <div className=\"songInfoWrapper\">\r\n        {/* Inserted by SN */}\r\n        {/* <div style={{ color: 'red' }}>{currentSong}</div> */}\r\n\r\n        {/* Removed by SN */}\r\n        {/* < h3 style={{ color: textColor }}>{songName}</h3> */}\r\n      </div>\r\n      <div className=\"canvasWrapper\">\r\n        {audio && audio.paused ? <canvas /> : <canvas ref={canvas} />}\r\n      </div>\r\n      <div className=\"sliders\">\r\n        {' '}\r\n        <div>{sliderM}</div>\r\n        <p>X</p>\r\n        <input\r\n          className=\"slider\"\r\n          type=\"range\"\r\n          min=\"0\"\r\n          max=\"8\"\r\n          step=\".1\"\r\n          onChange={(e) => {\r\n            setSliderM(e.target.value)\r\n          }}\r\n          value={sliderM}\r\n        />{' '}\r\n        <div>{sliderN}</div>\r\n        <p>Y</p>\r\n        <input\r\n          className=\"slider1\"\r\n          type=\"range\"\r\n          min=\"0\"\r\n          max=\"8\"\r\n          step=\".1\"\r\n          onChange={(e) => {\r\n            setSliderN(e.target.value)\r\n          }}\r\n          value={sliderN}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Displayer","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\ImageList.js",["110"],"import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { Card } from 'react-bootstrap'\r\n\r\n\r\n\r\nconst ImageList = (props) => {\r\n  const [imagelist, setImagelist] = useState([])\r\n\r\n  const getImage = async (image) => {\r\n    console.log('This is in getImage', image)\r\n    let picture\r\n    const response = await axios.request({\r\n      url: `http://localhost:5000/upload/media/${image}`,\r\n      responseType: 'blob',\r\n      method: 'GET',\r\n    })\r\n    picture.src = URL.createObjectURL(response.data)\r\n    picture.load()\r\n  }\r\n\r\n  const getPictureList = async () => {\r\n    let res = await axios.get('http://localhost:5000/upload/backgroundList')\r\n    const data = res.data\r\n    console.log('This is data', data)\r\n\r\n    setImagelist(data)\r\n    console.log('This is the list of background images', imagelist)\r\n  }\r\n  useEffect(() => {\r\n    getPictureList()\r\n  }, [props.uploadedImage])\r\n\r\n  return (\r\n    <>\r\n      <br />\r\n      <Card.Body className=\"playlistTab\">\r\n        <Card.Title>Backgrounds</Card.Title>\r\n        <Card.Text className=\"tabScroll\">\r\n          <div>\r\n            <ul\r\n              onClick={(event) => {\r\n                getImage(event.target.firstChild.data)\r\n              }}\r\n            >\r\n              {imagelist?.map((picture, index) => {\r\n                console.log('This is the picture with index', picture, index)\r\n                return (\r\n                  <li key={index} value={picture}>\r\n                    {picture}\r\n                  </li>\r\n                )\r\n              })}\r\n            </ul>\r\n          </div>\r\n        </Card.Text>\r\n      </Card.Body>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ImageList\r\n","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\Playlist.js",["111","112"],"import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { Card } from 'react-bootstrap'\r\n\r\nlet audio\r\nlet audioContext\r\nlet source\r\nlet analyser\r\nlet frequency_array\r\nconst createAudioContext = () => {\r\n  audio = new Audio()\r\n\r\n  audioContext = new (window.AudioContext || window.webkitAudioContext)()\r\n  source = audioContext.createMediaElementSource(audio)\r\n  analyser = audioContext.createAnalyser()\r\n  source.connect(analyser)\r\n  analyser.connect(audioContext.destination)\r\n  frequency_array = new Uint8Array(analyser.frequencyBinCount)\r\n}\r\n\r\nconst Playlist = (props) => {\r\n  const [playlist, setPlaylist] = useState([])\r\n\r\n  const getSong = async (song) => {\r\n    console.log('This is in getSong', song)\r\n    createAudioContext()\r\n    const response = await axios.request({\r\n      url: `http://localhost:5000/upload/media/${song}`,\r\n      responseType: 'blob',\r\n      method: 'GET',\r\n    })\r\n    audio.src = URL.createObjectURL(response.data)\r\n    // console.log('audio.src', audio.src)\r\n    audio.load()\r\n    // audio.play()\r\n  }\r\n\r\n  const getSongList = async () => {\r\n    let res = await axios.get('http://localhost:5000/upload/list')\r\n    const data = res.data\r\n    console.log('This is data', data)\r\n\r\n    setPlaylist(data)\r\n    console.log('This is the playlist', playlist)\r\n  }\r\n  // console.log(uploadedFile)\r\n  //Returns a list of files saved\r\n  useEffect(() => {\r\n    getSongList()\r\n  }, [props.uploadedFile])\r\n  return (\r\n    <>\r\n      <br />\r\n      <Card.Body className=\"playlistTab\">\r\n        <Card.Title>Playlist</Card.Title>\r\n        <Card.Text className=\"tabScroll\">\r\n          <div>\r\n            <ul\r\n              onClick={(event) => {\r\n                getSong(event.target.firstChild.data)\r\n              }}\r\n            >\r\n              {playlist?.map((song, index) => {\r\n                console.log('This is the song with index', song, index)\r\n                return (\r\n                  <li key={index} value={song}>\r\n                    {song}\r\n                  </li>\r\n                )\r\n              })}\r\n            </ul>\r\n          </div>\r\n        </Card.Text>\r\n      </Card.Body>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Playlist\r\n","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\LandingNav.js",["113"],"import React from 'react'\r\nimport { Link} from \"react-router-dom\"\r\nimport { Navbar, Nav, Container, Button } from 'react-bootstrap'\r\nimport pic from './Images/logogrey-bird.png'\r\n// import pic from './Logo1sn.png'\r\n\r\n\r\nconst LandingNav = () => {\r\n\r\n\r\n  return (\r\n    \r\n\r\n<Navbar style={{ backgroundColor: 'black' }} variant=\"dark\" expand=\"sm\" >\r\n        <Container>\r\n        <Navbar.Brand href=\"/About\">\r\n          {/* <img src={pic} alt={''} width={80} height={80} /> */}\r\n          <img \r\n          src={pic} \r\n          alt={''} \r\n          height={'40'} \r\n          width={'45'} \r\n          className=\"d-inline-block\"/>{' '}HUMMINGBIRD\r\n        </Navbar.Brand>\r\n\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse className=\"justify-content-end\" id=\"basic-navbar-nav\" >\r\n          <Nav fill >\r\n\r\n          <Nav.Item><Link to=\"/Login\" className=\"navBtn\">Sign In</Link></Nav.Item>\r\n\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n\r\n   \r\n  )\r\n}\r\n\r\nexport default LandingNav",{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":1,"column":17,"nodeType":"120","messageId":"121","endLine":1,"endColumn":25},{"ruleId":"118","severity":1,"message":"122","line":4,"column":10,"nodeType":"120","messageId":"121","endLine":4,"endColumn":19},{"ruleId":"118","severity":1,"message":"123","line":8,"column":11,"nodeType":"120","messageId":"121","endLine":8,"endColumn":17},{"ruleId":"118","severity":1,"message":"124","line":8,"column":8,"nodeType":"120","messageId":"121","endLine":8,"endColumn":12},{"ruleId":"118","severity":1,"message":"119","line":1,"column":17,"nodeType":"120","messageId":"121","endLine":1,"endColumn":25},{"ruleId":"118","severity":1,"message":"125","line":11,"column":8,"nodeType":"120","messageId":"121","endLine":11,"endColumn":13},{"ruleId":"118","severity":1,"message":"126","line":12,"column":9,"nodeType":"120","messageId":"121","endLine":12,"endColumn":20},{"ruleId":"118","severity":1,"message":"127","line":10,"column":10,"nodeType":"120","messageId":"121","endLine":10,"endColumn":18},{"ruleId":"118","severity":1,"message":"126","line":12,"column":10,"nodeType":"120","messageId":"121","endLine":12,"endColumn":21},{"ruleId":"118","severity":1,"message":"128","line":12,"column":23,"nodeType":"120","messageId":"121","endLine":12,"endColumn":37},{"ruleId":"118","severity":1,"message":"129","line":13,"column":10,"nodeType":"120","messageId":"121","endLine":13,"endColumn":18},{"ruleId":"118","severity":1,"message":"130","line":14,"column":10,"nodeType":"120","messageId":"121","endLine":14,"endColumn":19},{"ruleId":"131","severity":1,"message":"132","line":9,"column":7,"nodeType":"133","endLine":15,"endColumn":9},{"ruleId":"118","severity":1,"message":"134","line":3,"column":8,"nodeType":"120","messageId":"121","endLine":3,"endColumn":18},{"ruleId":"118","severity":1,"message":"135","line":4,"column":8,"nodeType":"120","messageId":"121","endLine":4,"endColumn":16},{"ruleId":"118","severity":1,"message":"136","line":5,"column":8,"nodeType":"120","messageId":"121","endLine":5,"endColumn":19},{"ruleId":"118","severity":1,"message":"137","line":44,"column":18,"nodeType":"120","messageId":"121","endLine":44,"endColumn":27},{"ruleId":"138","severity":1,"message":"139","line":60,"column":6,"nodeType":"140","endLine":60,"endColumn":24,"suggestions":"141"},{"ruleId":"118","severity":1,"message":"142","line":77,"column":7,"nodeType":"120","messageId":"121","endLine":77,"endColumn":14},{"ruleId":"138","severity":1,"message":"143","line":32,"column":6,"nodeType":"140","endLine":32,"endColumn":27,"suggestions":"144"},{"ruleId":"118","severity":1,"message":"145","line":18,"column":3,"nodeType":"120","messageId":"121","endLine":18,"endColumn":18},{"ruleId":"138","severity":1,"message":"146","line":50,"column":6,"nodeType":"140","endLine":50,"endColumn":26,"suggestions":"147"},{"ruleId":"118","severity":1,"message":"148","line":3,"column":34,"nodeType":"120","messageId":"121","endLine":3,"endColumn":40},"no-native-reassign",["149"],"no-negated-in-lhs",["150"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Container' is defined but never used.","'styles' is assigned a value but never used.","'vid2' is defined but never used.","'error' is assigned a value but never used.","'currentUser' is assigned a value but never used.","'filename' is assigned a value but never used.","'setCurrentUser' is assigned a value but never used.","'playlist' is assigned a value but never used.","'imagelist' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'background' is defined but never used.","'songList' is defined but never used.","'pictureList' is defined but never used.","'setCanvas' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'tick'. Either include it or remove the dependency array.","ArrayExpression",["151"],"'picture' is defined but never used.","React Hook useEffect has a missing dependency: 'getPictureList'. Either include it or remove the dependency array.",["152"],"'frequency_array' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getSongList'. Either include it or remove the dependency array.",["153"],"'Button' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},"Update the dependencies array to be: [sliderM, sliderN, tick]",{"range":"160","text":"161"},"Update the dependencies array to be: [getPictureList, props.uploadedImage]",{"range":"162","text":"163"},"Update the dependencies array to be: [getSongList, props.uploadedFile]",{"range":"164","text":"165"},[1984,2002],"[sliderM, sliderN, tick]",[887,908],"[getPictureList, props.uploadedImage]",[1433,1453],"[getSongList, props.uploadedFile]"]
[{"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\index.js":"1","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\App.js":"2","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Signup.js":"3","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\About.js":"4","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\MyAccount.js":"5","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\PrivateRoute.js":"6","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Login.js":"7","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\ForgotPassword.js":"8","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\UpdateProfile.js":"9","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\contexts\\AuthContext.js":"10","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Home.js":"11","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Navigation.js":"12","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\firebase.js":"13","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\InsertIcon.js":"14","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Displayer.js":"15","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\FileUpload.js":"16","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\Playlist.js":"17","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\LandingNav.js":"18","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\ImageList.js":"19"},{"size":415,"mtime":1613411119397,"results":"20","hashOfConfig":"21"},{"size":2262,"mtime":1613674986854,"results":"22","hashOfConfig":"21"},{"size":2204,"mtime":1613674986863,"results":"23","hashOfConfig":"21"},{"size":1427,"mtime":1613674986852,"results":"24","hashOfConfig":"21"},{"size":1817,"mtime":1613674986861,"results":"25","hashOfConfig":"21"},{"size":606,"mtime":1613411119391,"results":"26","hashOfConfig":"21"},{"size":1869,"mtime":1613674986858,"results":"27","hashOfConfig":"21"},{"size":1708,"mtime":1613411119380,"results":"28","hashOfConfig":"21"},{"size":2726,"mtime":1613411119393,"results":"29","hashOfConfig":"21"},{"size":1535,"mtime":1613411119396,"results":"30","hashOfConfig":"21"},{"size":4523,"mtime":1613679899057,"results":"31","hashOfConfig":"21"},{"size":1801,"mtime":1613679802501,"results":"32","hashOfConfig":"21"},{"size":592,"mtime":1613411119396,"results":"33","hashOfConfig":"21"},{"size":399,"mtime":1613588069427,"results":"34","hashOfConfig":"21"},{"size":10738,"mtime":1613674986854,"results":"35","hashOfConfig":"21"},{"size":7069,"mtime":1613680101966,"results":"36","hashOfConfig":"21"},{"size":2217,"mtime":1613680404319,"results":"37","hashOfConfig":"21"},{"size":1048,"mtime":1613674986857,"results":"38","hashOfConfig":"21"},{"size":1667,"mtime":1613674986860,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"mpxc4k",{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"42"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"42"},"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\index.js",[],["89","90"],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\App.js",["91","92"],"import React, { useState } from 'react'\r\nimport './App.css'\r\nimport Signup from './Signup'\r\nimport { Container } from 'react-bootstrap'\r\nimport { AuthProvider } from '../contexts/AuthContext'\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\n// import Navigation from './Navigation'\r\nimport About from './About'\r\n// import TemplatesPage from './TemplatesPage'\r\nimport Editor from './Home'\r\nimport Profile from './MyAccount'\r\nimport Login from './Login'\r\nimport PrivateRoute from './PrivateRoute'\r\nimport ForgotPassword from './ForgotPassword'\r\nimport UpdateProfile from './UpdateProfile'\r\n\r\n\r\n\r\n\r\nfunction App(){\r\n\r\n  return(\r\n \r\n    <div>\r\n    <Router>\r\n      <AuthProvider>\r\n        <Switch>\r\n          <Route path=\"/Login\" component={Login} />\r\n          <PrivateRoute exact path=\"/MyAccount\" component={Profile} />\r\n          <PrivateRoute exact path=\"/Home\" component={Editor} />\r\n          <PrivateRoute path=\"/update-profile\" component={UpdateProfile} />\r\n          <Route path=\"/signup\" component={Signup} />\r\n          <Route path=\"/\" component={About} />\r\n          <Route path=\"/forgot-password\" component={ForgotPassword} />\r\n        </Switch>\r\n      </AuthProvider>\r\n    </Router>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\n// const App = () => {\r\n//   \r\n//   // const [isSignedIn, setIsSignedIn] = useState(false)\r\n//   \r\n\r\n//   // if (isSignedIn === 'signout') {\r\n//   //   setIsSignedIn(false)\r\n//   // } else if (isSignedIn === 'signin') {\r\n//   //   setIsSignedIn(true)\r\n//   // }\r\n\r\n//   const onRouteChange = (route) => {\r\n//  if (route === 'Home') {\r\n//       setDisplayPage(<Home />)\r\n//     } else if (route === 'About') {\r\n//       setDisplayPage(<About />)\r\n//     } else if (route === 'TemplatesPage') {\r\n//       setDisplayPage(<TemplatesPage />)\r\n//     }\r\n//     setRoute({ route: route })\r\n//   }\r\n\r\n//   // if (route === 'signout') {\r\n//   //   setRoute({ isSignedIn: false })\r\n//   // } else if (route === 'signin') {\r\n//   //   setRoute({ isSignedIn: true })\r\n//   // } else\r\n\r\n//   return (\r\n//     <>\r\n//       <div className=\"Frontscr\">\r\n//         <Navigation  onRouteChange={onRouteChange} />\r\n//         {displayPage}\r\n//       </div>\r\n//     </>\r\n//   )\r\n// }\r\n\r\nexport default App\r\n\r\n// isSignedIn={setIsSignedIn}","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Signup.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\About.js",["93"],"import React from 'react'\r\nimport { Nav, Modal, Jumbotron } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\"\r\n// import Displayer from './Displayer'\r\nimport LandingNav from './LandingNav'\r\n\r\nimport vid1 from \"./Vidoes/tunnel1.mp4\";\r\nimport vid2 from \"./Vidoes/globe1.mp4\";\r\n\r\n// styling for About is in App.css\r\n\r\nconst About = () => {\r\n    return (\r\n\r\n        <div>\r\n            <LandingNav />\r\n            <div>\r\n                <br></br>\r\n                <Modal.Dialog >\r\n                    <video src={vid1}\r\n                        controls autoPlay loop\r\n                    />\r\n                </Modal.Dialog>\r\n            </div>\r\n\r\n            <div>\r\n                <Jumbotron className='aboutScrStyles' >\r\n                    <h1>Turn your music into a visual!</h1>\r\n                    <br></br>\r\n                    <h4>HummingBird makes it fast and easy to create your </h4>\r\n                    <h4>own custom visualizers..</h4>\r\n                    <br></br>\r\n                    <p>\r\n                        <Nav>\r\n                            <Nav.Item id=\"nav-item\"><Link to=\"/Home\" style={{ color: 'white' }}>\r\n                                <button className=\"btn2\">Create</button>\r\n                            </Link></Nav.Item>\r\n                        </Nav>\r\n                    </p>\r\n                </Jumbotron>\r\n            </div >\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default About","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\MyAccount.js",["94"],"import React, { useState } from \"react\"\r\n  import { Card, Button, Alert } from \"react-bootstrap\"\r\n  import { useAuth } from \"../contexts/AuthContext\"\r\n  import { Link, useHistory } from \"react-router-dom\"\r\nimport Navigation from \"./Navigation\"\r\n  \r\n  export default function Dashboard() {\r\n    const styles = {\r\n        root: {\r\n            width: \"80%\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginBottom: \"105px\",\r\n            marginTop: \"105px\",\r\n            background: \"antiquewhite\",\r\n            padding: \"100px\",\r\n            fontSize: \"1.5rem\",\r\n            borderRadius: \"20px\",\r\n            backgroundColor: \"#357E85\"\r\n        },\r\n        labelText: {\r\n            fontFamily: \"Roboto\",\r\n            fontSize: \"2rem\",\r\n            color: \"#CCEBF4\",\r\n        }\r\n      }    \r\n    const [error, setError] = useState(\"\")\r\n    const { currentUser, logout } = useAuth()\r\n    const history = useHistory()\r\n  \r\n    async function handleLogout() {\r\n      setError(\"\")\r\n  \r\n      try {\r\n        await logout()\r\n        history.push(\"/login\")\r\n      } catch {\r\n        setError(\"Failed to log out\")\r\n      }\r\n    }\r\n  \r\n    return (\r\n<div>\r\n  <Navigation />\r\n<Card>\r\n          <Card.Body>\r\n            <h2 className=\"text-center mb-4\">Profile</h2>\r\n            {error && <Alert variant=\"danger\">{error}</Alert>}\r\n            <strong>Email:</strong> {currentUser.email}\r\n            <strong>Saved Visualizer:</strong>\r\n            <Link to=\"/update-profile\" className=\"btn btn-primary w-100 mt-3\">\r\n              Update Profile\r\n            </Link>\r\n          </Card.Body>\r\n        </Card>\r\n        <div className=\"w-100 text-center mt-2\">\r\n          <Button variant=\"link\" onClick={handleLogout}>\r\n            Sign Out\r\n          </Button>\r\n        </div>\r\n</div>\r\n    )\r\n  }","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\PrivateRoute.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Login.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\ForgotPassword.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\UpdateProfile.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\contexts\\AuthContext.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Home.js",["95"],"import React, { useState, useEffect } from 'react'\r\nimport { Card, Row, Col, Nav, Modal } from 'react-bootstrap'\r\nimport Tab from 'react-bootstrap/Tab'\r\nimport Displayer from './Displayer'\r\nimport FileUpload from './MediaInteractions/FileUpload'\r\nimport InsertIcon from './MediaInteractions/InsertIcon'\r\nimport Navigation from './Navigation'\r\n// import Playlist from './MediaInteractions/Playlist'\r\n\r\n\r\nconst Home = () => {\r\n\r\n  // This is for controlling the Modal window (AUDIO)\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const showModal = () => {\r\n    setIsOpen(true)\r\n  };\r\n  const hideModal = () => {\r\n    setIsOpen(false)\r\n  };\r\n\r\n  // This is for controlling the Modal window (BACKGROUND)\r\n  const [BackModelOpen, setBackModelOpen] = useState(false);\r\n  const showBackModal = () => {\r\n    setBackModelOpen(true)\r\n  };\r\n  const hideBackModal = () => {\r\n    setBackModelOpen(false)\r\n  };\r\n\r\n\r\n  return (\r\n\r\n    <div>\r\n      <Navigation />\r\n      <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\r\n        <Row>\r\n          <Col md={2}>\r\n            <Nav\r\n              variant=\"pills\"\r\n              className=\"flex-column textbold\"\r\n              bg=\"transparent\"\r\n              style={{ fontWeight: 'bold' }}\r\n            >\r\n              <br />\r\n\r\n              {/*------ Audio -----*/}\r\n\r\n              <Nav.Item>\r\n                <Nav.Link\r\n                  eventKey=\"uploadAudio\"\r\n                  style={{\r\n                    borderRadius: '22px',\r\n                    backgroundColor: 'transparent',\r\n                  }}\r\n                >\r\n                  <button className=\"btn1\" onClick={showModal}  >Audio</button>\r\n                </Nav.Link>\r\n              </Nav.Item>\r\n\r\n\r\n              <br />\r\n              <br />\r\n\r\n              {/*------ Background -----*/}\r\n              <Nav.Item>\r\n                <Nav.Link\r\n                  eventKey=\"uploadBackground\"\r\n                  style={{\r\n                    borderRadius: '22px',\r\n                    backgroundColor: 'transparent',\r\n                  }}\r\n                >\r\n                  <button className=\"btn1\" onClick={showBackModal} >Background</button>\r\n                </Nav.Link>\r\n              </Nav.Item>\r\n              <br />\r\n              <br />\r\n\r\n              {/*------ Icon -----*/}\r\n              <Nav.Item>\r\n                <Nav.Link\r\n                  eventKey=\"uploadIcon\"\r\n                  style={{\r\n                    borderRadius: '22px',\r\n                    backgroundColor: 'transparent',\r\n                  }}\r\n                >\r\n                  <button className=\"btn1\">Icon</button>\r\n                </Nav.Link>\r\n              </Nav.Item>\r\n              <br />\r\n              <br />\r\n\r\n              {/*------ Text -----*/}\r\n              <Nav.Item>\r\n                <Nav.Link\r\n                  eventKey=\"home\"\r\n                  style={{\r\n                    borderRadius: '22px',\r\n                    backgroundColor: 'transparent',\r\n                  }}\r\n                >\r\n                  <button className=\"btn1\">Visualizer</button>\r\n                </Nav.Link>\r\n              </Nav.Item>\r\n            </Nav>\r\n          </Col>\r\n\r\n          <Col md={'auto'}>\r\n            <Tab.Content>\r\n\r\n              <Tab.Pane eventKey=\"uploadAudio\" mediatype=\"audio\">\r\n                <Modal className=\"modalUpload\" show={isOpen} onHide={hideModal}>\r\n                  <FileUpload mediatype=\"Audio\" />\r\n                  <button className=\"btn2\" onClick={hideModal}>Cancel</button>\r\n                </Modal>\r\n              </Tab.Pane>\r\n\r\n              <Tab.Pane eventKey=\"uploadBackground\" mediatype=\"image\">\r\n                <Modal show={BackModelOpen} onHide={hideBackModal}>\r\n                  <FileUpload mediatype=\"Background\" filetype=\"image\" />\r\n                  <button className=\"btn2\" onClick={hideBackModal} > Cancel</button>\r\n                </Modal>\r\n              </Tab.Pane>\r\n\r\n              <Tab.Pane eventKey=\"uploadIcon\">\r\n                <FileUpload mediatype=\"Icon\" filetype=\"image\" />\r\n              </Tab.Pane>\r\n            </Tab.Content>\r\n          </Col>\r\n\r\n          {/* card for displaying the visualizer on the right panel*/}\r\n\r\n          <Col md xl={'auto'}>\r\n            <br />\r\n            <Card className=\"visualizer\">\r\n              <Card.Body>\r\n                <Displayer />\r\n                <InsertIcon />\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Tab.Container>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Navigation.js",["96","97"],"import React, { useState } from 'react'\r\nimport { useAuth } from \"../contexts/AuthContext\"\r\nimport { Link, useHistory } from \"react-router-dom\"\r\nimport { Navbar, Nav, Container } from 'react-bootstrap'\r\n\r\nimport pic from './Images/logogrey.png'\r\n// import pic from './Logo1sn.png'\r\n\r\n\r\nconst Navigation = () => {\r\n\r\n  const [error, setError] = useState(\"\")\r\n  const { currentUser, logout } = useAuth()\r\n  const history = useHistory()\r\n\r\n  async function handleLogout() {\r\n    setError(\"\")\r\n\r\n    try {\r\n      await logout()\r\n      history.push(\"/login\")\r\n    } catch {\r\n      setError(\"Failed to log out\")\r\n    }\r\n  }\r\n\r\n  //Navbar\r\n\r\n  return (\r\n\r\n\r\n    <Navbar style={{ backgroundColor: 'black' }} variant=\"dark\" expand=\"sm\" sticky=\"top\" className=\"justify-content-end\">\r\n      <Container id=\"nav-wrap\">\r\n        <Navbar.Brand href=\"/Login\">\r\n          {/* <img src={pic} alt={''} width={80} height={80} /> */}\r\n          <img\r\n            src={pic}\r\n            alt={''}\r\n            height={'30%'}\r\n            width={'30%'}\r\n            className=\"d-inline-block align-top\" />\r\n        </Navbar.Brand>\r\n\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav>\r\n            <Nav.Item id=\"nav-item\"><Link to=\"/About\" style={{ color: 'white' }}>About</Link></Nav.Item>\r\n            <Nav.Item id=\"nav-item\"><Link to=\"/Home\" style={{ color: 'white' }}>Editor</Link></Nav.Item>\r\n            <Nav.Item id=\"nav-item\"><Link to=\"/MyAccount\" style={{ color: 'white' }}>Profile</Link></Nav.Item>\r\n            <Nav.Item id=\"nav-item\" onClick={handleLogout}><Link style={{ color: 'white' }} >Logout</Link></Nav.Item>\r\n\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Container>\r\n    </Navbar>\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default Navigation","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\firebase.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\InsertIcon.js",["98"],"import React from 'react'\r\n// import { Container, Row, Col, Image } from 'react-bootstrap'\r\nimport icon from '../Images/Daco.png'\r\n\r\n//Icon input\r\nconst InsertIcon = () => {\r\n  return (\r\n    <div className=\"iconWrapper\">\r\n      <img\r\n        style={{\r\n          width: '15%',\r\n          height: '15%',\r\n        }}\r\n        src={`${icon}`}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InsertIcon\r\n","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Displayer.js",["99","100","101","102","103","104"],"import React, { createRef, useState, useEffect, useLayoutEffect } from 'react'\r\nimport axios from 'axios'\r\nimport background from './Images/background1.jpg'\r\nimport songList from './MediaInteractions/Playlist'\r\nimport pictureList from './MediaInteractions/ImageList'\r\n\r\nconst UpdateWindowSize = () => {\r\n  const [size, setSize] = useState([1000, 1000])\r\n  useLayoutEffect(() => {\r\n    const updateSize = () => {\r\n      setSize([window.innerWidth, window.innerHeight])\r\n    }\r\n    window.addEventListener('resize', updateSize)\r\n    return () => window.removeEventListener('resize', updateSize)\r\n  }, [])\r\n  return size\r\n}\r\n\r\nlet rafId\r\n\r\nlet ctx, x_end, y_end, bar_height\r\n\r\nconst bars = 900 //  max 1030 - leave it in 555\r\nconst bar_width = 2 //  good in 1\r\nconst radius = 0 // innercircle\r\nlet audio\r\nlet audioContext\r\nlet source\r\nlet analyser\r\nlet frequency_array\r\nconst createAudioContext = () => {\r\n  audio = new Audio()\r\n\r\n  audioContext = new (window.AudioContext || window.webkitAudioContext)()\r\n  source = audioContext.createMediaElementSource(audio)\r\n  analyser = audioContext.createAnalyser()\r\n  source.connect(analyser)\r\n  analyser.connect(audioContext.destination)\r\n  frequency_array = new Uint8Array(analyser.frequencyBinCount)\r\n}\r\n\r\nconst Displayer = (props) => {\r\n  const [width, height] = UpdateWindowSize()\r\n  const [canvas, setCanvas] = useState(createRef())\r\n  const [isPaused, setIsPaused] = useState(true)\r\n  const [songSelect, setsongSelect] = useState()\r\n  const [pictureSelect, setpictureSelect] = useState()\r\n  const [currentPicture, setCurrentPicture] = useState(-1)\r\n  const [backgroundUrl, setBackgroundUrl] = useState()\r\n  const [currentSong, setCurrentSong] = useState(-1)\r\n  const [sliderM, setSliderM] = useState(1)\r\n  const [sliderN, setSliderN] = useState(1)\r\n  const center_x = width / 2\r\n  const center_y = height / 2\r\n  useEffect(() => {\r\n    if (rafId) {\r\n      cancelAnimationFrame(rafId)\r\n      rafId = requestAnimationFrame(tick)\r\n    }\r\n  }, [sliderM, sliderN])\r\n\r\n  const getSong = async (song) => {\r\n    createAudioContext()\r\n    const response = await axios.get(\r\n      `http://localhost:5000/upload/media/${song}`,\r\n      { responseType: 'blob' },\r\n    )\r\n    //produces url for url\r\n    audio.src = URL.createObjectURL(response.data)\r\n    audio.load()\r\n    if (audio) {\r\n              togglePlay()\r\n            }\r\n    \r\n  }\r\n\r\n  let picture\r\n  const getPicture = async (picture) => {\r\n    \r\n    const response = await axios.get(\r\n      `http://localhost:5000/upload/image/${picture}`,\r\n      { responseType: 'blob' },\r\n    )\r\n    console.log(response.data)\r\n  setBackgroundUrl(URL.createObjectURL(response.data))\r\n    \r\n    // picture.load()\r\n    // let pictureURL = picture.src\r\n    \r\n  }\r\n\r\n  function animationLooper(canvas) {\r\n    canvas.width = width\r\n    canvas.height = height\r\n    ctx = canvas.getContext('2d')\r\n    for (let i = 0; i < bars; i++) {\r\n      //divide a circle into equal part\r\n      const rads = (Math.PI * 2) / bars\r\n      // Math is magical - you can make lots of visualizer\r\n      // this 4.5 decides the canves size\r\n      bar_height = frequency_array[i] * 2.5\r\n      const x = center_x + Math.cos(rads * i) * radius\r\n      const y = center_y + Math.sin(rads * i) * radius\r\n      x_end = center_x + Math.cos(rads * sliderN * i + (Math.PI / 640) * new Date()) * (radius + bar_height)\r\n      y_end =\r\n        center_y +\r\n        Math.sin(rads * sliderM * i + (Math.PI / 640) * new Date()) *\r\n          (radius + bar_height)\r\n      //draw a bar\r\n      // const x = bar_width / 2 + (i * window.innerWidth) / bars;\r\n      // const y = 900;\r\n      // const y_end = 800 - bar_height;\r\n      // const x_end = x;\r\n      drawBar(x, y, x_end, y_end, i, ctx, canvas)\r\n    }\r\n  }\r\n  function drawBar(x1 = 0, y1 = 0, x2 = 0, y2 = 0, i, ctx) {\r\n    i = (i + new Date().getTime() * 2) % 600 //  2 is an OK number,  600/6 =100 integer is good\r\n    const gradient = ctx.createLinearGradient(x1, y1, x2, y2)\r\n    gradient.addColorStop(0, 'rgba(0, 255, 0, 255)')\r\n    gradient.addColorStop(1, 'rgba(254, 0, 0, 255)')\r\n    ctx.fillStyle = 'pink'\r\n    let lineColor\r\n    if (i < 150) {\r\n      // lineColor = \"red\"\r\n      lineColor =\r\n        'rgb(' +\r\n        Math.abs(275 - i) +\r\n        ', ' +\r\n        Math.abs(175 - i / 2) +\r\n        ', ' +\r\n        1000 +\r\n        ')'\r\n    } else if (i < 300) {\r\n      // lineColor=\"blue\"\r\n      lineColor =\r\n        'rgb(' +\r\n        1000 +\r\n        ', ' +\r\n        Math.abs(275 - i) +\r\n        ', ' +\r\n        Math.abs(175 - i / 2) +\r\n        ')'\r\n    } else if (i < 450) {\r\n      // lineColor=\"green\"\r\n      lineColor =\r\n        'rgb(' +\r\n        Math.abs(175 - i / 2) +\r\n        ', ' +\r\n        1000 +\r\n        ', ' +\r\n        Math.abs(275 - i) +\r\n        ')'\r\n    } else if (i < 600) {\r\n      // lineColor = \"red\"\r\n      lineColor =\r\n        'rgb(' +\r\n        Math.abs(175 - i / 2) +\r\n        ', ' +\r\n        1000 +\r\n        ', ' +\r\n        Math.abs(275 - i) +\r\n        ')'\r\n    } else if (i < 750) {\r\n      // lineColor=\"blue\"\r\n      lineColor =\r\n        'rgb(' +\r\n        1000 +\r\n        ', ' +\r\n        Math.abs(275 - i) +\r\n        ', ' +\r\n        Math.abs(175 - i / 2) +\r\n        ')'\r\n    } else if (i < 900) {\r\n      // lineColor=\"green\"\r\n      lineColor =\r\n        'rgb(' +\r\n        Math.abs(275 - i) +\r\n        ', ' +\r\n        Math.abs(175 - i / 2) +\r\n        ', ' +\r\n        1000 +\r\n        ')'\r\n    }\r\n\r\n    ctx.strokeStyle = lineColor\r\n    ctx.lineWidth = bar_width\r\n    ctx.beginPath()\r\n    ctx.moveTo(x1, y1)\r\n    ctx.lineTo(x2, y2)\r\n    ctx.stroke()\r\n  }\r\n\r\n  //Plays Music\r\n  const togglePlay = () => {\r\n    // createAudioContext()\r\n    if (audio.paused) {\r\n      audioContext.resume()\r\n      audio.play()\r\n      setIsPaused(false)\r\n      rafId = requestAnimationFrame(tick)\r\n    } else {\r\n      audio.pause()\r\n      setIsPaused(true)\r\n      cancelAnimationFrame(rafId)\r\n    }\r\n  }\r\n\r\n  function tick() {\r\n    animationLooper(canvas.current)\r\n    analyser.getByteTimeDomainData(frequency_array)\r\n    rafId = requestAnimationFrame(tick)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const getSongList = async () => {\r\n      let res = await axios.get('http://localhost:5000/upload/list')\r\n      setsongSelect(res.data)\r\n      //console.log(setsongSelect)\r\n    }\r\n    getSongList()\r\n  },[])\r\n\r\n  //console.log('This is the songList that is being imported', songList)\r\n\r\n  useEffect(() => {\r\n    const getPictureList = async () => {\r\n      let res = await axios.get('http://localhost:5000/upload/backgroundList')\r\n      setpictureSelect(res.data)\r\n      //console.log(setsongSelect)\r\n    }\r\n    getPictureList()\r\n  },[])\r\n\r\n  return (\r\n    <div\r\n      className=\"audioControlBackground\"\r\n      style={{ backgroundImage: `url(${backgroundUrl})` }}\r\n    >\r\n      <div className=\"buttonWrapper\">\r\n      <button\r\n          onClick={() => {\r\n            if (audio && !isPaused) {\r\n              togglePlay()\r\n            }\r\n            if(currentSong === 0) {\r\n              setCurrentSong(curr => (songSelect.length - 1))\r\n              getSong(songSelect[(songSelect.length - 1)])\r\n            } else{\r\n            setCurrentSong(curr => (curr - 1)%(songSelect.length))\r\n           getSong(songSelect[(currentSong - 1)%(songSelect.length)])}\r\n          //  togglePlay()\r\n          }}\r\n        >\r\n          Previous\r\n        </button>\r\n\r\n\r\n\r\n        <button\r\n          onClick={() => {\r\n            if (audio) {\r\n              togglePlay()\r\n            }\r\n          }}\r\n          style={{\r\n            width: '150px',\r\n            backgroundColor: isPaused\r\n              ? // this is the play/pause button colors\r\n                'yellow'\r\n              : 'green',\r\n          }}\r\n        >\r\n          {isPaused ? 'Play' : 'Pause'}\r\n        </button>\r\n\r\n        {/* <button\r\n          onClick={() => {\r\n            if (audio && !isPaused) {\r\n              togglePlay()\r\n            }\r\n            if(currentSong === 0) {\r\n              setCurrentSong(curr => (songSelect.length - 1))\r\n              getSong(songSelect[(songSelect.length - 1)])\r\n            } else{\r\n            setCurrentSong(curr => (curr - 1)%(songSelect.length))\r\n           getSong(songSelect[(currentSong - 1)%(songSelect.length)])}\r\n          //  togglePlay()\r\n          }}\r\n        >\r\n          Previous\r\n        </button> */}\r\n\r\n        <button\r\n          onClick={() => {\r\n            if (audio && !isPaused) {\r\n              togglePlay()\r\n            }\r\n            setCurrentSong(curr => (curr + 1)%(songSelect.length))\r\n           getSong(songSelect[(currentSong + 1)%(songSelect.length)])\r\n          //  togglePlay()\r\n          }}\r\n        >\r\n          Next\r\n        </button>\r\n\r\n        {songSelect && \r\n        <select\r\n        value ={songSelect[currentSong]}\r\n          onChange={(e) => {\r\n            getSong(e.target.value)\r\n            setCurrentSong((e.target.selectedIndex - 1)%(songSelect.length))\r\n          }}\r\n        >\r\n          {' '}\r\n          <option>Choose A Song</option>\r\n          {songSelect &&\r\n            songSelect.map((song) => {\r\n              return <option value={song}>{song}</option>\r\n            })}\r\n        </select>}\r\n        {pictureSelect && \r\n        <select\r\n        value ={pictureSelect[currentPicture]}\r\n          onChange={(e) => {\r\n            getPicture(e.target.value)\r\n            setCurrentPicture((e.target.selectedIndex - 1)%(pictureSelect.length))\r\n          }}\r\n        >\r\n          {' '}\r\n          <option>Pick an Image</option>\r\n          {pictureSelect &&\r\n            pictureSelect.map((picture) => {\r\n              return <option value={picture}>{picture}</option>\r\n            })}\r\n        </select>}\r\n      </div>\r\n      <div className=\"songInfoWrapper\">\r\n        {/* Inserted by SN */}\r\n        {/* <div style={{ color: 'red' }}>{currentSong}</div> */}\r\n\r\n        {/* Removed by SN */}\r\n        {/* < h3 style={{ color: textColor }}>{songName}</h3> */}\r\n      </div>\r\n      <div className=\"canvasWrapper\">\r\n        {audio && audio.paused ? <canvas /> : <canvas ref={canvas} />}\r\n      </div>\r\n      <div className=\"sliders\">\r\n        {' '}\r\n        <div>{sliderM}</div>\r\n        <p>X</p>\r\n        <input\r\n          className=\"slider\"\r\n          type=\"range\"\r\n          min=\"0\"\r\n          max=\"8\"\r\n          step=\".1\"\r\n          onChange={(e) => {\r\n            setSliderM(e.target.value)\r\n          }}\r\n          value={sliderM}\r\n        />{' '}\r\n        <div>{sliderN}</div>\r\n        <p>Y</p>\r\n        <input\r\n          className=\"slider1\"\r\n          type=\"range\"\r\n          min=\"0\"\r\n          max=\"8\"\r\n          step=\".1\"\r\n          onChange={(e) => {\r\n            setSliderN(e.target.value)\r\n          }}\r\n          value={sliderN}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Displayer","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\FileUpload.js",["105","106","107","108","109","110","111"],"import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { Card } from 'react-bootstrap'\r\nimport Playlist from './Playlist'\r\nimport ImageList from './ImageList'\r\n\r\nconst FileUpload = (props) => {\r\n  //Need to use a hook to set text in the label to the file namespace\r\n  const [file, setFile] = useState('')\r\n  const [filename, setFilename] = useState('Choose File')\r\n  const [uploadedFile, setUploadedFile] = useState({})\r\n  const [imagelist, setImagelist] = useState([])\r\n  const [uploadedImage, setUploadedImage] = useState({})\r\n  const [playlist, setPlaylist] = useState([])\r\n\r\n  const onChange = (e) => {\r\n    //HTML file uploads come as an array so we want the index of the first file\r\n    setFile(e.target.files[0])\r\n    setFilename(e.target.files[0].name)\r\n  }\r\n\r\n  const onSubmit = async (e) => {\r\n    // e.preventDefault() used to prevent submitting by accident by preventing normal submitting\r\n    e.preventDefault()\r\n\r\n    const formData = new FormData()\r\n    formData.append('file', file)\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        'http://localhost:5000/upload/media',\r\n        formData,\r\n        {\r\n          headers: { 'Content-Type': 'multipart/form-data' },\r\n        },\r\n      )\r\n      const { fileName, filePath } = res.data\r\n      // console.log('These are the headers', res.headers)\r\n      if (res.status === 200) {\r\n        console.log('File was uploaded successfully ' + res.status)\r\n      }\r\n      setUploadedFile({ fileName, filePath })\r\n    } catch (err) {\r\n      if (err.response.status === 500) {\r\n        console.error('There is a problem with the server ' + err.message)\r\n      } else {\r\n        //This message is from the server if no file is uploaded\r\n        // console.error('we had an error??? ' + err.response.data.msg)\r\n        console.error(err.response.data.msg)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Gets the playlist and sends to the Playlist Component\r\n\r\n  // Gets the playlist and sends to the Playlist Component\r\n  const getPlaylist = () => {\r\n    axios\r\n      .get('http://localhost:5000/upload/list')\r\n      .then((res) => {\r\n        // console.log('this is the res', res)\r\n        return res.data\r\n      })\r\n      .then((playlist) => {\r\n        // console.log('This is the playlist', playlist)\r\n        setPlaylist(playlist)\r\n      })\r\n  }\r\n  useEffect(() => {\r\n    getPlaylist()\r\n  }, [uploadedFile])\r\n\r\n  // If the Audio button is selected\r\n  if (props.mediatype === 'Audio') {\r\n    return (\r\n      // <Card style={{ width: '29rem', margin: '16px' }}>\r\n      <Card style={{ height: '25rem' }}>\r\n        <Card.Body className=\"modalUpload\">\r\n          <Card.Title className=\"mb-2 text-muted\">{props.mediatype} Upload</Card.Title>\r\n          <Card.Subtitle className=\"mb-2 text-muted\">\r\n            Select {props.mediatype} to Upload\r\n          </Card.Subtitle>\r\n          <Card.Text>\r\n            <>\r\n              {/* <div className=\"mb-2\"> */}\r\n              <div>\r\n                <form onSubmit={onSubmit}>\r\n                  {/* <div className=\"input-group mb-4\"> */}\r\n                  <div >\r\n                    <input\r\n                      type=\"file\"\r\n                      // className=\"form-control mb-5\"\r\n                      className=\"modalUpload\"\r\n                      // id=\"inputGroupFile02\"\r\n                      accept={`${props.mediatype}/wav, ${props.mediatype}/mp3, ${props.mediatype}/mpeg`}\r\n                      onChange={onChange}\r\n                    />\r\n                    <input\r\n                      type=\"submit\"\r\n                      value={`Submit`}\r\n                      // className=\"btn btn-primary btn-block\"\r\n                      className=\"btn2\"\r\n                      onClick={() => getPlaylist()}\r\n                    />\r\n                    {/* <label\r\n                      className=\"id=inputGroupFile02\"\r\n                      htmlFor=\"inputGroupFile02\"\r\n                    ></label> */}\r\n                    <Playlist uploadedFile={uploadedFile} />\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </>\r\n          </Card.Text>\r\n        </Card.Body>\r\n        {/* <Playlist uploadedFile={uploadedFile} /> */}\r\n      </Card>\r\n    )\r\n  }\r\n  if (props.mediatype === 'Background') {\r\n    return (\r\n      <Card style={{ height: '25rem' }}>\r\n        <Card.Body className=\"modalUpload\">\r\n          <Card.Title className=\"mb-2 text-muted\">{props.mediatype} Upload</Card.Title>\r\n          <Card.Subtitle className=\"mb-2 text-muted\">\r\n            Select {props.mediatype} to Upload\r\n          </Card.Subtitle>\r\n          <Card.Text>\r\n            <>\r\n              {/* <div className=\"mb-2\"> */}\r\n              <div>\r\n                <form onSubmit={onSubmit}>\r\n                  {/* <div className=\"input-group mb-3\"> */}\r\n                  <div>\r\n                    <input\r\n                      type=\"file\"\r\n                      // className=\"form-control mb-5\"\r\n                      className=\"modalUpload\"\r\n                      // id=\"inputGroupFile02\"\r\n                      accept={`${props.filetype}/jpg, ${props.filetype}/jpeg, ${props.filetype}/bmp`}\r\n                      onChange={onChange}\r\n                    />\r\n                    <input\r\n                      type=\"submit\"\r\n                      value={`Submit`}\r\n                      // className=\"btn btn-primary btn-block\"\r\n                      className=\"btn2\"\r\n                    />\r\n\r\n                    {/* <label\r\n                      className=\"id=inputGroupFile02\"\r\n                      htmlFor=\"inputGroupFile02\"\r\n                    ></label> */}\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </>\r\n          </Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n    )\r\n  }\r\n  return (\r\n    <Card style={{ width: '16rem', margin: '16px' }}>\r\n      <Card.Body>\r\n        <Card.Title>{props.mediatype} Upload</Card.Title>\r\n        <Card.Subtitle className=\"mb-2 text-muted\">\r\n          Select {props.mediatype} to Upload\r\n        </Card.Subtitle>\r\n        <Card.Text>\r\n          <>\r\n            <div className=\"mb-2\">\r\n              <form onSubmit={onSubmit}>\r\n                <div className=\"input-group mb-3\">\r\n                  <input\r\n                    type=\"file\"\r\n                    className=\"form-control mb-5\"\r\n                    id=\"inputGroupFile02\"\r\n                    accept={`${props.filetype}/gif, ${props.filetype}/png, ${props.filetype}/jpg`}\r\n                    onChange={onChange}\r\n                  />\r\n                  <input\r\n                    type=\"submit\"\r\n                    value={`Submit`}\r\n                    // className=\"btn btn-primary btn-block\"\r\n                    className=\"btn1\"\r\n                  />\r\n\r\n                  <label\r\n                    className=\"id=inputGroupFile02\"\r\n                    htmlFor=\"inputGroupFile02\"\r\n                  ></label>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </>\r\n        </Card.Text>\r\n      </Card.Body>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default FileUpload\r\n","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\Playlist.js",["112","113"],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\LandingNav.js",["114"],"import React from 'react'\r\nimport { Link} from \"react-router-dom\"\r\nimport { Navbar, Nav, Container, Button } from 'react-bootstrap'\r\nimport pic from './Images/logogrey-bird.png'\r\n// import pic from './Logo1sn.png'\r\n\r\n\r\nconst LandingNav = () => {\r\n\r\n\r\n  return (\r\n    \r\n\r\n<Navbar style={{ backgroundColor: 'black' }} variant=\"dark\" expand=\"sm\" >\r\n        <Container>\r\n        <Navbar.Brand href=\"/About\">\r\n          {/* <img src={pic} alt={''} width={80} height={80} /> */}\r\n          <img \r\n          src={pic} \r\n          alt={''} \r\n          height={'40'} \r\n          width={'45'} \r\n          className=\"d-inline-block\"/>{' '}HUMMINGBIRD\r\n        </Navbar.Brand>\r\n\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse className=\"justify-content-end\" id=\"basic-navbar-nav\" >\r\n          <Nav fill >\r\n\r\n          <Nav.Item><Link to=\"/Login\" className=\"navBtn\">Sign In</Link></Nav.Item>\r\n\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n\r\n   \r\n  )\r\n}\r\n\r\nexport default LandingNav","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\ImageList.js",["115"],"import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { Card } from 'react-bootstrap'\r\n\r\n\r\n\r\nconst ImageList = (props) => {\r\n  const [imagelist, setImagelist] = useState([])\r\n\r\n  const getImage = async (image) => {\r\n    console.log('This is in getImage', image)\r\n    let picture\r\n    const response = await axios.request({\r\n      url: `http://localhost:5000/upload/media/${image}`,\r\n      responseType: 'blob',\r\n      method: 'GET',\r\n    })\r\n    picture.src = URL.createObjectURL(response.data)\r\n    picture.load()\r\n  }\r\n\r\n  const getPictureList = async () => {\r\n    let res = await axios.get('http://localhost:5000/upload/backgroundList')\r\n    const data = res.data\r\n    console.log('This is data', data)\r\n\r\n    setImagelist(data)\r\n    console.log('This is the list of background images', imagelist)\r\n  }\r\n  useEffect(() => {\r\n    getPictureList()\r\n  }, [props.uploadedImage])\r\n\r\n  return (\r\n    <>\r\n      <br />\r\n      <Card.Body className=\"playlistTab\">\r\n        <Card.Title>Backgrounds</Card.Title>\r\n        <Card.Text className=\"tabScroll\">\r\n          <div>\r\n            <ul\r\n              onClick={(event) => {\r\n                getImage(event.target.firstChild.data)\r\n              }}\r\n            >\r\n              {imagelist?.map((picture, index) => {\r\n                console.log('This is the picture with index', picture, index)\r\n                return (\r\n                  <li key={index} value={picture}>\r\n                    {picture}\r\n                  </li>\r\n                )\r\n              })}\r\n            </ul>\r\n          </div>\r\n        </Card.Text>\r\n      </Card.Body>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ImageList\r\n",{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":1,"column":17,"nodeType":"122","messageId":"123","endLine":1,"endColumn":25},{"ruleId":"120","severity":1,"message":"124","line":4,"column":10,"nodeType":"122","messageId":"123","endLine":4,"endColumn":19},{"ruleId":"120","severity":1,"message":"125","line":8,"column":8,"nodeType":"122","messageId":"123","endLine":8,"endColumn":12},{"ruleId":"120","severity":1,"message":"126","line":8,"column":11,"nodeType":"122","messageId":"123","endLine":8,"endColumn":17},{"ruleId":"120","severity":1,"message":"127","line":1,"column":27,"nodeType":"122","messageId":"123","endLine":1,"endColumn":36},{"ruleId":"120","severity":1,"message":"128","line":12,"column":10,"nodeType":"122","messageId":"123","endLine":12,"endColumn":15},{"ruleId":"120","severity":1,"message":"129","line":13,"column":11,"nodeType":"122","messageId":"123","endLine":13,"endColumn":22},{"ruleId":"130","severity":1,"message":"131","line":9,"column":7,"nodeType":"132","endLine":15,"endColumn":9},{"ruleId":"120","severity":1,"message":"133","line":3,"column":8,"nodeType":"122","messageId":"123","endLine":3,"endColumn":18},{"ruleId":"120","severity":1,"message":"134","line":4,"column":8,"nodeType":"122","messageId":"123","endLine":4,"endColumn":16},{"ruleId":"120","severity":1,"message":"135","line":5,"column":8,"nodeType":"122","messageId":"123","endLine":5,"endColumn":19},{"ruleId":"120","severity":1,"message":"136","line":44,"column":18,"nodeType":"122","messageId":"123","endLine":44,"endColumn":27},{"ruleId":"137","severity":1,"message":"138","line":60,"column":6,"nodeType":"139","endLine":60,"endColumn":24,"suggestions":"140"},{"ruleId":"120","severity":1,"message":"141","line":77,"column":7,"nodeType":"122","messageId":"123","endLine":77,"endColumn":14},{"ruleId":"120","severity":1,"message":"142","line":5,"column":8,"nodeType":"122","messageId":"123","endLine":5,"endColumn":17},{"ruleId":"120","severity":1,"message":"143","line":10,"column":10,"nodeType":"122","messageId":"123","endLine":10,"endColumn":18},{"ruleId":"120","severity":1,"message":"144","line":12,"column":10,"nodeType":"122","messageId":"123","endLine":12,"endColumn":19},{"ruleId":"120","severity":1,"message":"145","line":12,"column":21,"nodeType":"122","messageId":"123","endLine":12,"endColumn":33},{"ruleId":"120","severity":1,"message":"146","line":13,"column":10,"nodeType":"122","messageId":"123","endLine":13,"endColumn":23},{"ruleId":"120","severity":1,"message":"147","line":13,"column":25,"nodeType":"122","messageId":"123","endLine":13,"endColumn":41},{"ruleId":"120","severity":1,"message":"148","line":14,"column":10,"nodeType":"122","messageId":"123","endLine":14,"endColumn":18},{"ruleId":"120","severity":1,"message":"149","line":18,"column":3,"nodeType":"122","messageId":"123","endLine":18,"endColumn":18},{"ruleId":"137","severity":1,"message":"150","line":50,"column":6,"nodeType":"139","endLine":50,"endColumn":26,"suggestions":"151"},{"ruleId":"120","severity":1,"message":"152","line":3,"column":34,"nodeType":"122","messageId":"123","endLine":3,"endColumn":40},{"ruleId":"137","severity":1,"message":"153","line":32,"column":6,"nodeType":"139","endLine":32,"endColumn":27,"suggestions":"154"},"no-native-reassign",["155"],"no-negated-in-lhs",["156"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Container' is defined but never used.","'vid2' is defined but never used.","'styles' is assigned a value but never used.","'useEffect' is defined but never used.","'error' is assigned a value but never used.","'currentUser' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'background' is defined but never used.","'songList' is defined but never used.","'pictureList' is defined but never used.","'setCanvas' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'tick'. Either include it or remove the dependency array.","ArrayExpression",["157"],"'picture' is defined but never used.","'ImageList' is defined but never used.","'filename' is assigned a value but never used.","'imagelist' is assigned a value but never used.","'setImagelist' is assigned a value but never used.","'uploadedImage' is assigned a value but never used.","'setUploadedImage' is assigned a value but never used.","'playlist' is assigned a value but never used.","'frequency_array' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getSongList'. Either include it or remove the dependency array.",["158"],"'Button' is defined but never used.","React Hook useEffect has a missing dependency: 'getPictureList'. Either include it or remove the dependency array.",["159"],"no-global-assign","no-unsafe-negation",{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},"Update the dependencies array to be: [sliderM, sliderN, tick]",{"range":"166","text":"167"},"Update the dependencies array to be: [getSongList, props.uploadedFile]",{"range":"168","text":"169"},"Update the dependencies array to be: [getPictureList, props.uploadedImage]",{"range":"170","text":"171"},[1984,2002],"[sliderM, sliderN, tick]",[1433,1453],"[getSongList, props.uploadedFile]",[887,908],"[getPictureList, props.uploadedImage]"]
