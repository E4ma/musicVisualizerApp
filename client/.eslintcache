[{"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\index.js":"1","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\App.js":"2","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\Signup.js":"3","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\About.js":"4","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\MyAccount.js":"5","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\Home.js":"6","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\Login.js":"7","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\ForgotPassword.js":"8","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\UpdateProfile.js":"9","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\PrivateRoute.js":"10","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\contexts\\AuthContext.js":"11","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\Displayer.js":"12","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\InsertIcon.js":"13","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\firebase.js":"14","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\FileUpload.js":"15","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\Playlist.js":"16","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\Navigation.js":"17"},{"size":415,"mtime":1613162764780,"results":"18","hashOfConfig":"19"},{"size":2571,"mtime":1613179630722,"results":"20","hashOfConfig":"19"},{"size":2203,"mtime":1613177007653,"results":"21","hashOfConfig":"19"},{"size":1315,"mtime":1613179811282,"results":"22","hashOfConfig":"19"},{"size":1773,"mtime":1613178992288,"results":"23","hashOfConfig":"19"},{"size":3584,"mtime":1613179179513,"results":"24","hashOfConfig":"19"},{"size":1801,"mtime":1613162764769,"results":"25","hashOfConfig":"19"},{"size":1708,"mtime":1613162764763,"results":"26","hashOfConfig":"19"},{"size":2726,"mtime":1613162764775,"results":"27","hashOfConfig":"19"},{"size":606,"mtime":1613162764773,"results":"28","hashOfConfig":"19"},{"size":1535,"mtime":1613162764778,"results":"29","hashOfConfig":"19"},{"size":7437,"mtime":1613162764762,"results":"30","hashOfConfig":"19"},{"size":399,"mtime":1613145530171,"results":"31","hashOfConfig":"19"},{"size":592,"mtime":1613162764779,"results":"32","hashOfConfig":"19"},{"size":6485,"mtime":1613163165880,"results":"33","hashOfConfig":"19"},{"size":541,"mtime":1613163165881,"results":"34","hashOfConfig":"19"},{"size":1731,"mtime":1613181577076,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"368z0z",{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\index.js",[],["74","75"],"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\App.js",["76"],"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\Signup.js",[],"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\About.js",[],"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\MyAccount.js",["77"],"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\Home.js",[],"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\Login.js",[],"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\ForgotPassword.js",[],"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\UpdateProfile.js",[],"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\PrivateRoute.js",[],"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\contexts\\AuthContext.js",[],"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\Displayer.js",["78","79","80","81"],"import React, { createRef, useState, useEffect, useLayoutEffect } from 'react'\r\nimport axios from 'axios'\r\nimport background from './Images/background1.jpg'\r\n\r\nconst UpdateWindowSize = () => {\r\n  const [size, setSize] = useState([1000, 1000])\r\n  useLayoutEffect(() => {\r\n    const updateSize = () => {\r\n      setSize([window.innerWidth, window.innerHeight])\r\n    }\r\n    window.addEventListener('resize', updateSize)\r\n    return () => window.removeEventListener('resize', updateSize)\r\n  }, [])\r\n  return size\r\n}\r\n\r\nlet rafId\r\n\r\nlet ctx, x_end, y_end, bar_height\r\n\r\nconst bars = 900 //  max 1030 - leave it in 555\r\nconst bar_width = 2 //  good in 1\r\nconst radius = 0 // innercircle\r\nlet audio\r\nlet audioContext\r\nlet source\r\nlet analyser\r\nlet frequency_array\r\nconst createAudioContext = () => {\r\n  audio = new Audio()\r\n\r\n  audioContext = new (window.AudioContext || window.webkitAudioContext)()\r\n  source = audioContext.createMediaElementSource(audio)\r\n  analyser = audioContext.createAnalyser()\r\n  source.connect(analyser)\r\n  analyser.connect(audioContext.destination)\r\n  frequency_array = new Uint8Array(analyser.frequencyBinCount)\r\n}\r\n\r\nconst Displayer = () => {\r\n  const [width, height] = UpdateWindowSize()\r\n  const [canvas, setCanvas] = useState(createRef())\r\n  const [isPaused, setIsPaused] = useState(true)\r\n  const [songSelect, setsongSelect] = useState()\r\n  const [currentSong, setCurrentSong] = useState(0)\r\n  const [sliderM, setSliderM] = useState(1)\r\n  const [sliderN, setSliderN] = useState(1)\r\n  const center_x = width / 2\r\n  const center_y = height / 2\r\n  useEffect(() => {\r\n    if (rafId) {\r\n      cancelAnimationFrame(rafId)\r\n      rafId = requestAnimationFrame(tick)\r\n    }\r\n  }, [sliderM, sliderN])\r\n  const getSong = async (song) => {\r\n    createAudioContext()\r\n    const response = await axios.get(\r\n      `http://localhost:5000/upload/media/${song}`,\r\n      { responseType: 'blob' },\r\n    )\r\n    audio.src = URL.createObjectURL(response.data)\r\n    audio.load()\r\n    // audio.play()\r\n  }\r\n  function animationLooper(canvas) {\r\n    canvas.width = width\r\n    canvas.height = height\r\n    ctx = canvas.getContext('2d')\r\n    for (let i = 0; i < bars; i++) {\r\n      //divide a circle into equal part\r\n      const rads = (Math.PI * 2) / bars\r\n      // Math is magical - you can make lots of visualizer\r\n      // this 4.5 decides the canves size\r\n      bar_height = frequency_array[i] * 2.5\r\n      const x = center_x + Math.cos(rads * i) * radius\r\n      const y = center_y + Math.sin(rads * i) * radius\r\n      x_end = center_x + Math.cos(rads * sliderN * i) * (radius + bar_height)\r\n      y_end =\r\n        center_y +\r\n        Math.sin(rads * sliderM * i + (Math.PI / 640) * new Date()) *\r\n          (radius + bar_height)\r\n      //draw a bar\r\n      // const x = bar_width / 2 + (i * window.innerWidth) / bars;\r\n      // const y = 900;\r\n      // const y_end = 800 - bar_height;\r\n      // const x_end = x;\r\n      drawBar(x, y, x_end, y_end, i, ctx, canvas)\r\n    }\r\n  }\r\n  function drawBar(x1 = 0, y1 = 0, x2 = 0, y2 = 0, i, ctx) {\r\n    i = (i + new Date().getTime() * 2) % 600 //  2 is an OK number,  600/6 =100 integer is good\r\n    const gradient = ctx.createLinearGradient(x1, y1, x2, y2)\r\n    gradient.addColorStop(0, 'rgba(0, 255, 0, 255)')\r\n    gradient.addColorStop(1, 'rgba(254, 0, 0, 255)')\r\n    ctx.fillStyle = 'pink'\r\n    let lineColor\r\n    if (i < 150) {\r\n      // lineColor = \"red\"\r\n      lineColor =\r\n        'rgb(' +\r\n        Math.abs(275 - i) +\r\n        ', ' +\r\n        Math.abs(175 - i / 2) +\r\n        ', ' +\r\n        1000 +\r\n        ')'\r\n    } else if (i < 300) {\r\n      // lineColor=\"blue\"\r\n      lineColor =\r\n        'rgb(' +\r\n        1000 +\r\n        ', ' +\r\n        Math.abs(275 - i) +\r\n        ', ' +\r\n        Math.abs(175 - i / 2) +\r\n        ')'\r\n    } else if (i < 450) {\r\n      // lineColor=\"green\"\r\n      lineColor =\r\n        'rgb(' +\r\n        Math.abs(175 - i / 2) +\r\n        ', ' +\r\n        1000 +\r\n        ', ' +\r\n        Math.abs(275 - i) +\r\n        ')'\r\n    } else if (i < 600) {\r\n      // lineColor = \"red\"\r\n      lineColor =\r\n        'rgb(' +\r\n        Math.abs(175 - i / 2) +\r\n        ', ' +\r\n        1000 +\r\n        ', ' +\r\n        Math.abs(275 - i) +\r\n        ')'\r\n    } else if (i < 750) {\r\n      // lineColor=\"blue\"\r\n      lineColor =\r\n        'rgb(' +\r\n        1000 +\r\n        ', ' +\r\n        Math.abs(275 - i) +\r\n        ', ' +\r\n        Math.abs(175 - i / 2) +\r\n        ')'\r\n    } else if (i < 900) {\r\n      // lineColor=\"green\"\r\n      lineColor =\r\n        'rgb(' +\r\n        Math.abs(275 - i) +\r\n        ', ' +\r\n        Math.abs(175 - i / 2) +\r\n        ', ' +\r\n        1000 +\r\n        ')'\r\n    }\r\n\r\n    ctx.strokeStyle = lineColor\r\n    ctx.lineWidth = bar_width\r\n    ctx.beginPath()\r\n    ctx.moveTo(x1, y1)\r\n    ctx.lineTo(x2, y2)\r\n    ctx.stroke()\r\n  }\r\n\r\n  //Plays Music\r\n  const togglePlay = () => {\r\n    // createAudioContext()\r\n    if (audio.paused) {\r\n      audioContext.resume()\r\n      audio.play()\r\n      setIsPaused(false)\r\n      rafId = requestAnimationFrame(tick)\r\n    } else {\r\n      audio.pause()\r\n      setIsPaused(true)\r\n      cancelAnimationFrame(rafId)\r\n    }\r\n  }\r\n\r\n  function tick() {\r\n    animationLooper(canvas.current)\r\n    analyser.getByteTimeDomainData(frequency_array)\r\n    rafId = requestAnimationFrame(tick)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const getSongList = async () => {\r\n      let res = await axios.get('http://localhost:5000/upload/list')\r\n      setsongSelect(res.data)\r\n      console.log(setsongSelect)\r\n    }\r\n    getSongList()\r\n  }, [])\r\n\r\n  return (\r\n    <div\r\n      className=\"audioControlBackground\"\r\n      style={{ backgroundImage: `url(${background})` }}\r\n    >\r\n      <div className=\"buttonWrapper\">\r\n        <button\r\n          onClick={() => {\r\n            if (audio) {\r\n              togglePlay()\r\n            }\r\n          }}\r\n          style={{\r\n            width: '150px',\r\n            backgroundColor: isPaused\r\n              ? // this is the play/pause button colors\r\n                'yellow'\r\n              : 'green',\r\n          }}\r\n        >\r\n          {isPaused ? 'Play' : 'Pause'}\r\n        </button>\r\n\r\n        <select\r\n          onChange={(e) => {\r\n            getSong(e.target.value)\r\n          }}\r\n        >\r\n          {' '}\r\n          <option>Choose A Song</option>\r\n          {songSelect &&\r\n            songSelect.map((song) => {\r\n              return <option value={song}>{song}</option>\r\n            })}\r\n        </select>\r\n      </div>\r\n      <div className=\"songInfoWrapper\">\r\n        {/* Inserted by SN */}\r\n\r\n        {/* Removed by SN */}\r\n        {/* < h3 style={{ color: textColor }}>{songName}</h3> */}\r\n      </div>\r\n      <div className=\"canvasWrapper\">\r\n        {audio && audio.paused ? <canvas /> : <canvas ref={canvas} />}\r\n      </div>\r\n      <div className=\"sliders\">\r\n        {' '}\r\n        <div>{sliderM}</div>\r\n        <input\r\n          className=\"slider\"\r\n          type=\"range\"\r\n          min=\"0\"\r\n          max=\"8\"\r\n          step=\".5\"\r\n          onChange={(e) => {\r\n            setSliderM(e.target.value)\r\n          }}\r\n          value={sliderM}\r\n        />{' '}\r\n        <div>{sliderN}</div>\r\n        <input\r\n          className=\"slider1\"\r\n          type=\"range\"\r\n          min=\"0\"\r\n          max=\"8\"\r\n          step=\".5\"\r\n          onChange={(e) => {\r\n            setSliderN(e.target.value)\r\n          }}\r\n          value={sliderN}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Displayer\r\n","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\InsertIcon.js",["82"],"import React from 'react'\r\n// import { Container, Row, Col, Image } from 'react-bootstrap'\r\nimport icon from '../Images/Daco.png'\r\n\r\n//Icon input\r\nconst InsertIcon = () => {\r\n  return (\r\n    <div className=\"iconWrapper\">\r\n      <img\r\n        style={{\r\n          width: '15%',\r\n          height: '15%',\r\n        }}\r\n        src={`${icon}`}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InsertIcon\r\n","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\firebase.js",[],"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\FileUpload.js",["83","84","85"],"import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { Card } from 'react-bootstrap'\r\nimport Playlist from './Playlist'\r\n\r\nconst FileUpload = (props) => {\r\n  //Need to use a hook to set text in the label to the file namespace\r\n  const [file, setFile] = useState('')\r\n  const [filename, setFilename] = useState('Choose File')\r\n  const [uploadedFile, setUploadedFile] = useState({})\r\n  const [currentUser, setCurrentUser] = useState('USR------1')\r\n  const [playlist, setPlaylist] = useState()\r\n\r\n  console.log('USER.....:', currentUser)\r\n\r\n  const onChange = (e) => {\r\n    //HTML file uploads come as an array so we want the index of the first file\r\n    setFile(e.target.files[0])\r\n    setFilename(e.target.files[0].name)\r\n  }\r\n\r\n  const onSubmit = async (e) => {\r\n    // e.preventDefault() used to prevent submitting by accident by preventing normal submitting\r\n    e.preventDefault()\r\n\r\n    const formData = new FormData()\r\n    formData.append('file', file)\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        'http://localhost:5000/upload/media',\r\n        formData,\r\n        {\r\n          headers: { 'Content-Type': 'multipart/form-data' },\r\n        },\r\n      )\r\n      const { fileName, filePath } = res.data\r\n      console.log('These are the headers', res.headers)\r\n      if (res.status === 200) {\r\n        console.log('Was uploaded successfully ' + res.status)\r\n      }\r\n      setUploadedFile({ fileName, filePath })\r\n    } catch (err) {\r\n      if (err.response.status === 500) {\r\n        console.error('There is a problem with the server ' + err.message)\r\n      } else {\r\n        //This message is from the server if no file is uploaded\r\n        // console.error('we had an error??? ' + err.response.data.msg)\r\n        console.error(err.response.data.msg)\r\n      }\r\n    }\r\n  }\r\n  // Gets the playlist and sends to the Playlist Component\r\n\r\n  const getPlaylist = () => {\r\n    axios\r\n      .get('http://localhost:5000/upload/list')\r\n      .then((res) => {\r\n        console.log('this is the res', res)\r\n        return res.data\r\n      })\r\n      .then((playlist) => {\r\n        console.log('This is the playlist', playlist)\r\n        setPlaylist(playlist)\r\n      })\r\n  }\r\n  useEffect(() => {\r\n    getPlaylist()\r\n  }, [])\r\n\r\n  // If the audio button is selected\r\n  if (props.mediatype === 'Audio') {\r\n    return (\r\n      <Card style={{ width: '16rem', margin: '16px' }}>\r\n        <Card.Body>\r\n          <Card.Title>{props.mediatype} Upload</Card.Title>\r\n          <Card.Subtitle className=\"mb-2 text-muted\">\r\n            Select {props.mediatype} to Upload\r\n          </Card.Subtitle>\r\n          <Card.Text>\r\n            <>\r\n              <div className=\"mb-2\">\r\n                <form onSubmit={onSubmit}>\r\n                  <div className=\"input-group mb-3\">\r\n                    <input\r\n                      type=\"file\"\r\n                      className=\"form-control mb-5\"\r\n                      id=\"inputGroupFile02\"\r\n                      accept={`${props.mediatype}/wav, ${props.mediatype}/mp3, ${props.mediatype}/mpeg`}\r\n                      onChange={onChange}\r\n                    />\r\n                    <input\r\n                      type=\"submit\"\r\n                      value={`Submit`}\r\n                      // className=\"btn btn-primary btn-block\"\r\n                      className=\"btn1\"\r\n                      onClick={() => getPlaylist()}\r\n                    />\r\n\r\n                    <label\r\n                      className=\"id=inputGroupFile02\"\r\n                      htmlFor=\"inputGroupFile02\"\r\n                    ></label>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </>\r\n          </Card.Text>\r\n        </Card.Body>\r\n        <Playlist playlist={playlist} />\r\n      </Card>\r\n    )\r\n  }\r\n  if (props.mediatype === 'Background') {\r\n    return (\r\n      <Card style={{ width: '16rem', margin: '16px' }}>\r\n        <Card.Body>\r\n          <Card.Title>{props.mediatype} Upload</Card.Title>\r\n          <Card.Subtitle className=\"mb-2 text-muted\">\r\n            Select {props.mediatype} to Upload\r\n          </Card.Subtitle>\r\n          <Card.Text>\r\n            <>\r\n              <div className=\"mb-2\">\r\n                <form onSubmit={onSubmit}>\r\n                  <div className=\"input-group mb-3\">\r\n                    <input\r\n                      type=\"file\"\r\n                      className=\"form-control mb-5\"\r\n                      id=\"inputGroupFile02\"\r\n                      accept={`${props.filetype}/jpg, ${props.filetype}/jpeg, ${props.filetype}/bmp`}\r\n                      onChange={onChange}\r\n                    />\r\n                    <input\r\n                      type=\"submit\"\r\n                      value={`Submit`}\r\n                      // className=\"btn btn-primary btn-block\"\r\n                      className=\"btn1\"\r\n                    />\r\n\r\n                    <label\r\n                      className=\"id=inputGroupFile02\"\r\n                      htmlFor=\"inputGroupFile02\"\r\n                    ></label>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </>\r\n          </Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n    )\r\n  }\r\n  return (\r\n    <Card style={{ width: '16rem', margin: '16px' }}>\r\n      <Card.Body>\r\n        <Card.Title>{props.mediatype} Upload</Card.Title>\r\n        <Card.Subtitle className=\"mb-2 text-muted\">\r\n          Select {props.mediatype} to Upload\r\n        </Card.Subtitle>\r\n        <Card.Text>\r\n          <>\r\n            <div className=\"mb-2\">\r\n              <form onSubmit={onSubmit}>\r\n                <div className=\"input-group mb-3\">\r\n                  <input\r\n                    type=\"file\"\r\n                    className=\"form-control mb-5\"\r\n                    id=\"inputGroupFile02\"\r\n                    accept={`${props.filetype}/gif, ${props.filetype}/png, ${props.filetype}/jpg`}\r\n                    onChange={onChange}\r\n                  />\r\n                  <input\r\n                    type=\"submit\"\r\n                    value={`Submit`}\r\n                    // className=\"btn btn-primary btn-block\"\r\n                    className=\"btn1\"\r\n                  />\r\n\r\n                  <label\r\n                    className=\"id=inputGroupFile02\"\r\n                    htmlFor=\"inputGroupFile02\"\r\n                  ></label>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </>\r\n        </Card.Text>\r\n      </Card.Body>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default FileUpload\r\n","C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\MediaInteractions\\Playlist.js",[],"C:\\Users\\Ifyy\\Documents\\mandalorians\\musicVisualizerApp\\client\\src\\Components\\Navigation.js",["86","87"],{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":1,"column":17,"nodeType":"94","messageId":"95","endLine":1,"endColumn":25},{"ruleId":"92","severity":1,"message":"96","line":7,"column":11,"nodeType":"94","messageId":"95","endLine":7,"endColumn":17},{"ruleId":"92","severity":1,"message":"97","line":42,"column":18,"nodeType":"94","messageId":"95","endLine":42,"endColumn":27},{"ruleId":"92","severity":1,"message":"98","line":45,"column":10,"nodeType":"94","messageId":"95","endLine":45,"endColumn":21},{"ruleId":"92","severity":1,"message":"99","line":45,"column":23,"nodeType":"94","messageId":"95","endLine":45,"endColumn":37},{"ruleId":"100","severity":1,"message":"101","line":55,"column":6,"nodeType":"102","endLine":55,"endColumn":24,"suggestions":"103"},{"ruleId":"104","severity":1,"message":"105","line":9,"column":7,"nodeType":"106","endLine":15,"endColumn":9},{"ruleId":"92","severity":1,"message":"107","line":9,"column":10,"nodeType":"94","messageId":"95","endLine":9,"endColumn":18},{"ruleId":"92","severity":1,"message":"108","line":10,"column":10,"nodeType":"94","messageId":"95","endLine":10,"endColumn":22},{"ruleId":"92","severity":1,"message":"109","line":11,"column":23,"nodeType":"94","messageId":"95","endLine":11,"endColumn":37},{"ruleId":"92","severity":1,"message":"110","line":11,"column":8,"nodeType":"94","messageId":"95","endLine":11,"endColumn":13},{"ruleId":"92","severity":1,"message":"111","line":12,"column":9,"nodeType":"94","messageId":"95","endLine":12,"endColumn":20},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'styles' is assigned a value but never used.","'setCanvas' is assigned a value but never used.","'currentSong' is assigned a value but never used.","'setCurrentSong' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'tick'. Either include it or remove the dependency array.","ArrayExpression",["114"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'filename' is assigned a value but never used.","'uploadedFile' is assigned a value but never used.","'setCurrentUser' is assigned a value but never used.","'error' is assigned a value but never used.","'currentUser' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},"Update the dependencies array to be: [sliderM, sliderN, tick]",{"range":"117","text":"118"},[1696,1714],"[sliderM, sliderN, tick]"]