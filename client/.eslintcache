[{"G:\\Mozambique\\ULS\\Resumes\\EvolveU\\Project-3\\Project-3\\musicVisualizerApp\\client\\src\\index.js":"1","G:\\Mozambique\\ULS\\Resumes\\EvolveU\\Project-3\\Project-3\\musicVisualizerApp\\client\\src\\App.js":"2","G:\\Mozambique\\ULS\\Resumes\\EvolveU\\Project-3\\Project-3\\musicVisualizerApp\\client\\src\\Containers\\VisualizerPage.js":"3","G:\\Mozambique\\ULS\\Resumes\\EvolveU\\Project-3\\Project-3\\musicVisualizerApp\\client\\src\\Components\\Navbars\\NavbarButtons.js":"4","G:\\Mozambique\\ULS\\Resumes\\EvolveU\\Project-3\\Project-3\\musicVisualizerApp\\client\\src\\Containers\\About.js":"5","G:\\Mozambique\\ULS\\Resumes\\EvolveU\\Project-3\\Project-3\\musicVisualizerApp\\client\\src\\Containers\\Home.js":"6","G:\\Mozambique\\ULS\\Resumes\\EvolveU\\Project-3\\Project-3\\musicVisualizerApp\\client\\src\\Containers\\TemplatesPage.js":"7","G:\\Mozambique\\ULS\\Resumes\\EvolveU\\Project-3\\Project-3\\musicVisualizerApp\\client\\src\\Components\\LeftColumnItems\\Audio.js":"8","G:\\Mozambique\\ULS\\Resumes\\EvolveU\\Project-3\\Project-3\\musicVisualizerApp\\client\\src\\Containers\\Signin\\Login.js":"9"},{"size":324,"mtime":1610846831906,"results":"10","hashOfConfig":"11"},{"size":376,"mtime":1610870707121,"results":"12","hashOfConfig":"11"},{"size":8942,"mtime":1610870706996,"results":"13","hashOfConfig":"11"},{"size":2924,"mtime":1610870706783,"results":"14","hashOfConfig":"11"},{"size":429,"mtime":1610846831876,"results":"15","hashOfConfig":"11"},{"size":235,"mtime":1610870706787,"results":"16","hashOfConfig":"11"},{"size":207,"mtime":1610846831890,"results":"17","hashOfConfig":"11"},{"size":2320,"mtime":1610846831845,"results":"18","hashOfConfig":"11"},{"size":749,"mtime":1610870706792,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1t892l7",{"filePath":"23","messages":"24","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"G:\\Mozambique\\ULS\\Resumes\\EvolveU\\Project-3\\Project-3\\musicVisualizerApp\\client\\src\\index.js",[],["41","42"],"G:\\Mozambique\\ULS\\Resumes\\EvolveU\\Project-3\\Project-3\\musicVisualizerApp\\client\\src\\App.js",["43"],"G:\\Mozambique\\ULS\\Resumes\\EvolveU\\Project-3\\Project-3\\musicVisualizerApp\\client\\src\\Containers\\VisualizerPage.js",["44","45","46","47"],"<<<<<<< HEAD\r\nimport React, { createRef, useState, useEffect } from \"react\";\r\nimport { Container, Grid, Button, Image } from \"semantic-ui-react\";\r\nimport AudioComponent from \"../Components/LeftColumnItems/Audio\";\r\nimport songFile from \"../audio/ImperialMarch60.wav\";\r\nimport songFile2 from \"../audio/Rodriguez - Inner City Blues.mp3\";\r\nimport songFile3 from \"../audio/Lucky Dube-Too-Many-People.wav.mp3\";\r\nlet songs = [\r\n  {\r\n    name: \"ImperialMarch60\",\r\n    songFile: songFile,\r\n    color: \"black\",\r\n    fontColor: \"black\",\r\n  },\r\n  {\r\n    name: \"Rodriguez - Inner City Blue\",\r\n    songFile: songFile2,\r\n    color: \"red\",\r\n    fontColor: \"black\",\r\n  },\r\n  {\r\n    name: \"Lucky Dube-Too-Many-People\",\r\n    songFile: songFile3,\r\n    color: \"pink\",\r\n    fontColor: \"darkpurple\",\r\n  },\r\n];\r\nlet rafId;\r\nlet analyser;\r\n// Changing Variables\r\nlet ctx, x_end, y_end, bar_height;\r\n\r\n// constants\r\nconst width = window.innerWidth*(3/4); //\r\nconst height = window.innerHeight;\r\nconst bars = 999; //  max 1030 - leave it in 555\r\nconst bar_width = 2; //  good in 1\r\nconst radius = 0; // innercircle\r\nconst center_x = width / 2 - window.innerWidth/16 ;\r\nconst center_y = height / 2;\r\nlet audioSource = new Audio(songs[0].songFile);\r\nconst VisualizerPage = (props) => {\r\n  const [audio, setAudio] = useState(audioSource);\r\n  const [songList, setSongList] = useState(songs);\r\n  const [canvas, setCanvas] = useState(createRef());\r\n  //\r\n  const [audioContext, setAudioContext] = useState();\r\n  const [isPaused, setIsPaused] = useState(true);\r\n  //\r\n  const [currentSong, setCurrentSong] = useState(0);\r\n  const [frequency_array, setFrequencyArray] = useState();\r\n  const [songName, setSongName] = useState(songs[0].name);\r\n  const [textColor, setTextColor] = useState(songs[0].textColor);\r\n  const [backgroundColor, setBackgroundColor] = useState(\"#282c34\");\r\n\r\n  function animationLooper(canvas) {\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n\r\n    ctx = canvas.getContext(\"2d\");\r\n\r\n    for (var i = 0; i < bars; i++) {\r\n      //divide a circle into equal part\r\n      const rads = (Math.PI * 2) / bars;\r\n\r\n      // Math is magical - you can make lots of visualizer\r\n      bar_height = frequency_array[i] * 1.5;\r\n\r\n      const x = center_x + Math.cos(rads * i) * radius;\r\n      const y = center_y + Math.sin(rads * i) * radius;\r\n      x_end = center_x + Math.cos(rads * i) * (radius + bar_height);\r\n      y_end = center_y + Math.sin(rads * i) * (radius + bar_height);\r\n\r\n      //draw a bar\r\n      drawBar(x, y, x_end, y_end, frequency_array[i], ctx, canvas);\r\n    }\r\n  }\r\n\r\n  function drawBar(x1 = 0, y1 = 0, x2 = 0, y2 = 0, frequency, ctx, canvas) {\r\n    const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\r\n    // gradient.addColorStop(0, \"rgba(35, 7, 77, 1)\");\r\n    // gradient.addColorStop(1, \"rgba(204, 83, 51, 1)\");\r\n    gradient.addColorStop(0, \"rgba(30, 17, 18, 11)\");\r\n    gradient.addColorStop(1, \"rgba(254, 283, 151, 121)\");\r\n    ctx.fillStyle = gradient;\r\n\r\n    const lineColor = \"rgb(\" + frequency + \", \" + frequency + \", \" + 205 + \")\";\r\n    ctx.strokeStyle = lineColor;\r\n    ctx.lineWidth = bar_width;\r\n    ctx.beginPath();\r\n    ctx.moveTo(x1, y1);\r\n    ctx.lineTo(x2, y2);\r\n    ctx.stroke();\r\n  }\r\n\r\n  useEffect(() => {\r\n    let context = new (window.AudioContext || window.webkitAudioContext)();\r\n    let source = context.createMediaElementSource(audio);\r\n\r\n    analyser = context.createAnalyser();\r\n    source.connect(analyser);\r\n    analyser.connect(context.destination);\r\n    let frequencyArray = new Uint8Array(analyser.frequencyBinCount);\r\n    setFrequencyArray(frequencyArray);\r\n    //\r\n    setAudioContext(context);\r\n    //\r\n  }, [audio]);\r\n\r\n  const togglePlay = () => {\r\n    // const { audio } = this;\r\n    if (audio.paused) {\r\n      audioContext.resume();\r\n      audio.play();\r\n      setIsPaused(false);\r\n      rafId = requestAnimationFrame(tick);\r\n    } else {\r\n      audio.pause();\r\n      setIsPaused(true);\r\n      cancelAnimationFrame(rafId);\r\n    }\r\n  };\r\n\r\n  const changeSong = (songNumber) => {\r\n    console.log(\"No8\", songNumber);\r\n    let { name, songFile, color, fontColor } = songList[songNumber];\r\n    audio.src = songFile;\r\n    if (!isPaused) {\r\n      audio.play();\r\n    }\r\n    setCurrentSong(songNumber);\r\n    setSongName(name);\r\n    setBackgroundColor(color);\r\n    setTextColor(fontColor);\r\n  };\r\n\r\n  const tick = () => {\r\n    animationLooper(canvas.current);\r\n    analyser.getByteTimeDomainData(frequency_array);\r\n    rafId = requestAnimationFrame(tick);\r\n  };\r\n  return (\r\n    <Container style={{ margin: 10 }}>\r\n      {/* <div style={{ margin: 20 }}>Navbar</div> */}\r\n      <div className = \"songName\">\r\n        <h3 style = {{color:textColor}} >{songName}</h3>\r\n      \r\n      </div>\r\n\r\n      <Container>\r\n        <Grid>\r\n          <Grid.Row>\r\n            <Grid.Column width = {4}>\r\n              <div>\r\n                <Button circular>\r\n                  <AudioComponent />\r\n                </Button>\r\n              </div>\r\n              <br />\r\n              <div>\r\n                <Button circular>Background</Button>\r\n              </div>\r\n              <br />\r\n              <div>\r\n                <Button circular>Icon</Button>\r\n              </div>\r\n              <br />\r\n              <div>\r\n                <Button circular>Text</Button>\r\n              </div>\r\n              <br />\r\n              <div className = \"audioControl\">\r\n              <button\r\n                  onClick={togglePlay}\r\n                  style={\r\n                    isPaused\r\n                      ? { backgroundColor: \"yellow\" }\r\n                      : { backgroundColor: \"green\" }\r\n                  }\r\n                >\r\n                  {isPaused ? \"Paused\" : \"PLAYING !!!\"}\r\n                </button>\r\n\r\n                <button\r\n                  onClick={() => {\r\n                    changeSong((currentSong + 1) % 3);\r\n                  }}\r\n                >\r\n                  Change Song my Friend\r\n                </button>\r\n              </div>\r\n              <div>\r\n                <Button.Group>\r\n                  <Button>Export</Button>\r\n                  <Button.Or />\r\n                  <Button positive>Save</Button>\r\n                </Button.Group>\r\n              </div>\r\n            </Grid.Column>\r\n            <Grid.Column style={{backgroundColor:backgroundColor}} width = {12}>\r\n              \r\n\r\n              <canvas ref={canvas} />\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n          <Grid.Row></Grid.Row>\r\n        </Grid>\r\n      </Container>\r\n      <Container>\r\n        <Grid columns={1}>\r\n          <Grid.Row>\r\n            <Grid.Column></Grid.Column>\r\n          </Grid.Row>\r\n        </Grid>\r\n      </Container>\r\n    </Container>\r\n  );\r\n};\r\n=======\r\nimport React from 'react'\r\nimport { Button, Card, ListGroup, Nav } from 'react-bootstrap'\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Audio from '../Components/LeftColumnItems/Audio';\r\nimport Background from '../Components/LeftColumnItems/Background';\r\n\r\nconst VisualizerPage = () => {\r\n    return (\r\n\r\n        <Card style={{ width: '20rem' }}>\r\n            {/* <Card.Header>Featured</Card.Header> */}\r\n            <Router>\r\n                <ListGroup variant=\"flush\">\r\n                    <Card.Body>\r\n\r\n                        <ListGroup.Item>\r\n                            <Nav.Link href=\"/Audio\">\r\n                                <Button className=\"ui secondary button\">Audio </Button>\r\n                            </Nav.Link>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <Nav.Link href=\"/Background\">\r\n                                <Button className=\"ui secondary button\">Background </Button>\r\n                            </Nav.Link>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <Button className=\"ui secondary button\">Icon </Button>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <Button className=\"ui secondary button\">Text </Button>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <Button className=\"ui secondary button\">Export </Button>\r\n                            <Button className=\"ui secondary button\">Save </Button>\r\n                        </ListGroup.Item>\r\n\r\n                    </Card.Body>\r\n                </ListGroup>\r\n\r\n\r\n                <Switch>\r\n                    <Route path=\"/Audio\" exact component={Audio} />\r\n                    {/* <Audio />\r\n                    </Route> */}\r\n                    <Route path=\"/Background\">\r\n                        <Background />\r\n                    </Route>\r\n                </Switch>\r\n\r\n            </Router>\r\n\r\n\r\n        </Card>\r\n\r\n    )\r\n}\r\n>>>>>>> 988dc2454f20bc0fc0fee5db9c685884bf903371\r\n\r\nexport default VisualizerPage;\r\n","G:\\Mozambique\\ULS\\Resumes\\EvolveU\\Project-3\\Project-3\\musicVisualizerApp\\client\\src\\Components\\Navbars\\NavbarButtons.js",[],"G:\\Mozambique\\ULS\\Resumes\\EvolveU\\Project-3\\Project-3\\musicVisualizerApp\\client\\src\\Containers\\About.js",[],"G:\\Mozambique\\ULS\\Resumes\\EvolveU\\Project-3\\Project-3\\musicVisualizerApp\\client\\src\\Containers\\Home.js",[],"G:\\Mozambique\\ULS\\Resumes\\EvolveU\\Project-3\\Project-3\\musicVisualizerApp\\client\\src\\Containers\\TemplatesPage.js",[],"G:\\Mozambique\\ULS\\Resumes\\EvolveU\\Project-3\\Project-3\\musicVisualizerApp\\client\\src\\Components\\LeftColumnItems\\Audio.js",["48"],"import React, { useState, Fragment } from 'react'\r\nimport axios from 'axios'\r\n\r\nconst Audio = () => {\r\n  //Need to use a hook to set text in the label to the file namespace\r\n  const [file, setFile] = useState('')\r\n  const [filename, setFilename] = useState('Choose File')\r\n  const [uploadedFile, setUploadedFile] = useState({})\r\n\r\n  const onChange = (e) => {\r\n    //HTML file uploads come as an array so we want the index of the first file\r\n    setFile(e.target.files[0])\r\n    setFilename(e.target.files[0].name)\r\n  }\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault()\r\n    const formData = new FormData()\r\n    formData.append('file', file)\r\n\r\n    try {\r\n      //Need to connect to the server\r\n      const res = await axios.post('/upload', formData, {\r\n        headers: { 'Content-Type': 'multipart/form-data' },\r\n      })\r\n      const { fileName, filePath } = res.data\r\n      if (res.status === 200) {\r\n        console.log('Was uploaded successfully ' + res.status)\r\n      }\r\n      setUploadedFile({ fileName, filePath })\r\n    } catch (err) {\r\n      if (err.response.status === 500) {\r\n        console.error('There is a problem with the server ' + err.message)\r\n      } else {\r\n        //This message is from the server if no file is uploaded\r\n        console.error(err.response.data.msg)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    //The fragment allows to group children without creating extra nodes\r\n    <Fragment>\r\n      <form onSubmit={onSubmit}>\r\n        <div className=\"input-group mb-3\">\r\n          <input\r\n            type=\"file\"\r\n            className=\"form-control\"\r\n            id=\"inputGroupFile02\"\r\n            onChange={onChange}\r\n          />\r\n          <input\r\n            type=\"submit\"\r\n            value=\"Upload\"\r\n            className=\"btn btn-primary btn-block\"\r\n          />\r\n\r\n          <label\r\n            className=\"id=inputGroupFile02\"\r\n            htmlFor=\"inputGroupFile02\"\r\n          ></label>\r\n        </div>\r\n      </form>\r\n      {uploadedFile ? (\r\n        <div className=\"row mt-5\">\r\n          <div className=\"col-md-6 m-auto\">\r\n            <h3 className=\"text-center\">{uploadedFile.filename}</h3>\r\n            <img style={{ width: '100%' }} src={uploadedFile.filepath} alt=\"\" />\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Audio\r\n","G:\\Mozambique\\ULS\\Resumes\\EvolveU\\Project-3\\Project-3\\musicVisualizerApp\\client\\src\\Containers\\Signin\\Login.js",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":2,"message":"54","line":12,"column":8,"nodeType":"55","endLine":12,"endColumn":22},{"ruleId":"56","severity":1,"message":"57","line":2,"column":35,"nodeType":"58","messageId":"59","endLine":2,"endColumn":40},{"ruleId":"56","severity":1,"message":"60","line":42,"column":17,"nodeType":"58","messageId":"59","endLine":42,"endColumn":25},{"ruleId":"56","severity":1,"message":"61","line":43,"column":20,"nodeType":"58","messageId":"59","endLine":43,"endColumn":31},{"ruleId":"56","severity":1,"message":"62","line":44,"column":18,"nodeType":"58","messageId":"59","endLine":44,"endColumn":27},{"ruleId":"56","severity":1,"message":"63","line":7,"column":10,"nodeType":"58","messageId":"59","endLine":7,"endColumn":18},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"react/jsx-no-undef","'VisualizerPage' is not defined.","JSXIdentifier","no-unused-vars","'Image' is defined but never used.","Identifier","unusedVar","'setAudio' is assigned a value but never used.","'setSongList' is assigned a value but never used.","'setCanvas' is assigned a value but never used.","'filename' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]