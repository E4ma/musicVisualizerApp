[{"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\index.js":"1","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\App.js":"2","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\TemplatesPage.js":"3","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Navbars\\Navigation.js":"4","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\About.js":"5","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Home.js":"6","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Signin\\Login.js":"7","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Displayer.js":"8","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\IconInteractions\\InsertIcon.js":"9","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\UploadAudio\\AudioUpload.js":"10","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\UploadBackground\\backgroundUpload.js":"11","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\IconInteractions\\IconUpload.js":"12"},{"size":404,"mtime":1611804724730,"results":"13","hashOfConfig":"14"},{"size":1445,"mtime":1612301689196,"results":"15","hashOfConfig":"14"},{"size":207,"mtime":1611177150255,"results":"16","hashOfConfig":"14"},{"size":2324,"mtime":1612301689206,"results":"17","hashOfConfig":"14"},{"size":1248,"mtime":1611804724707,"results":"18","hashOfConfig":"14"},{"size":2448,"mtime":1612301689198,"results":"19","hashOfConfig":"14"},{"size":651,"mtime":1611705654854,"results":"20","hashOfConfig":"14"},{"size":5777,"mtime":1612593078367,"results":"21","hashOfConfig":"14"},{"size":396,"mtime":1612301689200,"results":"22","hashOfConfig":"14"},{"size":2859,"mtime":1612503513351,"results":"23","hashOfConfig":"14"},{"size":2831,"mtime":1612301689208,"results":"24","hashOfConfig":"14"},{"size":2783,"mtime":1612301689199,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"mpxc4k",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"28"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"28"},"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\index.js",[],["58","59"],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\App.js",["60"],"import React, { useState } from 'react'\r\nimport './App.css'\r\nimport Navigation from './Components/Navbars/Navigation'\r\nimport About from './Components/About'\r\nimport TemplatesPage from './Components/TemplatesPage'\r\nimport Home from './Components/Home'\r\nimport Login from './Components/Signin/Login'\r\n\r\nconst App = () => {\r\n  const [route, setRoute] = useState('signout')\r\n  const [isSignedIn, setIsSignedIn] = useState(false)\r\n  const [displayPage, setDisplayPage] = useState(Home)\r\n\r\n  if (isSignedIn === 'signout') {\r\n    setIsSignedIn(false)\r\n  } else if (isSignedIn === 'signin') {\r\n    setIsSignedIn(true)\r\n  }\r\n\r\n  const onRouteChange = (route) => {\r\n    if (route === 'signout') {\r\n      setRoute({ isSignedIn: false })\r\n    } else if (route === 'signin') {\r\n      setRoute({ isSignedIn: true })\r\n    } else if (route === 'Home') {\r\n      setDisplayPage(<Home onRouteChange={onRouteChange} />)\r\n    } else if (route === 'About') {\r\n      setDisplayPage(<About onRouteChange={onRouteChange} />)\r\n    } else if (route === 'TemplatesPage') {\r\n      setDisplayPage(<TemplatesPage />)\r\n    } else if (route === 'Login') {\r\n      setDisplayPage(<Login onRouteChange={onRouteChange} />)\r\n    }\r\n    setRoute({ route: route })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"Frontscr\">\r\n        <Navigation isSignedIn={setIsSignedIn} onRouteChange={onRouteChange} />\r\n        {displayPage}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\TemplatesPage.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Navbars\\Navigation.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\About.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Home.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Signin\\Login.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Displayer.js",["61","62","63"],"import React, { createRef, useState, useEffect, useLayoutEffect } from \"react\";\r\n\r\nimport axios from \"axios\";\r\n\r\nconst UpdateWindowSize = () => {\r\n  const [size, setSize] = useState([1000, 1000]);\r\n  useLayoutEffect(() => {\r\n    const updateSize = () => {\r\n      setSize([window.innerWidth, window.innerHeight]);\r\n    };\r\n    window.addEventListener(\"resize\", updateSize);\r\n    return () => window.removeEventListener(\"resize\", updateSize);\r\n  }, []);\r\n  return size;\r\n};\r\n\r\nlet rafId;\r\n\r\nlet ctx, x_end, y_end, bar_height;\r\n\r\nconst bars = 600; //  max 1030 - leave it in 555\r\nconst bar_width = 2; //  good in 1\r\nconst radius = 0; // innercircle\r\nlet audio\r\nlet audioContext\r\nlet source\r\nlet analyser\r\nlet frequency_array\r\nconst createAudioContext = () => {\r\n  audio = new Audio();\r\n\r\n  audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n  source = audioContext.createMediaElementSource(audio);\r\n  analyser = audioContext.createAnalyser();\r\n  source.connect(analyser);\r\n  analyser.connect(audioContext.destination);\r\n  frequency_array = new Uint8Array(analyser.frequencyBinCount);\r\n}\r\n\r\n\r\nconst Displayer = () => {\r\n  const [width, height] = UpdateWindowSize();\r\n  const [canvas, setCanvas] = useState(createRef());\r\n  const [isPaused, setIsPaused] = useState(true);\r\n  const [songSelect, setsongSelect] = useState()\r\n  const [currentSong, setCurrentSong] = useState(0);\r\n  const center_x = width / 2;\r\n  const center_y = height / 2;\r\n\r\n  const getSong = async (song) => {\r\n    createAudioContext()\r\n    const response = await axios.get(`http://localhost:5000/download/media/${song}`, { responseType: \"blob\" });\r\n    audio.src = URL.createObjectURL(response.data);\r\n    audio.load();\r\n    // audio.play()\r\n  };\r\n  function animationLooper(canvas) {\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    ctx = canvas.getContext(\"2d\");\r\n    for (let i = 0; i < bars; i++) {\r\n      //divide a circle into equal part\r\n      const rads = (Math.PI * 2) / bars;\r\n      // Math is magical - you can make lots of visualizer\r\n      // this 4.5 decides the canves size\r\n      bar_height = frequency_array[i] * 2.5;\r\n      const x = center_x + Math.cos(rads * i) * radius;\r\n      const y = center_y + Math.sin(rads * i) * radius;\r\n      x_end = center_x + Math.cos(rads * i) * (radius + bar_height);\r\n      y_end = center_y + Math.sin(rads * i) * (radius + bar_height);\r\n      //draw a bar\r\n      drawBar(x, y, x_end, y_end, i, ctx, canvas);\r\n    }\r\n  }\r\n  function drawBar(x1 = 0, y1 = 0, x2 = 0, y2 = 0, i, ctx) {\r\n    i = (i + new Date().getTime() * 2) % 600  //  2 is an OK number,  600/6 =100 integer is good\r\n    const gradient = ctx.createLinearGradient(x1, y1, x2, y2);\r\n    gradient.addColorStop(0, \"rgba(0, 255, 0, 255)\");\r\n    gradient.addColorStop(1, \"rgba(254, 0, 0, 255)\");\r\n    ctx.fillStyle = \"pink\";\r\n    let lineColor\r\n    if (i < 100) {\r\n      // lineColor = \"red\"\r\n      lineColor = \"rgb(\" + Math.abs(275 - i) + \", \" + Math.abs(175 - i / 2) + \", \" + 1000 + \")\";\r\n    } else if (i < 200) {\r\n      // lineColor=\"blue\"\r\n      lineColor = \"rgb(\" + 1000 + \", \" + Math.abs(275 - i) + \", \" + Math.abs(175 - i / 2) + \")\";\r\n\r\n    } else if (i < 300) {\r\n      // lineColor=\"green\"\r\n      lineColor = \"rgb(\" + Math.abs(175 - i / 2) + \", \" + 1000 + \", \" + Math.abs(275 - i) + \")\";\r\n\r\n    } else if (i < 400) {\r\n      // lineColor = \"red\"\r\n      lineColor = \"rgb(\" + Math.abs(175 - i / 2) + \", \" + 1000 + \", \" + Math.abs(275 - i) + \")\";\r\n\r\n    } else if (i < 500) {\r\n      // lineColor=\"blue\"\r\n      lineColor = \"rgb(\" + 1000 + \", \" + Math.abs(275 - i) + \", \" + Math.abs(175 - i / 2) + \")\";\r\n\r\n    } else if (i < 600) {\r\n      // lineColor=\"green\"\r\n      lineColor = \"rgb(\" + Math.abs(275 - i) + \", \" + Math.abs(175 - i / 2) + \", \" + 1000 + \")\";\r\n\r\n    }\r\n\r\n    ctx.strokeStyle = lineColor;\r\n    ctx.lineWidth = bar_width;\r\n    ctx.beginPath();\r\n    ctx.moveTo(x1, y1);\r\n    ctx.lineTo(x2, y2);\r\n    ctx.stroke();\r\n  }\r\n\r\n\r\n  const togglePlay = () => {\r\n    // createAudioContext()\r\n    if (audio.paused) {\r\n      audioContext.resume();\r\n      audio.play();\r\n      setIsPaused(false);\r\n      rafId = requestAnimationFrame(tick);\r\n    } else {\r\n      audio.pause();\r\n      setIsPaused(true);\r\n      cancelAnimationFrame(rafId);\r\n    }\r\n  };\r\n\r\n  function tick() {\r\n    animationLooper(canvas.current);\r\n    analyser.getByteTimeDomainData(frequency_array);\r\n    rafId = requestAnimationFrame(tick);\r\n  }\r\n  useEffect(() => {\r\n    const getSongList = async () => {\r\n      let res = await axios.get('http://localhost:5000/download/list')\r\n      setsongSelect(res.data)\r\n    }\r\n    getSongList()\r\n\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"audioControlBackground\">\r\n      <div className=\"buttonWrapper\">\r\n        <button\r\n\r\n          onClick={() => {\r\n            if (audio) {\r\n              togglePlay()\r\n            }\r\n          }\r\n          }\r\n          style={{\r\n            width: \"200px\",\r\n            backgroundColor: isPaused\r\n              ? // this is the play/pause button colors\r\n              \"yellow\"\r\n              : \"green\"\r\n          }}\r\n        >\r\n          {isPaused ? \"Play\" : \"Pause\"}\r\n        </button>\r\n\r\n        <select\r\n\r\n          onChange={(e) => {\r\n            getSong(e.target.value);\r\n          }}\r\n        > <option>Choose A Song</option>\r\n          {songSelect && songSelect.map((song) => {\r\n            return <option value={song}>{song}</option>;\r\n          })}\r\n        </select>\r\n      </div>\r\n      <div className=\"songInfoWrapper\">\r\n        {/* Inserted by SN */}\r\n\r\n        {/* Removed by SN */}\r\n        {/* < h3 style={{ color: textColor }}>{songName}</h3> */}\r\n      </div>\r\n      <div className=\"canvasWrapper\">\r\n        <canvas ref={canvas} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Displayer;\r\n","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\IconInteractions\\InsertIcon.js",["64","65","66","67","68"],"import React from 'react'\r\nimport { Container, Row, Col, Image } from 'react-bootstrap'\r\nimport icon from '../Images/Daco.png'\r\n\r\n//Icon input\r\nconst InsertIcon = () => {\r\n  return (\r\n    <div className=\"iconWrapper\">\r\n      <img\r\n        style={{\r\n          width: '20%',\r\n          height: '20%',\r\n        }}\r\n        src={`${icon}`}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InsertIcon\r\n",["69","70"],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\UploadAudio\\AudioUpload.js",["71","72"],"import React, { useState } from 'react'\r\nimport axios from 'axios'\r\nimport { Card } from 'react-bootstrap'\r\n\r\nconst AudioUpload = () => {\r\n  //Need to use a hook to set text in the label to the file namespace\r\n  const [file, setFile] = useState('')\r\n  const [filename, setFilename] = useState('Choose File')\r\n  const [uploadedFile, setUploadedFile] = useState({})\r\n\r\n  const onChange = (e) => {\r\n    //HTML file uploads come as an array so we want the index of the first file\r\n    setFile(e.target.files[0])\r\n    setFilename(e.target.files[0].name)\r\n  }\r\n\r\n  const onSubmit = async (e) => {\r\n    // e.preventDefault() used to prevent submitting by accident by preventing normal submitting\r\n    e.preventDefault()\r\n    const formData = new FormData()\r\n    formData.append('file', file)\r\n\r\n    try {\r\n      //Need to connect to the server the endpoint is media\r\n      const res = await axios.post(\r\n        'http://localhost:5000/upload/media',\r\n        formData,\r\n        {\r\n          headers: { 'Content-Type': 'multipart/form-data' },\r\n        },\r\n      )\r\n      const { fileName, filePath } = res.data\r\n      console.log(res.headers)\r\n      if (res.status === 200) {\r\n        console.log('Was uploaded successfully ' + res.status)\r\n      }\r\n      setUploadedFile({ fileName, filePath })\r\n    } catch (err) {\r\n      if (err.response.status === 500) {\r\n        console.error('There is a problem with the server ' + err.message)\r\n      } else {\r\n        //This message is from the server if no file is uploaded\r\n        // console.error('we had an error??? ' + err.response.data.msg)\r\n        console.error(err.response.data.msg)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card style={{ width: '18rem', margin: '20px' }}>\r\n      <Card.Body>\r\n        <Card.Title>Audio Upload</Card.Title>\r\n        <Card.Subtitle className=\"mb-2 text-muted\">\r\n          Select audio to upload\r\n        </Card.Subtitle>\r\n        <Card.Text>\r\n          <>\r\n            <div className=\"mb-2\">\r\n              <form onSubmit={onSubmit}>\r\n                <div className=\"input-group mb-3\">\r\n                  <input\r\n                    type=\"file\"\r\n                    className=\"form-control mb-5\"\r\n                    id=\"inputGroupFile02\"\r\n                    accept=\"audio/wav, audio/mp3, audio/mpeg\"\r\n                    onChange={onChange}\r\n                  />\r\n                  <input\r\n                    type=\"submit\"\r\n                    value=\"UploadAudio\"\r\n                    className=\"btn btn-primary btn-block\"\r\n                  />\r\n\r\n                  <label\r\n                    className=\"id=inputGroupFile02\"\r\n                    htmlFor=\"inputGroupFile02\"\r\n                  ></label>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </>\r\n        </Card.Text>\r\n      </Card.Body>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default AudioUpload\r\n","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\UploadBackground\\backgroundUpload.js",["73","74"],"import React, { useState } from 'react'\r\nimport axios from 'axios'\r\nimport { Card } from 'react-bootstrap'\r\n\r\nconst BackgroundUpload = () => {\r\n  //Need to use a hook to set text in the label to the file namespace\r\n  const [file, setFile] = useState('')\r\n  const [filename, setFilename] = useState('Choose File')\r\n  const [uploadedFile, setUploadedFile] = useState({})\r\n\r\n  const onChange = (e) => {\r\n    //HTML file uploads come as an array so we want the index of the first file\r\n    setFile(e.target.files[0])\r\n    setFilename(e.target.files[0].name)\r\n  }\r\n\r\n  const onSubmit = async (e) => {\r\n    //used to prevent submitting by accident by preventing normal submitting\r\n    e.preventDefault()\r\n    const formData = new FormData()\r\n    formData.append('file', file)\r\n\r\n    try {\r\n      //Need to connect to the server the endpoint is media\r\n      const res = await axios.post(\r\n        'http://localhost:5000/upload/media',\r\n        formData,\r\n        {\r\n          headers: { 'Content-Type': 'multipart/form-data' },\r\n        },\r\n      )\r\n      const { fileName, filePath } = res.data\r\n      if (res.status === 200) {\r\n        console.log('Was uploaded successfully ' + res.status)\r\n      }\r\n      setUploadedFile({ fileName, filePath })\r\n    } catch (err) {\r\n      if (err.response.status === 500) {\r\n        console.error('There is a problem with the server ' + err.message)\r\n      } else {\r\n        //This message is from the server if no file is uploaded\r\n        console.error(err.response.data.msg)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    //The fragment allows to group children without creating extra nodes\r\n    <Card style={{ width: '18rem', margin: '24px' }}>\r\n      <Card.Body>\r\n        <Card.Title>Upload Background</Card.Title>\r\n        <Card.Subtitle className=\"mb-2 text-muted\">\r\n          Select a background to upload\r\n        </Card.Subtitle>\r\n        <Card.Text>\r\n          <>\r\n            <div className=\"mb-2\">\r\n              <form onSubmit={onSubmit}>\r\n                <div className=\"input-group mb-3\">\r\n                  <input\r\n                    type=\"file\"\r\n                    className=\"form-control\"\r\n                    id=\"inputGroupFile02\"\r\n                    accept=\"image/gif, image/jpeg, image/jpg\"\r\n                    onChange={onChange}\r\n                  />\r\n                  <input\r\n                    type=\"submit\"\r\n                    value=\"Upload Background\"\r\n                    className=\"btn btn-primary btn-block\"\r\n                  />\r\n\r\n                  <label\r\n                    className=\"id=inputGroupFile02\"\r\n                    htmlFor=\"inputGroupFile02\"\r\n                  ></label>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </>\r\n        </Card.Text>\r\n      </Card.Body>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default BackgroundUpload\r\n","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\IconInteractions\\IconUpload.js",["75","76"],"import React, { useState, Fragment } from 'react'\r\nimport axios from 'axios'\r\nimport { Card } from 'react-bootstrap'\r\n\r\nconst IconUpload = () => {\r\n  //Need to use a hook to set text in the label to the file namespace\r\n  const [file, setFile] = useState('')\r\n  const [filename, setFilename] = useState('Choose File')\r\n  const [uploadedFile, setUploadedFile] = useState({})\r\n\r\n  const onChange = (e) => {\r\n    //HTML file uploads come as an array so we want the index of the first file\r\n    setFile(e.target.files[0])\r\n    setFilename(e.target.files[0].name)\r\n  }\r\n\r\n  const onSubmit = async (e) => {\r\n    //used to prevent submitting by accident by preventing normal submitting\r\n    e.preventDefault()\r\n    const formData = new FormData()\r\n    formData.append('file', file)\r\n    console.log(formData)\r\n    try {\r\n      //Need to connect to the server this is the endpoint\r\n      const res = await axios.post(\r\n        'http://localhost:5000/upload/icon',\r\n        formData,\r\n        {\r\n          headers: { 'Content-Type': 'multipart/form-data' },\r\n        },\r\n      )\r\n      const { fileName, filePath } = res.data\r\n      if (res.status === 200) {\r\n        console.log('Icon was uploaded successfully ' + res.status)\r\n      }\r\n      setUploadedFile({ fileName, filePath })\r\n    } catch (err) {\r\n      if (err.response.status === 500) {\r\n        console.error('There is a problem with the server ' + err.message)\r\n      } else {\r\n        //This message is from the server if no file is uploaded\r\n        console.error(err.response.data.msg)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card style={{ width: '18rem', margin: '24px' }}>\r\n      <Card.Body>\r\n        <Card.Title>Upload Icon</Card.Title>\r\n        <Card.Subtitle className=\"mb-2 text-muted\">\r\n          Select an Icon to upload\r\n        </Card.Subtitle>\r\n        <Card.Text>\r\n          <>\r\n            <div className=\"mb-2\">\r\n              <form onSubmit={onSubmit}>\r\n                <div className=\"input-group mb-3\">\r\n                  <input\r\n                    type=\"file\"\r\n                    className=\"form-control\"\r\n                    id=\"inputGroupFile02\"\r\n                    accept=\"image/gif, image/png, image/jpeg, image/jpg\"\r\n                    onChange={onChange}\r\n                  />\r\n                  <input\r\n                    type=\"submit\"\r\n                    value=\"Upload Background\"\r\n                    className=\"btn btn-primary btn-block\"\r\n                  />\r\n\r\n                  <label\r\n                    className=\"id=inputGroupFile02\"\r\n                    htmlFor=\"inputGroupFile02\"\r\n                  ></label>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </>\r\n        </Card.Text>\r\n      </Card.Body>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default IconUpload\r\n",{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":10,"column":10,"nodeType":"83","messageId":"84","endLine":10,"endColumn":15},{"ruleId":"81","severity":1,"message":"85","line":43,"column":18,"nodeType":"83","messageId":"84","endLine":43,"endColumn":27},{"ruleId":"81","severity":1,"message":"86","line":46,"column":10,"nodeType":"83","messageId":"84","endLine":46,"endColumn":21},{"ruleId":"81","severity":1,"message":"87","line":46,"column":23,"nodeType":"83","messageId":"84","endLine":46,"endColumn":37},{"ruleId":"81","severity":1,"message":"88","line":2,"column":10,"nodeType":"83","messageId":"84","endLine":2,"endColumn":19},{"ruleId":"81","severity":1,"message":"89","line":2,"column":21,"nodeType":"83","messageId":"84","endLine":2,"endColumn":24},{"ruleId":"81","severity":1,"message":"90","line":2,"column":26,"nodeType":"83","messageId":"84","endLine":2,"endColumn":29},{"ruleId":"81","severity":1,"message":"91","line":2,"column":31,"nodeType":"83","messageId":"84","endLine":2,"endColumn":36},{"ruleId":"92","severity":1,"message":"93","line":9,"column":7,"nodeType":"94","endLine":15,"endColumn":9},{"ruleId":"77","replacedBy":"95"},{"ruleId":"79","replacedBy":"96"},{"ruleId":"81","severity":1,"message":"97","line":8,"column":10,"nodeType":"83","messageId":"84","endLine":8,"endColumn":18},{"ruleId":"81","severity":1,"message":"98","line":9,"column":10,"nodeType":"83","messageId":"84","endLine":9,"endColumn":22},{"ruleId":"81","severity":1,"message":"97","line":8,"column":10,"nodeType":"83","messageId":"84","endLine":8,"endColumn":18},{"ruleId":"81","severity":1,"message":"98","line":9,"column":10,"nodeType":"83","messageId":"84","endLine":9,"endColumn":22},{"ruleId":"81","severity":1,"message":"97","line":8,"column":10,"nodeType":"83","messageId":"84","endLine":8,"endColumn":18},{"ruleId":"81","severity":1,"message":"98","line":9,"column":10,"nodeType":"83","messageId":"84","endLine":9,"endColumn":22},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"no-unused-vars","'route' is assigned a value but never used.","Identifier","unusedVar","'setCanvas' is assigned a value but never used.","'currentSong' is assigned a value but never used.","'setCurrentSong' is assigned a value but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Image' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["99"],["100"],"'filename' is assigned a value but never used.","'uploadedFile' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]