[{"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\index.js":"1","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\App.js":"2","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Home.js":"3","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\About.js":"4","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\TemplatesPage.js":"5","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Signin\\Login.js":"6","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Navbars\\Navigation.js":"7","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Displayer.js":"8","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\UploadAudio\\AudioUpload.js":"9","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\UploadBackground\\backgroundUpload.js":"10","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\UploadIcon\\IconUpload.js":"11"},{"size":352,"mtime":1611415085082,"results":"12","hashOfConfig":"13"},{"size":1419,"mtime":1611705678204,"results":"14","hashOfConfig":"13"},{"size":2410,"mtime":1611706526543,"results":"15","hashOfConfig":"13"},{"size":429,"mtime":1611174001887,"results":"16","hashOfConfig":"13"},{"size":207,"mtime":1611177150255,"results":"17","hashOfConfig":"13"},{"size":651,"mtime":1611705654854,"results":"18","hashOfConfig":"13"},{"size":2482,"mtime":1611705678397,"results":"19","hashOfConfig":"13"},{"size":5949,"mtime":1611733902301,"results":"20","hashOfConfig":"13"},{"size":3161,"mtime":1611724733573,"results":"21","hashOfConfig":"13"},{"size":2841,"mtime":1611705678406,"results":"22","hashOfConfig":"13"},{"size":2857,"mtime":1611705678408,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"mpxc4k",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":3,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"26"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"26"},"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\index.js",[],["54","55"],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\App.js",["56"],"import React, { useState } from 'react'\r\nimport './App.css'\r\nimport Navigation from './Components/Navbars/Navigation'\r\nimport About from './Components/About'\r\nimport TemplatesPage from './Components/TemplatesPage'\r\nimport Home from './Components/Home'\r\nimport Login from './Components/Signin/Login'\r\n\r\nconst App = () => {\r\n  const [route, setRoute] = useState('signout')\r\n  const [isSignedIn, setIsSignedIn] = useState(false)\r\n  const [displayPage, setDisplayPage] = useState(Home)\r\n\r\n  if (isSignedIn === 'signout') {\r\n    setIsSignedIn(false)\r\n  } else if (isSignedIn === 'signin') {\r\n    setIsSignedIn(true)\r\n  }\r\n\r\n  const onRouteChange = (route) => {\r\n    if (route === 'signout') {\r\n      setRoute({ isSignedIn: false })\r\n    } else if (route === 'signin') {\r\n      setRoute({ isSignedIn: true })\r\n    } else if (route === 'Home') {\r\n      setDisplayPage(<Home onRouteChange={onRouteChange} />)\r\n    } else if (route === 'About') {\r\n      setDisplayPage(<About onRouteChange={onRouteChange} />)\r\n    } else if (route === 'TemplatesPage') {\r\n      setDisplayPage(<TemplatesPage />)\r\n    } else if (route === 'Login') {\r\n      setDisplayPage(<Login onRouteChange={onRouteChange} />)\r\n    }\r\n    setRoute({ route: route })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Navigation isSignedIn={setIsSignedIn} onRouteChange={onRouteChange} />\r\n      {displayPage}\r\n      {/* <Footer /> */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Home.js",["57","58"],"import React from 'react'\r\nimport '../home.css'\r\nimport {\r\n  Container,\r\n  Card,\r\n  Row,\r\n  Col,\r\n  Nav,\r\n  Button,\r\n  ButtonGroup,\r\n  Jumbotron,\r\n} from 'react-bootstrap'\r\nimport Tab from 'react-bootstrap/Tab'\r\nimport BackgroundImport from './UploadBackground/backgroundUpload'\r\nimport Displayer from './Displayer'\r\nimport AudioImport from './UploadAudio/AudioUpload'\r\nimport IconUpload from './UploadIcon/IconUpload'\r\n\r\nconst Home = () => {\r\n  return (\r\n    <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\r\n      <Row>\r\n        <Col sm={3}>\r\n          <Nav variant=\"pills\" className=\"flex-column\" bg=\"transparent\">\r\n            <br />\r\n\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"uploadAudio\">\r\n                Audio\r\n                {/* <Button size=\"sm\">Audio</Button> */}\r\n              </Nav.Link>\r\n            </Nav.Item>\r\n            <br />\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"uploadBackground\">Background</Nav.Link>\r\n            </Nav.Item>\r\n            <br />\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"uploadIcon\">Icon </Nav.Link>\r\n            </Nav.Item>\r\n            <br />\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"text\">Text</Nav.Link>\r\n            </Nav.Item>\r\n            <br />\r\n            <ButtonGroup aria-label=\"Basic example\">\r\n              <Button variant=\"secondary\">Export</Button>\r\n              <Button variant=\"secondary\">Save</Button>\r\n            </ButtonGroup>\r\n          </Nav>\r\n        </Col>\r\n\r\n        {/* <Col sm={9}> */}\r\n        <Tab.Content>\r\n          <Tab.Pane eventKey=\"uploadAudio\">\r\n            <AudioImport />\r\n          </Tab.Pane>\r\n          <Tab.Pane eventKey=\"uploadBackground\">\r\n            <BackgroundImport />\r\n          </Tab.Pane>\r\n          <Tab.Pane eventKey=\"uploadIcon\">\r\n            <IconUpload />\r\n          </Tab.Pane>\r\n        </Tab.Content>\r\n        {/* </Col> */}\r\n\r\n        {/* card for displaying the visualizer on the right panel*/}\r\n\r\n        <Col sm={3}>\r\n          <br />\r\n          {/* <Card style={{ width: '70rem', height: '40rem' }}>\r\n            <Card.Body>\r\n              <Card.Title>Visualizer</Card.Title>\r\n              <Displayer />\r\n            </Card.Body>\r\n          </Card> */}\r\n          <Jumbotron>\r\n            <Displayer />\r\n          </Jumbotron>\r\n        </Col>\r\n      </Row>\r\n    </Tab.Container>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\About.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\TemplatesPage.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Signin\\Login.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Navbars\\Navigation.js",[],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\Displayer.js",["59","60","61","62","63","64"],"import React, { createRef, useState, useEffect, useLayoutEffect } from 'react'\r\n// import songFile from './audio/ImperialMarch60.wav'\r\n// import songFile2 from './audio/Rodriguez - Inner City Blues.mp3'\r\n// // import songFile3 from './audio/Lucky Dube-Too-Many-People.wav.mp3'\r\n// import songFile3 from './audio/TrimmedTrack2.mp3'\r\n\r\nconst UpdateWindowSize = () => {\r\n  const [size, setSize] = useState([1000, 1000])\r\n  useLayoutEffect(() => {\r\n    const updateSize = () => {\r\n      setSize([window.innerWidth, window.innerHeight])\r\n      // console.log(window.innerWidth, window.innerHeight)\r\n    }\r\n    window.addEventListener('resize', updateSize)\r\n    return () => window.removeEventListener('resize', updateSize)\r\n  }, [])\r\n  return size\r\n}\r\n\r\n\r\nconst songList = () => {\r\n\r\n  fetch('/http://localhost:4000/songs', {\r\n    method: 'get',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({\r\n      songs: Response.songFile.value,\r\n      name: Response.name.value,\r\n    })\r\n  })\r\n}\r\n\r\n\r\n\r\n// let songs = [\r\n//   {\r\n//     name: 'ImperialMarch60',\r\n//     songFile: songFile,\r\n//     color: 'black',\r\n//     fontColor: 'black',\r\n//   },\r\n//   {\r\n//     name: 'Rodriguez - Inner City Blue',\r\n//     songFile: songFile2,\r\n//     color: 'red',\r\n//     fontColor: 'black',\r\n//   },\r\n//   {\r\n//     name: 'Lucky Dube-Too-Many-People',\r\n//     songFile: songFile3,\r\n//     color: 'pink',\r\n//     fontColor: 'darkpurple',\r\n//   },\r\n// ]\r\n\r\nlet rafId\r\nlet analyser\r\n// Changing Variables\r\nlet ctx, x_end, y_end, bar_height\r\n\r\n// constants\r\n// const width = window.innerWidth * (3 / 4) //\r\n// const width = 1000\r\n// const height = window.innerHeight\r\n// const height = 1000\r\nconst bars = 999 //  max 1030 - leave it in 555\r\nconst bar_width = 2 //  good in 1\r\nconst radius = 0 // innercircle\r\n\r\nlet audioSource = new Audio(songs[0].songFile)\r\n\r\nconst Displayer = () => {\r\n  const [width, height] = UpdateWindowSize()\r\n  const [audio, setAudio] = useState(audioSource)\r\n  // const [songList, setSongList] = useState(songs)\r\n  const [canvas, setCanvas] = useState(createRef())\r\n  //\r\n  const [audioContext, setAudioContext] = useState()\r\n  const [isPaused, setIsPaused] = useState(true)\r\n  //\r\n  const [currentSong, setCurrentSong] = useState(0)\r\n  const [frequency_array, setFrequencyArray] = useState()\r\n  const [songName, setSongName] = useState(songs[0].name)\r\n  const [textColor, setTextColor] = useState(songs[0].textColor)\r\n  //changing the 2 lines below moves the canves\r\n  const center_x = width / 2\r\n  const center_y = height / 2\r\n  function animationLooper(canvas) {\r\n    canvas.width = width\r\n    canvas.height = height\r\n\r\n    ctx = canvas.getContext('2d')\r\n\r\n    for (var i = 0; i < bars; i++) {\r\n      //divide a circle into equal part\r\n      const rads = (Math.PI * 2) / bars\r\n\r\n      // Math is magical - you can make lots of visualizer\r\n      // this 4.5 decides the canves size\r\n      bar_height = frequency_array[i] * 2.5\r\n\r\n      const x = center_x + Math.cos(rads * i) * radius\r\n      const y = center_y + Math.sin(rads * i) * radius\r\n      x_end = center_x + Math.cos(rads * i) * (radius + bar_height)\r\n      y_end = center_y + Math.sin(rads * i) * (radius + bar_height)\r\n\r\n      //draw a bar\r\n      drawBar(x, y, x_end, y_end, frequency_array[i], ctx, canvas)\r\n    }\r\n  }\r\n\r\n  function drawBar(x1 = 0, y1 = 0, x2 = 0, y2 = 0, frequency, ctx, canvas) {\r\n    const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height)\r\n    // gradient.addColorStop(0, \"rgba(35, 7, 77, 1)\");\r\n    // gradient.addColorStop(1, \"rgba(204, 83, 51, 1)\");\r\n    gradient.addColorStop(0, 'rgba(30, 17, 18, 11)')\r\n    gradient.addColorStop(1, 'rgba(254, 283, 151, 121)')\r\n    ctx.fillStyle = gradient\r\n\r\n    const lineColor = 'rgb(' + frequency + ', ' + frequency + ', ' + 205 + ')'\r\n    ctx.strokeStyle = lineColor\r\n    ctx.lineWidth = bar_width\r\n    ctx.beginPath()\r\n    ctx.moveTo(x1, y1)\r\n    ctx.lineTo(x2, y2)\r\n    ctx.stroke()\r\n  }\r\n\r\n  useEffect(() => {\r\n    let context = new (window.AudioContext || window.webkitAudioContext)()\r\n    let source = context.createMediaElementSource(audio)\r\n\r\n    analyser = context.createAnalyser()\r\n    source.connect(analyser)\r\n    analyser.connect(context.destination)\r\n    let frequencyArray = new Uint8Array(analyser.frequencyBinCount)\r\n    setFrequencyArray(frequencyArray)\r\n    //\r\n    setAudioContext(context)\r\n    //\r\n  }, [audio])\r\n\r\n  const togglePlay = () => {\r\n    // const { audio } = this;\r\n    if (audio.paused) {\r\n      audioContext.resume()\r\n      audio.play()\r\n      setIsPaused(false)\r\n      rafId = requestAnimationFrame(tick)\r\n    } else {\r\n      audio.pause()\r\n      setIsPaused(true)\r\n      cancelAnimationFrame(rafId)\r\n    }\r\n  }\r\n\r\n  const changeSong = (songNumber) => {\r\n    console.log('No8', songNumber)\r\n    let { name, songFile, color, fontColor } = songList[songNumber]\r\n    audio.src = songFile\r\n    if (!isPaused) {\r\n      audio.play()\r\n    }\r\n    setCurrentSong(songNumber)\r\n    setSongName(name)\r\n    // setBackgroundColor(color)\r\n    setTextColor(fontColor)\r\n  }\r\n\r\n  const tick = () => {\r\n    animationLooper(canvas.current)\r\n    analyser.getByteTimeDomainData(frequency_array)\r\n    rafId = requestAnimationFrame(tick)\r\n  }\r\n\r\n  return (\r\n    <div className=\"audioControl Background\">\r\n      <button\r\n        onClick={togglePlay}\r\n        style={\r\n          isPaused\r\n            // this is the play/pause button colors\r\n            ? { backgroundColor: 'yellow' }\r\n            : { backgroundColor: 'green' }\r\n\r\n        }\r\n      >\r\n        {isPaused ? 'Paused' : 'PLAYING !!!'}\r\n      </button>\r\n\r\n      <button\r\n        onClick={() => {\r\n          changeSong((currentSong + 1) % 3)\r\n        }}\r\n      >\r\n        Change Song my Friend\r\n      </button>\r\n      <canvas ref={canvas} />\r\n      {/* <div className=\"songName\"> */}\r\n      <h3 style={{ color: textColor }}>{songName}</h3>\r\n      {/* </div> */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Displayer\r\n","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\UploadAudio\\AudioUpload.js",["65","66","67"],"import React, { useState } from 'react'\r\nimport axios from 'axios'\r\nimport { Card, Button } from 'react-bootstrap'\r\n\r\nconst AudioUpload = () => {\r\n  //Need to use a hook to set text in the label to the file namespace\r\n  const [file, setFile] = useState('')\r\n  const [filename, setFilename] = useState('Choose File')\r\n  const [uploadedFile, setUploadedFile] = useState({})\r\n\r\n  const onChange = (e) => {\r\n    //HTML file uploads come as an array so we want the index of the first file\r\n    setFile(e.target.files[0])\r\n    setFilename(e.target.files[0].name)\r\n  }\r\n\r\n  const onSubmit = async (e) => {\r\n    // e.preventDefault() used to prevent submitting by accident by preventing normal submitting\r\n    e.preventDefault()\r\n    const formData = new FormData()\r\n    formData.append('file', file)\r\n\r\n    try {\r\n      //Need to connect to the server the endpoint is media\r\n      const res = await axios.post(\r\n        'http://localhost:5000/upload/media',\r\n        formData,\r\n        {\r\n          headers: { 'Content-Type': 'multipart/form-data' },\r\n        },\r\n      )\r\n      const { fileName, filePath } = res.data\r\n      console.log(res.headers)\r\n      if (res.status === 200) {\r\n        console.log('Was uploaded successfully ' + res.status)\r\n      }\r\n      setUploadedFile({ fileName, filePath })\r\n    } catch (err) {\r\n      if (err.response.status === 500) {\r\n        console.error('There is a problem with the server ' + err.message)\r\n      } else {\r\n        //This message is from the server if no file is uploaded\r\n        console.error(err.response.data.msg)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card style={{ width: '18rem', margin: '20px' }}>\r\n      <Card.Body>\r\n        <Card.Title>Audio Upload</Card.Title>\r\n        <Card.Subtitle className=\"mb-2 text-muted\">\r\n          Select audio to upload\r\n        </Card.Subtitle>\r\n        <Card.Text>\r\n          <>\r\n            <div className=\"mb-2\">\r\n              <form onSubmit={onSubmit}>\r\n                <div className=\"input-group mb-3\">\r\n                  <input\r\n                    type=\"file\"\r\n                    className=\"form-control\"\r\n                    id=\"inputGroupFile02\"\r\n                    accept=\"audio/wav, audio/mp3\"\r\n                    onChange={onChange}\r\n                  />\r\n                  <input\r\n                    type=\"submit\"\r\n                    value=\"UploadAudio\"\r\n                    className=\"btn btn-danger btn-block\"\r\n                  />\r\n\r\n                  <label\r\n                    className=\"id=inputGroupFile02\"\r\n                    htmlFor=\"inputGroupFile02\"\r\n                  ></label>\r\n                </div>\r\n              </form>\r\n            </div>\r\n            {/* <div>\r\n              {uploadedFile ? (\r\n                <div className=\"row mt-5\">\r\n                  <div className=\"col-md-6 m-auto\">\r\n                    <h3 className=\"text-center\">{uploadedFile.filename}</h3>\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <div>Upload files</div>\r\n              )}\r\n            </div> */}\r\n          </>\r\n        </Card.Text>\r\n      </Card.Body>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default AudioUpload\r\n",["68","69"],"C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\UploadBackground\\backgroundUpload.js",["70","71"],"import React, { useState, Fragment } from 'react'\r\nimport axios from 'axios'\r\nimport { Card } from 'react-bootstrap'\r\n\r\nconst BackgroundUpload = () => {\r\n  //Need to use a hook to set text in the label to the file namespace\r\n  const [file, setFile] = useState('')\r\n  const [filename, setFilename] = useState('Choose File')\r\n  const [uploadedFile, setUploadedFile] = useState({})\r\n\r\n  const onChange = (e) => {\r\n    //HTML file uploads come as an array so we want the index of the first file\r\n    setFile(e.target.files[0])\r\n    setFilename(e.target.files[0].name)\r\n  }\r\n\r\n  const onSubmit = async (e) => {\r\n    //used to prevent submitting by accident by preventing normal submitting\r\n    e.preventDefault()\r\n    const formData = new FormData()\r\n    formData.append('file', file)\r\n\r\n    try {\r\n      //Need to connect to the server the endpoint is media\r\n      const res = await axios.post(\r\n        'http://localhost:5000/upload/media',\r\n        formData,\r\n        {\r\n          headers: { 'Content-Type': 'multipart/form-data' },\r\n        },\r\n      )\r\n      const { fileName, filePath } = res.data\r\n      if (res.status === 200) {\r\n        console.log('Was uploaded successfully ' + res.status)\r\n      }\r\n      setUploadedFile({ fileName, filePath })\r\n    } catch (err) {\r\n      if (err.response.status === 500) {\r\n        console.error('There is a problem with the server ' + err.message)\r\n      } else {\r\n        //This message is from the server if no file is uploaded\r\n        console.error(err.response.data.msg)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    //The fragment allows to group children without creating extra nodes\r\n    <Card style={{ width: '18rem' }}>\r\n      <Card.Body>\r\n        <Card.Title>Upload Background</Card.Title>\r\n        <Card.Subtitle className=\"mb-2 text-muted\">\r\n          Select a background to upload\r\n        </Card.Subtitle>\r\n        <Card.Text>\r\n          <Fragment>\r\n            <div className=\"mb-2\">\r\n              <form onSubmit={onSubmit}>\r\n                <div className=\"input-group mb-3\">\r\n                  <input\r\n                    type=\"file\"\r\n                    className=\"form-control\"\r\n                    id=\"inputGroupFile02\"\r\n                    accept=\"image/gif, image/jpeg, image/jpg\"\r\n                    onChange={onChange}\r\n                  />\r\n                  <input\r\n                    type=\"submit\"\r\n                    value=\"Upload Background\"\r\n                    className=\"btn btn-primary btn-block\"\r\n                  />\r\n\r\n                  <label\r\n                    className=\"id=inputGroupFile02\"\r\n                    htmlFor=\"inputGroupFile02\"\r\n                  ></label>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </Fragment>\r\n        </Card.Text>\r\n      </Card.Body>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default BackgroundUpload\r\n","C:\\Users\\samsu\\Desktop\\SAMSUDEEN\\EvolveU_FullStackDev\\PROJ_3\\musicVisualizerApp\\client\\src\\Components\\UploadIcon\\IconUpload.js",["72","73"],"import React, { useState, Fragment } from 'react'\r\nimport axios from 'axios'\r\nimport { Card } from 'react-bootstrap'\r\n\r\nconst IconUpload = () => {\r\n  //Need to use a hook to set text in the label to the file namespace\r\n  const [file, setFile] = useState('')\r\n  const [filename, setFilename] = useState('Choose File')\r\n  const [uploadedFile, setUploadedFile] = useState({})\r\n\r\n  const onChange = (e) => {\r\n    //HTML file uploads come as an array so we want the index of the first file\r\n    setFile(e.target.files[0])\r\n    setFilename(e.target.files[0].name)\r\n  }\r\n\r\n  const onSubmit = async (e) => {\r\n    //used to prevent submitting by accident by preventing normal submitting\r\n    e.preventDefault()\r\n    const formData = new FormData()\r\n    formData.append('file', file)\r\n    console.log(formData)\r\n    try {\r\n      //Need to connect to the server this is the endpoint\r\n      const res = await axios.post(\r\n        'http://localhost:5000/upload/icon',\r\n        formData,\r\n        {\r\n          headers: { 'Content-Type': 'multipart/form-data' },\r\n        },\r\n      )\r\n      const { fileName, filePath } = res.data\r\n      if (res.status === 200) {\r\n        console.log('Icon was uploaded successfully ' + res.status)\r\n      }\r\n      setUploadedFile({ fileName, filePath })\r\n    } catch (err) {\r\n      if (err.response.status === 500) {\r\n        console.error('There is a problem with the server ' + err.message)\r\n      } else {\r\n        //This message is from the server if no file is uploaded\r\n        console.error(err.response.data.msg)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    //The fragment allows to group children without creating extra nodes\r\n    <Card style={{ width: '18rem' }}>\r\n      <Card.Body>\r\n        <Card.Title>Upload Icon</Card.Title>\r\n        <Card.Subtitle className=\"mb-2 text-muted\">\r\n          Select an Icon to upload\r\n        </Card.Subtitle>\r\n        <Card.Text>\r\n          <Fragment>\r\n            <div className=\"mb-2\">\r\n              <form onSubmit={onSubmit}>\r\n                <div className=\"input-group mb-3\">\r\n                  <input\r\n                    type=\"file\"\r\n                    className=\"form-control\"\r\n                    id=\"inputGroupFile02\"\r\n                    accept=\"image/gif, image/png, image/jpeg, image/jpg\"\r\n                    onChange={onChange}\r\n                  />\r\n                  <input\r\n                    type=\"submit\"\r\n                    value=\"Upload Background\"\r\n                    className=\"btn btn-primary btn-block\"\r\n                  />\r\n\r\n                  <label\r\n                    className=\"id=inputGroupFile02\"\r\n                    htmlFor=\"inputGroupFile02\"\r\n                  ></label>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </Fragment>\r\n        </Card.Text>\r\n      </Card.Body>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default IconUpload\r\n",{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":10,"column":10,"nodeType":"80","messageId":"81","endLine":10,"endColumn":15},{"ruleId":"78","severity":1,"message":"82","line":4,"column":3,"nodeType":"80","messageId":"81","endLine":4,"endColumn":12},{"ruleId":"78","severity":1,"message":"83","line":5,"column":3,"nodeType":"80","messageId":"81","endLine":5,"endColumn":7},{"ruleId":"84","severity":2,"message":"85","line":70,"column":29,"nodeType":"80","messageId":"86","endLine":70,"endColumn":34},{"ruleId":"78","severity":1,"message":"87","line":74,"column":17,"nodeType":"80","messageId":"81","endLine":74,"endColumn":25},{"ruleId":"78","severity":1,"message":"88","line":76,"column":18,"nodeType":"80","messageId":"81","endLine":76,"endColumn":27},{"ruleId":"84","severity":2,"message":"85","line":83,"column":44,"nodeType":"80","messageId":"86","endLine":83,"endColumn":49},{"ruleId":"84","severity":2,"message":"85","line":84,"column":46,"nodeType":"80","messageId":"86","endLine":84,"endColumn":51},{"ruleId":"78","severity":1,"message":"89","line":159,"column":27,"nodeType":"80","messageId":"81","endLine":159,"endColumn":32},{"ruleId":"78","severity":1,"message":"90","line":3,"column":16,"nodeType":"80","messageId":"81","endLine":3,"endColumn":22},{"ruleId":"78","severity":1,"message":"91","line":8,"column":10,"nodeType":"80","messageId":"81","endLine":8,"endColumn":18},{"ruleId":"78","severity":1,"message":"92","line":9,"column":10,"nodeType":"80","messageId":"81","endLine":9,"endColumn":22},{"ruleId":"74","replacedBy":"93"},{"ruleId":"76","replacedBy":"94"},{"ruleId":"78","severity":1,"message":"91","line":8,"column":10,"nodeType":"80","messageId":"81","endLine":8,"endColumn":18},{"ruleId":"78","severity":1,"message":"92","line":9,"column":10,"nodeType":"80","messageId":"81","endLine":9,"endColumn":22},{"ruleId":"78","severity":1,"message":"91","line":8,"column":10,"nodeType":"80","messageId":"81","endLine":8,"endColumn":18},{"ruleId":"78","severity":1,"message":"92","line":9,"column":10,"nodeType":"80","messageId":"81","endLine":9,"endColumn":22},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"no-unused-vars","'route' is assigned a value but never used.","Identifier","unusedVar","'Container' is defined but never used.","'Card' is defined but never used.","no-undef","'songs' is not defined.","undef","'setAudio' is assigned a value but never used.","'setCanvas' is assigned a value but never used.","'color' is assigned a value but never used.","'Button' is defined but never used.","'filename' is assigned a value but never used.","'uploadedFile' is assigned a value but never used.",["95"],["96"],"no-global-assign","no-unsafe-negation"]